
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002948  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  00002948  000029bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000023f4  00000000  00000000  00002a44  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000eff  00000000  00000000  00004e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005d37  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000098c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a483  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 26 14 	jmp	0x284c	; 0x284c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a9 ed       	ldi	r26, 0xD9	; 217
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 26 14 	jmp	0x284c	; 0x284c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	89 ed       	ldi	r24, 0xD9	; 217
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 36 14 	jmp	0x286c	; 0x286c <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 52 14 	jmp	0x28a4	; 0x28a4 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
void Menu();
void CheckPassword();
void WrongPass();


int main(void){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2c 97       	sbiw	r28, 0x0c	; 12
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	UART_Config uartConfig ={SIZE_8,DISABLED,BIT_1,9600};
     b4a:	ce 01       	movw	r24, r28
     b4c:	01 96       	adiw	r24, 0x01	; 1
     b4e:	99 87       	std	Y+9, r25	; 0x09
     b50:	88 87       	std	Y+8, r24	; 0x08
     b52:	e1 ee       	ldi	r30, 0xE1	; 225
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	fb 87       	std	Y+11, r31	; 0x0b
     b58:	ea 87       	std	Y+10, r30	; 0x0a
     b5a:	f7 e0       	ldi	r31, 0x07	; 7
     b5c:	fc 87       	std	Y+12, r31	; 0x0c
     b5e:	ea 85       	ldd	r30, Y+10	; 0x0a
     b60:	fb 85       	ldd	r31, Y+11	; 0x0b
     b62:	00 80       	ld	r0, Z
     b64:	8a 85       	ldd	r24, Y+10	; 0x0a
     b66:	9b 85       	ldd	r25, Y+11	; 0x0b
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	9b 87       	std	Y+11, r25	; 0x0b
     b6c:	8a 87       	std	Y+10, r24	; 0x0a
     b6e:	e8 85       	ldd	r30, Y+8	; 0x08
     b70:	f9 85       	ldd	r31, Y+9	; 0x09
     b72:	00 82       	st	Z, r0
     b74:	88 85       	ldd	r24, Y+8	; 0x08
     b76:	99 85       	ldd	r25, Y+9	; 0x09
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	99 87       	std	Y+9, r25	; 0x09
     b7c:	88 87       	std	Y+8, r24	; 0x08
     b7e:	9c 85       	ldd	r25, Y+12	; 0x0c
     b80:	91 50       	subi	r25, 0x01	; 1
     b82:	9c 87       	std	Y+12, r25	; 0x0c
     b84:	ec 85       	ldd	r30, Y+12	; 0x0c
     b86:	ee 23       	and	r30, r30
     b88:	51 f7       	brne	.-44     	; 0xb5e <main+0x28>
	UART_init(&uartConfig);
     b8a:	ce 01       	movw	r24, r28
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	0e 94 d6 12 	call	0x25ac	; 0x25ac <UART_init>
	LCD_init();
     b92:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <LCD_init>
	SetPassword();
     b96:	0e 94 19 08 	call	0x1032	; 0x1032 <SetPassword>

	while(1){
		Menu();
     b9a:	0e 94 d0 05 	call	0xba0	; 0xba0 <Menu>
     b9e:	fd cf       	rjmp	.-6      	; 0xb9a <main+0x64>

00000ba0 <Menu>:
	}
}


void Menu(){
     ba0:	df 93       	push	r29
     ba2:	cf 93       	push	r28
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	63 97       	sbiw	r28, 0x13	; 19
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	uint8 password_flag;
	uint8 timer_counter;
	LCD_clearScreen();
     bb4:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_clearScreen>
	LCD_displayString("1: Open Door");
     bb8:	80 e6       	ldi	r24, 0x60	; 96
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_displayString>
	LCD_moveCursor(1,0);
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	0e 94 4e 12 	call	0x249c	; 0x249c <LCD_moveCursor>
	LCD_displayString("2: Change Pass");
     bc8:	8d e6       	ldi	r24, 0x6D	; 109
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_displayString>

	do{
		key=KEYPAD_getPressedKey();
     bd0:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <KEYPAD_getPressedKey>
     bd4:	89 8b       	std	Y+17, r24	; 0x11
	}while( key != 1  && key != 2);
     bd6:	89 89       	ldd	r24, Y+17	; 0x11
     bd8:	81 30       	cpi	r24, 0x01	; 1
     bda:	19 f0       	breq	.+6      	; 0xbe2 <Menu+0x42>
     bdc:	89 89       	ldd	r24, Y+17	; 0x11
     bde:	82 30       	cpi	r24, 0x02	; 2
     be0:	b9 f7       	brne	.-18     	; 0xbd0 <Menu+0x30>

	while(UART_receiveByte() != 55);
     be2:	0e 94 89 13 	call	0x2712	; 0x2712 <UART_receiveByte>
     be6:	87 33       	cpi	r24, 0x37	; 55
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <Menu+0x42>
	UART_sendByte(key);
     bea:	89 89       	ldd	r24, Y+17	; 0x11
     bec:	0e 94 72 13 	call	0x26e4	; 0x26e4 <UART_sendByte>
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	aa ef       	ldi	r26, 0xFA	; 250
     bf6:	b3 e4       	ldi	r27, 0x43	; 67
     bf8:	8b 87       	std	Y+11, r24	; 0x0b
     bfa:	9c 87       	std	Y+12, r25	; 0x0c
     bfc:	ad 87       	std	Y+13, r26	; 0x0d
     bfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c00:	6b 85       	ldd	r22, Y+11	; 0x0b
     c02:	7c 85       	ldd	r23, Y+12	; 0x0c
     c04:	8d 85       	ldd	r24, Y+13	; 0x0d
     c06:	9e 85       	ldd	r25, Y+14	; 0x0e
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	4a ef       	ldi	r20, 0xFA	; 250
     c0e:	54 e4       	ldi	r21, 0x44	; 68
     c10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	8f 83       	std	Y+7, r24	; 0x07
     c1a:	98 87       	std	Y+8, r25	; 0x08
     c1c:	a9 87       	std	Y+9, r26	; 0x09
     c1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c20:	6f 81       	ldd	r22, Y+7	; 0x07
     c22:	78 85       	ldd	r23, Y+8	; 0x08
     c24:	89 85       	ldd	r24, Y+9	; 0x09
     c26:	9a 85       	ldd	r25, Y+10	; 0x0a
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	40 e8       	ldi	r20, 0x80	; 128
     c2e:	5f e3       	ldi	r21, 0x3F	; 63
     c30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c34:	88 23       	and	r24, r24
     c36:	2c f4       	brge	.+10     	; 0xc42 <Menu+0xa2>
		__ticks = 1;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	9e 83       	std	Y+6, r25	; 0x06
     c3e:	8d 83       	std	Y+5, r24	; 0x05
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <Menu+0x120>
	else if (__tmp > 65535)
     c42:	6f 81       	ldd	r22, Y+7	; 0x07
     c44:	78 85       	ldd	r23, Y+8	; 0x08
     c46:	89 85       	ldd	r24, Y+9	; 0x09
     c48:	9a 85       	ldd	r25, Y+10	; 0x0a
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	3f ef       	ldi	r19, 0xFF	; 255
     c4e:	4f e7       	ldi	r20, 0x7F	; 127
     c50:	57 e4       	ldi	r21, 0x47	; 71
     c52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c56:	18 16       	cp	r1, r24
     c58:	4c f5       	brge	.+82     	; 0xcac <Menu+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c5a:	6b 85       	ldd	r22, Y+11	; 0x0b
     c5c:	7c 85       	ldd	r23, Y+12	; 0x0c
     c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c60:	9e 85       	ldd	r25, Y+14	; 0x0e
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	40 e2       	ldi	r20, 0x20	; 32
     c68:	51 e4       	ldi	r21, 0x41	; 65
     c6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	bc 01       	movw	r22, r24
     c74:	cd 01       	movw	r24, r26
     c76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c7a:	dc 01       	movw	r26, r24
     c7c:	cb 01       	movw	r24, r22
     c7e:	9e 83       	std	Y+6, r25	; 0x06
     c80:	8d 83       	std	Y+5, r24	; 0x05
     c82:	0f c0       	rjmp	.+30     	; 0xca2 <Menu+0x102>
     c84:	88 ec       	ldi	r24, 0xC8	; 200
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	9c 83       	std	Y+4, r25	; 0x04
     c8a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	9c 81       	ldd	r25, Y+4	; 0x04
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	f1 f7       	brne	.-4      	; 0xc90 <Menu+0xf0>
     c94:	9c 83       	std	Y+4, r25	; 0x04
     c96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c98:	8d 81       	ldd	r24, Y+5	; 0x05
     c9a:	9e 81       	ldd	r25, Y+6	; 0x06
     c9c:	01 97       	sbiw	r24, 0x01	; 1
     c9e:	9e 83       	std	Y+6, r25	; 0x06
     ca0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca2:	8d 81       	ldd	r24, Y+5	; 0x05
     ca4:	9e 81       	ldd	r25, Y+6	; 0x06
     ca6:	00 97       	sbiw	r24, 0x00	; 0
     ca8:	69 f7       	brne	.-38     	; 0xc84 <Menu+0xe4>
     caa:	14 c0       	rjmp	.+40     	; 0xcd4 <Menu+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cac:	6f 81       	ldd	r22, Y+7	; 0x07
     cae:	78 85       	ldd	r23, Y+8	; 0x08
     cb0:	89 85       	ldd	r24, Y+9	; 0x09
     cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     cb8:	dc 01       	movw	r26, r24
     cba:	cb 01       	movw	r24, r22
     cbc:	9e 83       	std	Y+6, r25	; 0x06
     cbe:	8d 83       	std	Y+5, r24	; 0x05
     cc0:	8d 81       	ldd	r24, Y+5	; 0x05
     cc2:	9e 81       	ldd	r25, Y+6	; 0x06
     cc4:	9a 83       	std	Y+2, r25	; 0x02
     cc6:	89 83       	std	Y+1, r24	; 0x01
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	9a 81       	ldd	r25, Y+2	; 0x02
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <Menu+0x12c>
     cd0:	9a 83       	std	Y+2, r25	; 0x02
     cd2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	CheckPassword();
     cd4:	0e 94 50 07 	call	0xea0	; 0xea0 <CheckPassword>
	UART_sendByte(20);
     cd8:	84 e1       	ldi	r24, 0x14	; 20
     cda:	0e 94 72 13 	call	0x26e4	; 0x26e4 <UART_sendByte>
	password_flag=UART_receiveByte();
     cde:	0e 94 89 13 	call	0x2712	; 0x2712 <UART_receiveByte>
     ce2:	88 8b       	std	Y+16, r24	; 0x10

	LCD_clearScreen();
     ce4:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_clearScreen>

	switch(key){
     ce8:	89 89       	ldd	r24, Y+17	; 0x11
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	3b 8b       	std	Y+19, r19	; 0x13
     cf0:	2a 8b       	std	Y+18, r18	; 0x12
     cf2:	8a 89       	ldd	r24, Y+18	; 0x12
     cf4:	9b 89       	ldd	r25, Y+19	; 0x13
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	91 05       	cpc	r25, r1
     cfa:	31 f0       	breq	.+12     	; 0xd08 <Menu+0x168>
     cfc:	2a 89       	ldd	r18, Y+18	; 0x12
     cfe:	3b 89       	ldd	r19, Y+19	; 0x13
     d00:	22 30       	cpi	r18, 0x02	; 2
     d02:	31 05       	cpc	r19, r1
     d04:	89 f1       	breq	.+98     	; 0xd68 <Menu+0x1c8>
     d06:	38 c0       	rjmp	.+112    	; 0xd78 <Menu+0x1d8>
	case 1:
		if (password_flag)
     d08:	88 89       	ldd	r24, Y+16	; 0x10
     d0a:	88 23       	and	r24, r24
     d0c:	51 f1       	breq	.+84     	; 0xd62 <Menu+0x1c2>
		{
			do{
				timer_counter=UART_receiveByte();
     d0e:	0e 94 89 13 	call	0x2712	; 0x2712 <UART_receiveByte>
     d12:	8f 87       	std	Y+15, r24	; 0x0f
				if (timer_counter==1){
     d14:	8f 85       	ldd	r24, Y+15	; 0x0f
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	39 f4       	brne	.+14     	; 0xd28 <Menu+0x188>
					LCD_clearScreen();
     d1a:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_clearScreen>
					LCD_displayString("Opening");
     d1e:	8c e7       	ldi	r24, 0x7C	; 124
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_displayString>
     d26:	19 c0       	rjmp	.+50     	; 0xd5a <Menu+0x1ba>
				}
				else if (timer_counter==6){
     d28:	8f 85       	ldd	r24, Y+15	; 0x0f
     d2a:	86 30       	cpi	r24, 0x06	; 6
     d2c:	39 f4       	brne	.+14     	; 0xd3c <Menu+0x19c>
					LCD_clearScreen();
     d2e:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_clearScreen>
					LCD_displayString("Door Open");
     d32:	84 e8       	ldi	r24, 0x84	; 132
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_displayString>
     d3a:	0f c0       	rjmp	.+30     	; 0xd5a <Menu+0x1ba>
				}
				else if (timer_counter==29){
     d3c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d3e:	8d 31       	cpi	r24, 0x1D	; 29
     d40:	39 f4       	brne	.+14     	; 0xd50 <Menu+0x1b0>
					LCD_clearScreen();
     d42:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_clearScreen>
					LCD_displayString("Closing");
     d46:	8e e8       	ldi	r24, 0x8E	; 142
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_displayString>
     d4e:	05 c0       	rjmp	.+10     	; 0xd5a <Menu+0x1ba>
				}
				else if (timer_counter==34)
     d50:	8f 85       	ldd	r24, Y+15	; 0x0f
     d52:	82 32       	cpi	r24, 0x22	; 34
     d54:	11 f4       	brne	.+4      	; 0xd5a <Menu+0x1ba>
				{
					LCD_clearScreen();
     d56:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_clearScreen>
				}
			}while (timer_counter != 34);
     d5a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d5c:	82 32       	cpi	r24, 0x22	; 34
     d5e:	b9 f6       	brne	.-82     	; 0xd0e <Menu+0x16e>
     d60:	0b c0       	rjmp	.+22     	; 0xd78 <Menu+0x1d8>
		}
		else{
			WrongPass();
     d62:	0e 94 c5 06 	call	0xd8a	; 0xd8a <WrongPass>
     d66:	08 c0       	rjmp	.+16     	; 0xd78 <Menu+0x1d8>
		}
		break;
	case 2:
		if (password_flag)
     d68:	88 89       	ldd	r24, Y+16	; 0x10
     d6a:	88 23       	and	r24, r24
     d6c:	19 f0       	breq	.+6      	; 0xd74 <Menu+0x1d4>
		{
			SetPassword();
     d6e:	0e 94 19 08 	call	0x1032	; 0x1032 <SetPassword>
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <Menu+0x1d8>
		}
		else{
			WrongPass();
     d74:	0e 94 c5 06 	call	0xd8a	; 0xd8a <WrongPass>
		}
		break;
	}
}
     d78:	63 96       	adiw	r28, 0x13	; 19
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <WrongPass>:
void WrongPass(){
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	2e 97       	sbiw	r28, 0x0e	; 14
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
     d9e:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_clearScreen>
	LCD_displayString("Wrong Password!");
     da2:	86 e9       	ldi	r24, 0x96	; 150
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_displayString>
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	aa ef       	ldi	r26, 0xFA	; 250
     db0:	b4 e4       	ldi	r27, 0x44	; 68
     db2:	8b 87       	std	Y+11, r24	; 0x0b
     db4:	9c 87       	std	Y+12, r25	; 0x0c
     db6:	ad 87       	std	Y+13, r26	; 0x0d
     db8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dba:	6b 85       	ldd	r22, Y+11	; 0x0b
     dbc:	7c 85       	ldd	r23, Y+12	; 0x0c
     dbe:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc0:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	4a ef       	ldi	r20, 0xFA	; 250
     dc8:	54 e4       	ldi	r21, 0x44	; 68
     dca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	8f 83       	std	Y+7, r24	; 0x07
     dd4:	98 87       	std	Y+8, r25	; 0x08
     dd6:	a9 87       	std	Y+9, r26	; 0x09
     dd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dda:	6f 81       	ldd	r22, Y+7	; 0x07
     ddc:	78 85       	ldd	r23, Y+8	; 0x08
     dde:	89 85       	ldd	r24, Y+9	; 0x09
     de0:	9a 85       	ldd	r25, Y+10	; 0x0a
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e8       	ldi	r20, 0x80	; 128
     de8:	5f e3       	ldi	r21, 0x3F	; 63
     dea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     dee:	88 23       	and	r24, r24
     df0:	2c f4       	brge	.+10     	; 0xdfc <WrongPass+0x72>
		__ticks = 1;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	9e 83       	std	Y+6, r25	; 0x06
     df8:	8d 83       	std	Y+5, r24	; 0x05
     dfa:	3f c0       	rjmp	.+126    	; 0xe7a <WrongPass+0xf0>
	else if (__tmp > 65535)
     dfc:	6f 81       	ldd	r22, Y+7	; 0x07
     dfe:	78 85       	ldd	r23, Y+8	; 0x08
     e00:	89 85       	ldd	r24, Y+9	; 0x09
     e02:	9a 85       	ldd	r25, Y+10	; 0x0a
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	3f ef       	ldi	r19, 0xFF	; 255
     e08:	4f e7       	ldi	r20, 0x7F	; 127
     e0a:	57 e4       	ldi	r21, 0x47	; 71
     e0c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e10:	18 16       	cp	r1, r24
     e12:	4c f5       	brge	.+82     	; 0xe66 <WrongPass+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e14:	6b 85       	ldd	r22, Y+11	; 0x0b
     e16:	7c 85       	ldd	r23, Y+12	; 0x0c
     e18:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 e2       	ldi	r20, 0x20	; 32
     e22:	51 e4       	ldi	r21, 0x41	; 65
     e24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	bc 01       	movw	r22, r24
     e2e:	cd 01       	movw	r24, r26
     e30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	9e 83       	std	Y+6, r25	; 0x06
     e3a:	8d 83       	std	Y+5, r24	; 0x05
     e3c:	0f c0       	rjmp	.+30     	; 0xe5c <WrongPass+0xd2>
     e3e:	88 ec       	ldi	r24, 0xC8	; 200
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	9c 83       	std	Y+4, r25	; 0x04
     e44:	8b 83       	std	Y+3, r24	; 0x03
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	9c 81       	ldd	r25, Y+4	; 0x04
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	f1 f7       	brne	.-4      	; 0xe4a <WrongPass+0xc0>
     e4e:	9c 83       	std	Y+4, r25	; 0x04
     e50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e52:	8d 81       	ldd	r24, Y+5	; 0x05
     e54:	9e 81       	ldd	r25, Y+6	; 0x06
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	9e 83       	std	Y+6, r25	; 0x06
     e5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e5c:	8d 81       	ldd	r24, Y+5	; 0x05
     e5e:	9e 81       	ldd	r25, Y+6	; 0x06
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	69 f7       	brne	.-38     	; 0xe3e <WrongPass+0xb4>
     e64:	14 c0       	rjmp	.+40     	; 0xe8e <WrongPass+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e66:	6f 81       	ldd	r22, Y+7	; 0x07
     e68:	78 85       	ldd	r23, Y+8	; 0x08
     e6a:	89 85       	ldd	r24, Y+9	; 0x09
     e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	9e 83       	std	Y+6, r25	; 0x06
     e78:	8d 83       	std	Y+5, r24	; 0x05
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	9a 83       	std	Y+2, r25	; 0x02
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	9a 81       	ldd	r25, Y+2	; 0x02
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	f1 f7       	brne	.-4      	; 0xe86 <WrongPass+0xfc>
     e8a:	9a 83       	std	Y+2, r25	; 0x02
     e8c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
}
     e8e:	2e 96       	adiw	r28, 0x0e	; 14
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <CheckPassword>:

void CheckPassword(){
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	69 97       	sbiw	r28, 0x19	; 25
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	uint8 password_try[10];
	LCD_clearScreen();
     eb8:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_clearScreen>
	LCD_displayString("Enter Password:");
     ebc:	86 ea       	ldi	r24, 0xA6	; 166
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_displayString>
	for (i=0;i<5;i++){
     ec4:	1f 86       	std	Y+15, r1	; 0x0f
     ec6:	88 c0       	rjmp	.+272    	; 0xfd8 <CheckPassword+0x138>
		password_try[i]=KEYPAD_getPressedKey();
     ec8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eca:	08 2f       	mov	r16, r24
     ecc:	10 e0       	ldi	r17, 0x00	; 0
     ece:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <KEYPAD_getPressedKey>
     ed2:	28 2f       	mov	r18, r24
     ed4:	ce 01       	movw	r24, r28
     ed6:	40 96       	adiw	r24, 0x10	; 16
     ed8:	fc 01       	movw	r30, r24
     eda:	e0 0f       	add	r30, r16
     edc:	f1 1f       	adc	r31, r17
     ede:	20 83       	st	Z, r18
		LCD_displayStringRowColumn(1,i,"*");
     ee0:	26 eb       	ldi	r18, 0xB6	; 182
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	6f 85       	ldd	r22, Y+15	; 0x0f
     ee8:	a9 01       	movw	r20, r18
     eea:	0e 94 90 12 	call	0x2520	; 0x2520 <LCD_displayStringRowColumn>
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	a8 e4       	ldi	r26, 0x48	; 72
     ef4:	b2 e4       	ldi	r27, 0x42	; 66
     ef6:	8b 87       	std	Y+11, r24	; 0x0b
     ef8:	9c 87       	std	Y+12, r25	; 0x0c
     efa:	ad 87       	std	Y+13, r26	; 0x0d
     efc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     efe:	6b 85       	ldd	r22, Y+11	; 0x0b
     f00:	7c 85       	ldd	r23, Y+12	; 0x0c
     f02:	8d 85       	ldd	r24, Y+13	; 0x0d
     f04:	9e 85       	ldd	r25, Y+14	; 0x0e
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	4a ef       	ldi	r20, 0xFA	; 250
     f0c:	54 e4       	ldi	r21, 0x44	; 68
     f0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	8f 83       	std	Y+7, r24	; 0x07
     f18:	98 87       	std	Y+8, r25	; 0x08
     f1a:	a9 87       	std	Y+9, r26	; 0x09
     f1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f1e:	6f 81       	ldd	r22, Y+7	; 0x07
     f20:	78 85       	ldd	r23, Y+8	; 0x08
     f22:	89 85       	ldd	r24, Y+9	; 0x09
     f24:	9a 85       	ldd	r25, Y+10	; 0x0a
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	40 e8       	ldi	r20, 0x80	; 128
     f2c:	5f e3       	ldi	r21, 0x3F	; 63
     f2e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f32:	88 23       	and	r24, r24
     f34:	2c f4       	brge	.+10     	; 0xf40 <CheckPassword+0xa0>
		__ticks = 1;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	9e 83       	std	Y+6, r25	; 0x06
     f3c:	8d 83       	std	Y+5, r24	; 0x05
     f3e:	3f c0       	rjmp	.+126    	; 0xfbe <CheckPassword+0x11e>
	else if (__tmp > 65535)
     f40:	6f 81       	ldd	r22, Y+7	; 0x07
     f42:	78 85       	ldd	r23, Y+8	; 0x08
     f44:	89 85       	ldd	r24, Y+9	; 0x09
     f46:	9a 85       	ldd	r25, Y+10	; 0x0a
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	3f ef       	ldi	r19, 0xFF	; 255
     f4c:	4f e7       	ldi	r20, 0x7F	; 127
     f4e:	57 e4       	ldi	r21, 0x47	; 71
     f50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f54:	18 16       	cp	r1, r24
     f56:	4c f5       	brge	.+82     	; 0xfaa <CheckPassword+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f58:	6b 85       	ldd	r22, Y+11	; 0x0b
     f5a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e2       	ldi	r20, 0x20	; 32
     f66:	51 e4       	ldi	r21, 0x41	; 65
     f68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	bc 01       	movw	r22, r24
     f72:	cd 01       	movw	r24, r26
     f74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	9e 83       	std	Y+6, r25	; 0x06
     f7e:	8d 83       	std	Y+5, r24	; 0x05
     f80:	0f c0       	rjmp	.+30     	; 0xfa0 <CheckPassword+0x100>
     f82:	88 ec       	ldi	r24, 0xC8	; 200
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	9c 83       	std	Y+4, r25	; 0x04
     f88:	8b 83       	std	Y+3, r24	; 0x03
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	9c 81       	ldd	r25, Y+4	; 0x04
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	f1 f7       	brne	.-4      	; 0xf8e <CheckPassword+0xee>
     f92:	9c 83       	std	Y+4, r25	; 0x04
     f94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f96:	8d 81       	ldd	r24, Y+5	; 0x05
     f98:	9e 81       	ldd	r25, Y+6	; 0x06
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	9e 83       	std	Y+6, r25	; 0x06
     f9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa0:	8d 81       	ldd	r24, Y+5	; 0x05
     fa2:	9e 81       	ldd	r25, Y+6	; 0x06
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	69 f7       	brne	.-38     	; 0xf82 <CheckPassword+0xe2>
     fa8:	14 c0       	rjmp	.+40     	; 0xfd2 <CheckPassword+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     faa:	6f 81       	ldd	r22, Y+7	; 0x07
     fac:	78 85       	ldd	r23, Y+8	; 0x08
     fae:	89 85       	ldd	r24, Y+9	; 0x09
     fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fb6:	dc 01       	movw	r26, r24
     fb8:	cb 01       	movw	r24, r22
     fba:	9e 83       	std	Y+6, r25	; 0x06
     fbc:	8d 83       	std	Y+5, r24	; 0x05
     fbe:	8d 81       	ldd	r24, Y+5	; 0x05
     fc0:	9e 81       	ldd	r25, Y+6	; 0x06
     fc2:	9a 83       	std	Y+2, r25	; 0x02
     fc4:	89 83       	std	Y+1, r24	; 0x01
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	9a 81       	ldd	r25, Y+2	; 0x02
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <CheckPassword+0x12a>
     fce:	9a 83       	std	Y+2, r25	; 0x02
     fd0:	89 83       	std	Y+1, r24	; 0x01
void CheckPassword(){
	uint8 i;
	uint8 password_try[10];
	LCD_clearScreen();
	LCD_displayString("Enter Password:");
	for (i=0;i<5;i++){
     fd2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd4:	8f 5f       	subi	r24, 0xFF	; 255
     fd6:	8f 87       	std	Y+15, r24	; 0x0f
     fd8:	8f 85       	ldd	r24, Y+15	; 0x0f
     fda:	85 30       	cpi	r24, 0x05	; 5
     fdc:	08 f4       	brcc	.+2      	; 0xfe0 <CheckPassword+0x140>
     fde:	74 cf       	rjmp	.-280    	; 0xec8 <CheckPassword+0x28>
		password_try[i]=KEYPAD_getPressedKey();
		LCD_displayStringRowColumn(1,i,"*");
		_delay_ms(50);
	}
	password_try[i]='#';
     fe0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	ce 01       	movw	r24, r28
     fe8:	40 96       	adiw	r24, 0x10	; 16
     fea:	fc 01       	movw	r30, r24
     fec:	e2 0f       	add	r30, r18
     fee:	f3 1f       	adc	r31, r19
     ff0:	83 e2       	ldi	r24, 0x23	; 35
     ff2:	80 83       	st	Z, r24
	password_try[++i]='\0';
     ff4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff6:	8f 5f       	subi	r24, 0xFF	; 255
     ff8:	8f 87       	std	Y+15, r24	; 0x0f
     ffa:	8f 85       	ldd	r24, Y+15	; 0x0f
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	ce 01       	movw	r24, r28
    1002:	40 96       	adiw	r24, 0x10	; 16
    1004:	fc 01       	movw	r30, r24
    1006:	e2 0f       	add	r30, r18
    1008:	f3 1f       	adc	r31, r19
    100a:	10 82       	st	Z, r1
	while(UART_receiveByte()!=111);
    100c:	0e 94 89 13 	call	0x2712	; 0x2712 <UART_receiveByte>
    1010:	8f 36       	cpi	r24, 0x6F	; 111
    1012:	e1 f7       	brne	.-8      	; 0x100c <CheckPassword+0x16c>
	UART_sendString(password_try);
    1014:	ce 01       	movw	r24, r28
    1016:	40 96       	adiw	r24, 0x10	; 16
    1018:	0e 94 98 13 	call	0x2730	; 0x2730 <UART_sendString>
}
    101c:	69 96       	adiw	r28, 0x19	; 25
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	08 95       	ret

00001032 <SetPassword>:

void SetPassword(){
    1032:	0f 93       	push	r16
    1034:	1f 93       	push	r17
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	c0 54       	subi	r28, 0x40	; 64
    1040:	d0 40       	sbci	r29, 0x00	; 0
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	uint8 password_flag = 0;
    104c:	1b a6       	std	Y+43, r1	; 0x2b
    104e:	e3 c1       	rjmp	.+966    	; 0x1416 <SetPassword+0x3e4>
	uint8 password_try1[10];
	uint8 password_try2[10];

	while(password_flag ==0){
		LCD_clearScreen();
    1050:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_clearScreen>
		LCD_displayString("New Password:");
    1054:	88 eb       	ldi	r24, 0xB8	; 184
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_displayString>

		for (i=0;i<5;i++){
    105c:	1c a6       	std	Y+44, r1	; 0x2c
    105e:	88 c0       	rjmp	.+272    	; 0x1170 <SetPassword+0x13e>
			password_try1[i]=KEYPAD_getPressedKey();
    1060:	8c a5       	ldd	r24, Y+44	; 0x2c
    1062:	08 2f       	mov	r16, r24
    1064:	10 e0       	ldi	r17, 0x00	; 0
    1066:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <KEYPAD_getPressedKey>
    106a:	28 2f       	mov	r18, r24
    106c:	ce 01       	movw	r24, r28
    106e:	8d 96       	adiw	r24, 0x2d	; 45
    1070:	fc 01       	movw	r30, r24
    1072:	e0 0f       	add	r30, r16
    1074:	f1 1f       	adc	r31, r17
    1076:	20 83       	st	Z, r18
			LCD_displayStringRowColumn(1,i,"*");
    1078:	26 eb       	ldi	r18, 0xB6	; 182
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	6c a5       	ldd	r22, Y+44	; 0x2c
    1080:	a9 01       	movw	r20, r18
    1082:	0e 94 90 12 	call	0x2520	; 0x2520 <LCD_displayStringRowColumn>
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	a8 e4       	ldi	r26, 0x48	; 72
    108c:	b2 e4       	ldi	r27, 0x42	; 66
    108e:	8f a3       	std	Y+39, r24	; 0x27
    1090:	98 a7       	std	Y+40, r25	; 0x28
    1092:	a9 a7       	std	Y+41, r26	; 0x29
    1094:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1096:	6f a1       	ldd	r22, Y+39	; 0x27
    1098:	78 a5       	ldd	r23, Y+40	; 0x28
    109a:	89 a5       	ldd	r24, Y+41	; 0x29
    109c:	9a a5       	ldd	r25, Y+42	; 0x2a
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	4a ef       	ldi	r20, 0xFA	; 250
    10a4:	54 e4       	ldi	r21, 0x44	; 68
    10a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	8b a3       	std	Y+35, r24	; 0x23
    10b0:	9c a3       	std	Y+36, r25	; 0x24
    10b2:	ad a3       	std	Y+37, r26	; 0x25
    10b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10b6:	6b a1       	ldd	r22, Y+35	; 0x23
    10b8:	7c a1       	ldd	r23, Y+36	; 0x24
    10ba:	8d a1       	ldd	r24, Y+37	; 0x25
    10bc:	9e a1       	ldd	r25, Y+38	; 0x26
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	40 e8       	ldi	r20, 0x80	; 128
    10c4:	5f e3       	ldi	r21, 0x3F	; 63
    10c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10ca:	88 23       	and	r24, r24
    10cc:	2c f4       	brge	.+10     	; 0x10d8 <SetPassword+0xa6>
		__ticks = 1;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	9a a3       	std	Y+34, r25	; 0x22
    10d4:	89 a3       	std	Y+33, r24	; 0x21
    10d6:	3f c0       	rjmp	.+126    	; 0x1156 <SetPassword+0x124>
	else if (__tmp > 65535)
    10d8:	6b a1       	ldd	r22, Y+35	; 0x23
    10da:	7c a1       	ldd	r23, Y+36	; 0x24
    10dc:	8d a1       	ldd	r24, Y+37	; 0x25
    10de:	9e a1       	ldd	r25, Y+38	; 0x26
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	3f ef       	ldi	r19, 0xFF	; 255
    10e4:	4f e7       	ldi	r20, 0x7F	; 127
    10e6:	57 e4       	ldi	r21, 0x47	; 71
    10e8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10ec:	18 16       	cp	r1, r24
    10ee:	4c f5       	brge	.+82     	; 0x1142 <SetPassword+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f0:	6f a1       	ldd	r22, Y+39	; 0x27
    10f2:	78 a5       	ldd	r23, Y+40	; 0x28
    10f4:	89 a5       	ldd	r24, Y+41	; 0x29
    10f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	40 e2       	ldi	r20, 0x20	; 32
    10fe:	51 e4       	ldi	r21, 0x41	; 65
    1100:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	bc 01       	movw	r22, r24
    110a:	cd 01       	movw	r24, r26
    110c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	9a a3       	std	Y+34, r25	; 0x22
    1116:	89 a3       	std	Y+33, r24	; 0x21
    1118:	0f c0       	rjmp	.+30     	; 0x1138 <SetPassword+0x106>
    111a:	88 ec       	ldi	r24, 0xC8	; 200
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	98 a3       	std	Y+32, r25	; 0x20
    1120:	8f 8f       	std	Y+31, r24	; 0x1f
    1122:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1124:	98 a1       	ldd	r25, Y+32	; 0x20
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	f1 f7       	brne	.-4      	; 0x1126 <SetPassword+0xf4>
    112a:	98 a3       	std	Y+32, r25	; 0x20
    112c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    112e:	89 a1       	ldd	r24, Y+33	; 0x21
    1130:	9a a1       	ldd	r25, Y+34	; 0x22
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	9a a3       	std	Y+34, r25	; 0x22
    1136:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1138:	89 a1       	ldd	r24, Y+33	; 0x21
    113a:	9a a1       	ldd	r25, Y+34	; 0x22
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	69 f7       	brne	.-38     	; 0x111a <SetPassword+0xe8>
    1140:	14 c0       	rjmp	.+40     	; 0x116a <SetPassword+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1142:	6b a1       	ldd	r22, Y+35	; 0x23
    1144:	7c a1       	ldd	r23, Y+36	; 0x24
    1146:	8d a1       	ldd	r24, Y+37	; 0x25
    1148:	9e a1       	ldd	r25, Y+38	; 0x26
    114a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	9a a3       	std	Y+34, r25	; 0x22
    1154:	89 a3       	std	Y+33, r24	; 0x21
    1156:	89 a1       	ldd	r24, Y+33	; 0x21
    1158:	9a a1       	ldd	r25, Y+34	; 0x22
    115a:	9e 8f       	std	Y+30, r25	; 0x1e
    115c:	8d 8f       	std	Y+29, r24	; 0x1d
    115e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1160:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <SetPassword+0x130>
    1166:	9e 8f       	std	Y+30, r25	; 0x1e
    1168:	8d 8f       	std	Y+29, r24	; 0x1d

	while(password_flag ==0){
		LCD_clearScreen();
		LCD_displayString("New Password:");

		for (i=0;i<5;i++){
    116a:	8c a5       	ldd	r24, Y+44	; 0x2c
    116c:	8f 5f       	subi	r24, 0xFF	; 255
    116e:	8c a7       	std	Y+44, r24	; 0x2c
    1170:	8c a5       	ldd	r24, Y+44	; 0x2c
    1172:	85 30       	cpi	r24, 0x05	; 5
    1174:	08 f4       	brcc	.+2      	; 0x1178 <SetPassword+0x146>
    1176:	74 cf       	rjmp	.-280    	; 0x1060 <SetPassword+0x2e>
			password_try1[i]=KEYPAD_getPressedKey();
			LCD_displayStringRowColumn(1,i,"*");
			_delay_ms(50);
		}

		LCD_clearScreen();
    1178:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_clearScreen>
		LCD_displayString("Confirm:");
    117c:	86 ec       	ldi	r24, 0xC6	; 198
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_displayString>

		for (i=0;i<5;i++){
    1184:	1c a6       	std	Y+44, r1	; 0x2c
    1186:	88 c0       	rjmp	.+272    	; 0x1298 <SetPassword+0x266>
			password_try2[i]=KEYPAD_getPressedKey();
    1188:	8c a5       	ldd	r24, Y+44	; 0x2c
    118a:	08 2f       	mov	r16, r24
    118c:	10 e0       	ldi	r17, 0x00	; 0
    118e:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <KEYPAD_getPressedKey>
    1192:	28 2f       	mov	r18, r24
    1194:	ce 01       	movw	r24, r28
    1196:	c7 96       	adiw	r24, 0x37	; 55
    1198:	fc 01       	movw	r30, r24
    119a:	e0 0f       	add	r30, r16
    119c:	f1 1f       	adc	r31, r17
    119e:	20 83       	st	Z, r18
			LCD_displayStringRowColumn(1,i,"*");
    11a0:	26 eb       	ldi	r18, 0xB6	; 182
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	6c a5       	ldd	r22, Y+44	; 0x2c
    11a8:	a9 01       	movw	r20, r18
    11aa:	0e 94 90 12 	call	0x2520	; 0x2520 <LCD_displayStringRowColumn>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	a8 e4       	ldi	r26, 0x48	; 72
    11b4:	b2 e4       	ldi	r27, 0x42	; 66
    11b6:	89 8f       	std	Y+25, r24	; 0x19
    11b8:	9a 8f       	std	Y+26, r25	; 0x1a
    11ba:	ab 8f       	std	Y+27, r26	; 0x1b
    11bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11be:	69 8d       	ldd	r22, Y+25	; 0x19
    11c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	4a ef       	ldi	r20, 0xFA	; 250
    11cc:	54 e4       	ldi	r21, 0x44	; 68
    11ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	8d 8b       	std	Y+21, r24	; 0x15
    11d8:	9e 8b       	std	Y+22, r25	; 0x16
    11da:	af 8b       	std	Y+23, r26	; 0x17
    11dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11de:	6d 89       	ldd	r22, Y+21	; 0x15
    11e0:	7e 89       	ldd	r23, Y+22	; 0x16
    11e2:	8f 89       	ldd	r24, Y+23	; 0x17
    11e4:	98 8d       	ldd	r25, Y+24	; 0x18
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	40 e8       	ldi	r20, 0x80	; 128
    11ec:	5f e3       	ldi	r21, 0x3F	; 63
    11ee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    11f2:	88 23       	and	r24, r24
    11f4:	2c f4       	brge	.+10     	; 0x1200 <SetPassword+0x1ce>
		__ticks = 1;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	9c 8b       	std	Y+20, r25	; 0x14
    11fc:	8b 8b       	std	Y+19, r24	; 0x13
    11fe:	3f c0       	rjmp	.+126    	; 0x127e <SetPassword+0x24c>
	else if (__tmp > 65535)
    1200:	6d 89       	ldd	r22, Y+21	; 0x15
    1202:	7e 89       	ldd	r23, Y+22	; 0x16
    1204:	8f 89       	ldd	r24, Y+23	; 0x17
    1206:	98 8d       	ldd	r25, Y+24	; 0x18
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	3f ef       	ldi	r19, 0xFF	; 255
    120c:	4f e7       	ldi	r20, 0x7F	; 127
    120e:	57 e4       	ldi	r21, 0x47	; 71
    1210:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1214:	18 16       	cp	r1, r24
    1216:	4c f5       	brge	.+82     	; 0x126a <SetPassword+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1218:	69 8d       	ldd	r22, Y+25	; 0x19
    121a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    121c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    121e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e2       	ldi	r20, 0x20	; 32
    1226:	51 e4       	ldi	r21, 0x41	; 65
    1228:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	bc 01       	movw	r22, r24
    1232:	cd 01       	movw	r24, r26
    1234:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	9c 8b       	std	Y+20, r25	; 0x14
    123e:	8b 8b       	std	Y+19, r24	; 0x13
    1240:	0f c0       	rjmp	.+30     	; 0x1260 <SetPassword+0x22e>
    1242:	88 ec       	ldi	r24, 0xC8	; 200
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	9a 8b       	std	Y+18, r25	; 0x12
    1248:	89 8b       	std	Y+17, r24	; 0x11
    124a:	89 89       	ldd	r24, Y+17	; 0x11
    124c:	9a 89       	ldd	r25, Y+18	; 0x12
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	f1 f7       	brne	.-4      	; 0x124e <SetPassword+0x21c>
    1252:	9a 8b       	std	Y+18, r25	; 0x12
    1254:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1256:	8b 89       	ldd	r24, Y+19	; 0x13
    1258:	9c 89       	ldd	r25, Y+20	; 0x14
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	9c 8b       	std	Y+20, r25	; 0x14
    125e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1260:	8b 89       	ldd	r24, Y+19	; 0x13
    1262:	9c 89       	ldd	r25, Y+20	; 0x14
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	69 f7       	brne	.-38     	; 0x1242 <SetPassword+0x210>
    1268:	14 c0       	rjmp	.+40     	; 0x1292 <SetPassword+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126a:	6d 89       	ldd	r22, Y+21	; 0x15
    126c:	7e 89       	ldd	r23, Y+22	; 0x16
    126e:	8f 89       	ldd	r24, Y+23	; 0x17
    1270:	98 8d       	ldd	r25, Y+24	; 0x18
    1272:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	9c 8b       	std	Y+20, r25	; 0x14
    127c:	8b 8b       	std	Y+19, r24	; 0x13
    127e:	8b 89       	ldd	r24, Y+19	; 0x13
    1280:	9c 89       	ldd	r25, Y+20	; 0x14
    1282:	98 8b       	std	Y+16, r25	; 0x10
    1284:	8f 87       	std	Y+15, r24	; 0x0f
    1286:	8f 85       	ldd	r24, Y+15	; 0x0f
    1288:	98 89       	ldd	r25, Y+16	; 0x10
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <SetPassword+0x258>
    128e:	98 8b       	std	Y+16, r25	; 0x10
    1290:	8f 87       	std	Y+15, r24	; 0x0f
		}

		LCD_clearScreen();
		LCD_displayString("Confirm:");

		for (i=0;i<5;i++){
    1292:	8c a5       	ldd	r24, Y+44	; 0x2c
    1294:	8f 5f       	subi	r24, 0xFF	; 255
    1296:	8c a7       	std	Y+44, r24	; 0x2c
    1298:	8c a5       	ldd	r24, Y+44	; 0x2c
    129a:	85 30       	cpi	r24, 0x05	; 5
    129c:	08 f4       	brcc	.+2      	; 0x12a0 <SetPassword+0x26e>
    129e:	74 cf       	rjmp	.-280    	; 0x1188 <SetPassword+0x156>
			password_try2[i]=KEYPAD_getPressedKey();
			LCD_displayStringRowColumn(1,i,"*");
			_delay_ms(50);
		}

		password_flag=1;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	8b a7       	std	Y+43, r24	; 0x2b
		for (i=0;i<5;i++){
    12a4:	1c a6       	std	Y+44, r1	; 0x2c
    12a6:	18 c0       	rjmp	.+48     	; 0x12d8 <SetPassword+0x2a6>
			if (password_try1[i] != password_try2[i])
    12a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	ce 01       	movw	r24, r28
    12b0:	8d 96       	adiw	r24, 0x2d	; 45
    12b2:	fc 01       	movw	r30, r24
    12b4:	e2 0f       	add	r30, r18
    12b6:	f3 1f       	adc	r31, r19
    12b8:	40 81       	ld	r20, Z
    12ba:	8c a5       	ldd	r24, Y+44	; 0x2c
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	ce 01       	movw	r24, r28
    12c2:	c7 96       	adiw	r24, 0x37	; 55
    12c4:	fc 01       	movw	r30, r24
    12c6:	e2 0f       	add	r30, r18
    12c8:	f3 1f       	adc	r31, r19
    12ca:	80 81       	ld	r24, Z
    12cc:	48 17       	cp	r20, r24
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <SetPassword+0x2a0>
				password_flag=0;
    12d0:	1b a6       	std	Y+43, r1	; 0x2b
			LCD_displayStringRowColumn(1,i,"*");
			_delay_ms(50);
		}

		password_flag=1;
		for (i=0;i<5;i++){
    12d2:	8c a5       	ldd	r24, Y+44	; 0x2c
    12d4:	8f 5f       	subi	r24, 0xFF	; 255
    12d6:	8c a7       	std	Y+44, r24	; 0x2c
    12d8:	8c a5       	ldd	r24, Y+44	; 0x2c
    12da:	85 30       	cpi	r24, 0x05	; 5
    12dc:	28 f3       	brcs	.-54     	; 0x12a8 <SetPassword+0x276>
			if (password_try1[i] != password_try2[i])
				password_flag=0;
		}

		if (password_flag)
    12de:	8b a5       	ldd	r24, Y+43	; 0x2b
    12e0:	88 23       	and	r24, r24
    12e2:	09 f1       	breq	.+66     	; 0x1326 <SetPassword+0x2f4>
		{
			password_try1[i]='#';
    12e4:	8c a5       	ldd	r24, Y+44	; 0x2c
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	ce 01       	movw	r24, r28
    12ec:	8d 96       	adiw	r24, 0x2d	; 45
    12ee:	fc 01       	movw	r30, r24
    12f0:	e2 0f       	add	r30, r18
    12f2:	f3 1f       	adc	r31, r19
    12f4:	83 e2       	ldi	r24, 0x23	; 35
    12f6:	80 83       	st	Z, r24
			password_try1[++i]='\0';
    12f8:	8c a5       	ldd	r24, Y+44	; 0x2c
    12fa:	8f 5f       	subi	r24, 0xFF	; 255
    12fc:	8c a7       	std	Y+44, r24	; 0x2c
    12fe:	8c a5       	ldd	r24, Y+44	; 0x2c
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	ce 01       	movw	r24, r28
    1306:	8d 96       	adiw	r24, 0x2d	; 45
    1308:	fc 01       	movw	r30, r24
    130a:	e2 0f       	add	r30, r18
    130c:	f3 1f       	adc	r31, r19
    130e:	10 82       	st	Z, r1
			while(UART_receiveByte() != 10);
    1310:	0e 94 89 13 	call	0x2712	; 0x2712 <UART_receiveByte>
    1314:	8a 30       	cpi	r24, 0x0A	; 10
    1316:	e1 f7       	brne	.-8      	; 0x1310 <SetPassword+0x2de>
			LCD_clearScreen();
    1318:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_clearScreen>
			UART_sendString(password_try1);
    131c:	ce 01       	movw	r24, r28
    131e:	8d 96       	adiw	r24, 0x2d	; 45
    1320:	0e 94 98 13 	call	0x2730	; 0x2730 <UART_sendString>
    1324:	78 c0       	rjmp	.+240    	; 0x1416 <SetPassword+0x3e4>
		}
		else{
			LCD_clearScreen();
    1326:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_clearScreen>
			LCD_displayString("Mismatch!");
    132a:	8f ec       	ldi	r24, 0xCF	; 207
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_displayString>
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	aa e7       	ldi	r26, 0x7A	; 122
    1338:	b4 e4       	ldi	r27, 0x44	; 68
    133a:	8b 87       	std	Y+11, r24	; 0x0b
    133c:	9c 87       	std	Y+12, r25	; 0x0c
    133e:	ad 87       	std	Y+13, r26	; 0x0d
    1340:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1342:	6b 85       	ldd	r22, Y+11	; 0x0b
    1344:	7c 85       	ldd	r23, Y+12	; 0x0c
    1346:	8d 85       	ldd	r24, Y+13	; 0x0d
    1348:	9e 85       	ldd	r25, Y+14	; 0x0e
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	4a ef       	ldi	r20, 0xFA	; 250
    1350:	54 e4       	ldi	r21, 0x44	; 68
    1352:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	8f 83       	std	Y+7, r24	; 0x07
    135c:	98 87       	std	Y+8, r25	; 0x08
    135e:	a9 87       	std	Y+9, r26	; 0x09
    1360:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1362:	6f 81       	ldd	r22, Y+7	; 0x07
    1364:	78 85       	ldd	r23, Y+8	; 0x08
    1366:	89 85       	ldd	r24, Y+9	; 0x09
    1368:	9a 85       	ldd	r25, Y+10	; 0x0a
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e8       	ldi	r20, 0x80	; 128
    1370:	5f e3       	ldi	r21, 0x3F	; 63
    1372:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1376:	88 23       	and	r24, r24
    1378:	2c f4       	brge	.+10     	; 0x1384 <SetPassword+0x352>
		__ticks = 1;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	9e 83       	std	Y+6, r25	; 0x06
    1380:	8d 83       	std	Y+5, r24	; 0x05
    1382:	3f c0       	rjmp	.+126    	; 0x1402 <SetPassword+0x3d0>
	else if (__tmp > 65535)
    1384:	6f 81       	ldd	r22, Y+7	; 0x07
    1386:	78 85       	ldd	r23, Y+8	; 0x08
    1388:	89 85       	ldd	r24, Y+9	; 0x09
    138a:	9a 85       	ldd	r25, Y+10	; 0x0a
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	3f ef       	ldi	r19, 0xFF	; 255
    1390:	4f e7       	ldi	r20, 0x7F	; 127
    1392:	57 e4       	ldi	r21, 0x47	; 71
    1394:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1398:	18 16       	cp	r1, r24
    139a:	4c f5       	brge	.+82     	; 0x13ee <SetPassword+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139c:	6b 85       	ldd	r22, Y+11	; 0x0b
    139e:	7c 85       	ldd	r23, Y+12	; 0x0c
    13a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	40 e2       	ldi	r20, 0x20	; 32
    13aa:	51 e4       	ldi	r21, 0x41	; 65
    13ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	9e 83       	std	Y+6, r25	; 0x06
    13c2:	8d 83       	std	Y+5, r24	; 0x05
    13c4:	0f c0       	rjmp	.+30     	; 0x13e4 <SetPassword+0x3b2>
    13c6:	88 ec       	ldi	r24, 0xC8	; 200
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	9c 83       	std	Y+4, r25	; 0x04
    13cc:	8b 83       	std	Y+3, r24	; 0x03
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	9c 81       	ldd	r25, Y+4	; 0x04
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <SetPassword+0x3a0>
    13d6:	9c 83       	std	Y+4, r25	; 0x04
    13d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	9e 81       	ldd	r25, Y+6	; 0x06
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	9e 83       	std	Y+6, r25	; 0x06
    13e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	9e 81       	ldd	r25, Y+6	; 0x06
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	69 f7       	brne	.-38     	; 0x13c6 <SetPassword+0x394>
    13ec:	14 c0       	rjmp	.+40     	; 0x1416 <SetPassword+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ee:	6f 81       	ldd	r22, Y+7	; 0x07
    13f0:	78 85       	ldd	r23, Y+8	; 0x08
    13f2:	89 85       	ldd	r24, Y+9	; 0x09
    13f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	9e 83       	std	Y+6, r25	; 0x06
    1400:	8d 83       	std	Y+5, r24	; 0x05
    1402:	8d 81       	ldd	r24, Y+5	; 0x05
    1404:	9e 81       	ldd	r25, Y+6	; 0x06
    1406:	9a 83       	std	Y+2, r25	; 0x02
    1408:	89 83       	std	Y+1, r24	; 0x01
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	9a 81       	ldd	r25, Y+2	; 0x02
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	f1 f7       	brne	.-4      	; 0x140e <SetPassword+0x3dc>
    1412:	9a 83       	std	Y+2, r25	; 0x02
    1414:	89 83       	std	Y+1, r24	; 0x01
	uint8 i;
	uint8 password_flag = 0;
	uint8 password_try1[10];
	uint8 password_try2[10];

	while(password_flag ==0){
    1416:	8b a5       	ldd	r24, Y+43	; 0x2b
    1418:	88 23       	and	r24, r24
    141a:	09 f4       	brne	.+2      	; 0x141e <SetPassword+0x3ec>
    141c:	19 ce       	rjmp	.-974    	; 0x1050 <SetPassword+0x1e>
			LCD_clearScreen();
			LCD_displayString("Mismatch!");
			_delay_ms(1000);
		}
	}
}
    141e:	c0 5c       	subi	r28, 0xC0	; 192
    1420:	df 4f       	sbci	r29, 0xFF	; 255
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	1f 91       	pop	r17
    1432:	0f 91       	pop	r16
    1434:	08 95       	ret

00001436 <GPIO_setupPinDirection>:

/*
 * Description:
 * configure the pin direction input/output
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction){
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	27 97       	sbiw	r28, 0x07	; 7
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	6a 83       	std	Y+2, r22	; 0x02
    144e:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>=NUM_OF_PORTS || pin_num>=NUM_OF_PINS)
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	84 30       	cpi	r24, 0x04	; 4
    1454:	08 f0       	brcs	.+2      	; 0x1458 <GPIO_setupPinDirection+0x22>
    1456:	ea c0       	rjmp	.+468    	; 0x162c <GPIO_setupPinDirection+0x1f6>
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	88 30       	cpi	r24, 0x08	; 8
    145c:	08 f0       	brcs	.+2      	; 0x1460 <GPIO_setupPinDirection+0x2a>
    145e:	e6 c0       	rjmp	.+460    	; 0x162c <GPIO_setupPinDirection+0x1f6>
	{
		/* Do nothing*/
	}
	else{
		if(direction)
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	88 23       	and	r24, r24
    1464:	09 f4       	brne	.+2      	; 0x1468 <GPIO_setupPinDirection+0x32>
    1466:	6f c0       	rjmp	.+222    	; 0x1546 <GPIO_setupPinDirection+0x110>
		{
			switch(port_num)
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	3f 83       	std	Y+7, r19	; 0x07
    1470:	2e 83       	std	Y+6, r18	; 0x06
    1472:	8e 81       	ldd	r24, Y+6	; 0x06
    1474:	9f 81       	ldd	r25, Y+7	; 0x07
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	91 05       	cpc	r25, r1
    147a:	49 f1       	breq	.+82     	; 0x14ce <GPIO_setupPinDirection+0x98>
    147c:	2e 81       	ldd	r18, Y+6	; 0x06
    147e:	3f 81       	ldd	r19, Y+7	; 0x07
    1480:	22 30       	cpi	r18, 0x02	; 2
    1482:	31 05       	cpc	r19, r1
    1484:	2c f4       	brge	.+10     	; 0x1490 <GPIO_setupPinDirection+0x5a>
    1486:	8e 81       	ldd	r24, Y+6	; 0x06
    1488:	9f 81       	ldd	r25, Y+7	; 0x07
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	61 f0       	breq	.+24     	; 0x14a6 <GPIO_setupPinDirection+0x70>
    148e:	ce c0       	rjmp	.+412    	; 0x162c <GPIO_setupPinDirection+0x1f6>
    1490:	2e 81       	ldd	r18, Y+6	; 0x06
    1492:	3f 81       	ldd	r19, Y+7	; 0x07
    1494:	22 30       	cpi	r18, 0x02	; 2
    1496:	31 05       	cpc	r19, r1
    1498:	71 f1       	breq	.+92     	; 0x14f6 <GPIO_setupPinDirection+0xc0>
    149a:	8e 81       	ldd	r24, Y+6	; 0x06
    149c:	9f 81       	ldd	r25, Y+7	; 0x07
    149e:	83 30       	cpi	r24, 0x03	; 3
    14a0:	91 05       	cpc	r25, r1
    14a2:	e9 f1       	breq	.+122    	; 0x151e <GPIO_setupPinDirection+0xe8>
    14a4:	c3 c0       	rjmp	.+390    	; 0x162c <GPIO_setupPinDirection+0x1f6>
			{
			case PORTA_ID: SET_BIT(DDRA,pin_num);
    14a6:	aa e3       	ldi	r26, 0x3A	; 58
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	ea e3       	ldi	r30, 0x3A	; 58
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <GPIO_setupPinDirection+0x8e>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <GPIO_setupPinDirection+0x8a>
    14c8:	84 2b       	or	r24, r20
    14ca:	8c 93       	st	X, r24
    14cc:	af c0       	rjmp	.+350    	; 0x162c <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTB_ID: SET_BIT(DDRB,pin_num);
    14ce:	a7 e3       	ldi	r26, 0x37	; 55
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e7 e3       	ldi	r30, 0x37	; 55
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <GPIO_setupPinDirection+0xb6>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <GPIO_setupPinDirection+0xb2>
    14f0:	84 2b       	or	r24, r20
    14f2:	8c 93       	st	X, r24
    14f4:	9b c0       	rjmp	.+310    	; 0x162c <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTC_ID: SET_BIT(DDRC,pin_num);
    14f6:	a4 e3       	ldi	r26, 0x34	; 52
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e4 e3       	ldi	r30, 0x34	; 52
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <GPIO_setupPinDirection+0xde>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <GPIO_setupPinDirection+0xda>
    1518:	84 2b       	or	r24, r20
    151a:	8c 93       	st	X, r24
    151c:	87 c0       	rjmp	.+270    	; 0x162c <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTD_ID: SET_BIT(DDRD,pin_num);
    151e:	a1 e3       	ldi	r26, 0x31	; 49
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e1 e3       	ldi	r30, 0x31	; 49
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	48 2f       	mov	r20, r24
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <GPIO_setupPinDirection+0x106>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <GPIO_setupPinDirection+0x102>
    1540:	84 2b       	or	r24, r20
    1542:	8c 93       	st	X, r24
    1544:	73 c0       	rjmp	.+230    	; 0x162c <GPIO_setupPinDirection+0x1f6>
			break;
			}
		}
		else{
			switch(port_num)
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	3d 83       	std	Y+5, r19	; 0x05
    154e:	2c 83       	std	Y+4, r18	; 0x04
    1550:	8c 81       	ldd	r24, Y+4	; 0x04
    1552:	9d 81       	ldd	r25, Y+5	; 0x05
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	91 05       	cpc	r25, r1
    1558:	59 f1       	breq	.+86     	; 0x15b0 <GPIO_setupPinDirection+0x17a>
    155a:	2c 81       	ldd	r18, Y+4	; 0x04
    155c:	3d 81       	ldd	r19, Y+5	; 0x05
    155e:	22 30       	cpi	r18, 0x02	; 2
    1560:	31 05       	cpc	r19, r1
    1562:	2c f4       	brge	.+10     	; 0x156e <GPIO_setupPinDirection+0x138>
    1564:	8c 81       	ldd	r24, Y+4	; 0x04
    1566:	9d 81       	ldd	r25, Y+5	; 0x05
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	69 f0       	breq	.+26     	; 0x1586 <GPIO_setupPinDirection+0x150>
    156c:	5f c0       	rjmp	.+190    	; 0x162c <GPIO_setupPinDirection+0x1f6>
    156e:	2c 81       	ldd	r18, Y+4	; 0x04
    1570:	3d 81       	ldd	r19, Y+5	; 0x05
    1572:	22 30       	cpi	r18, 0x02	; 2
    1574:	31 05       	cpc	r19, r1
    1576:	89 f1       	breq	.+98     	; 0x15da <GPIO_setupPinDirection+0x1a4>
    1578:	8c 81       	ldd	r24, Y+4	; 0x04
    157a:	9d 81       	ldd	r25, Y+5	; 0x05
    157c:	83 30       	cpi	r24, 0x03	; 3
    157e:	91 05       	cpc	r25, r1
    1580:	09 f4       	brne	.+2      	; 0x1584 <GPIO_setupPinDirection+0x14e>
    1582:	40 c0       	rjmp	.+128    	; 0x1604 <GPIO_setupPinDirection+0x1ce>
    1584:	53 c0       	rjmp	.+166    	; 0x162c <GPIO_setupPinDirection+0x1f6>
			{
			case PORTA_ID: CLEAR_BIT(DDRA,pin_num);
    1586:	aa e3       	ldi	r26, 0x3A	; 58
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	ea e3       	ldi	r30, 0x3A	; 58
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	48 2f       	mov	r20, r24
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	02 2e       	mov	r0, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <GPIO_setupPinDirection+0x16e>
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	0a 94       	dec	r0
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <GPIO_setupPinDirection+0x16a>
    15a8:	80 95       	com	r24
    15aa:	84 23       	and	r24, r20
    15ac:	8c 93       	st	X, r24
    15ae:	3e c0       	rjmp	.+124    	; 0x162c <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTB_ID: CLEAR_BIT(DDRB,pin_num);
    15b0:	a7 e3       	ldi	r26, 0x37	; 55
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e7 e3       	ldi	r30, 0x37	; 55
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	48 2f       	mov	r20, r24
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	02 2e       	mov	r0, r18
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <GPIO_setupPinDirection+0x198>
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	0a 94       	dec	r0
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <GPIO_setupPinDirection+0x194>
    15d2:	80 95       	com	r24
    15d4:	84 23       	and	r24, r20
    15d6:	8c 93       	st	X, r24
    15d8:	29 c0       	rjmp	.+82     	; 0x162c <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTC_ID: CLEAR_BIT(DDRC,pin_num);
    15da:	a4 e3       	ldi	r26, 0x34	; 52
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e4 e3       	ldi	r30, 0x34	; 52
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	48 2f       	mov	r20, r24
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 2e       	mov	r0, r18
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <GPIO_setupPinDirection+0x1c2>
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	0a 94       	dec	r0
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <GPIO_setupPinDirection+0x1be>
    15fc:	80 95       	com	r24
    15fe:	84 23       	and	r24, r20
    1600:	8c 93       	st	X, r24
    1602:	14 c0       	rjmp	.+40     	; 0x162c <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTD_ID: CLEAR_BIT(DDRD,pin_num);
    1604:	a1 e3       	ldi	r26, 0x31	; 49
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e1 e3       	ldi	r30, 0x31	; 49
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	48 2f       	mov	r20, r24
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	02 2e       	mov	r0, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <GPIO_setupPinDirection+0x1ec>
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	0a 94       	dec	r0
    1624:	e2 f7       	brpl	.-8      	; 0x161e <GPIO_setupPinDirection+0x1e8>
    1626:	80 95       	com	r24
    1628:	84 23       	and	r24, r20
    162a:	8c 93       	st	X, r24
			break;
			}
		}
	}
}
    162c:	27 96       	adiw	r28, 0x07	; 7
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <GPIO_writePin>:
 * Description:
 * if the pin is output it will write logic high or logic low
 * if the pin is input it will enable the pull up resistor if it write logic high
 */

void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	27 97       	sbiw	r28, 0x07	; 7
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	6a 83       	std	Y+2, r22	; 0x02
    1656:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>=NUM_OF_PORTS || pin_num>=NUM_OF_PINS)
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	84 30       	cpi	r24, 0x04	; 4
    165c:	08 f0       	brcs	.+2      	; 0x1660 <GPIO_writePin+0x22>
    165e:	ea c0       	rjmp	.+468    	; 0x1834 <GPIO_writePin+0x1f6>
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	88 30       	cpi	r24, 0x08	; 8
    1664:	08 f0       	brcs	.+2      	; 0x1668 <GPIO_writePin+0x2a>
    1666:	e6 c0       	rjmp	.+460    	; 0x1834 <GPIO_writePin+0x1f6>
	{
		/* Do nothing*/
	}
	else
	{
		if(value == LOGIC_HIGH)
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	09 f0       	breq	.+2      	; 0x1670 <GPIO_writePin+0x32>
    166e:	6f c0       	rjmp	.+222    	; 0x174e <GPIO_writePin+0x110>
		{
			switch(port_num)
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	3f 83       	std	Y+7, r19	; 0x07
    1678:	2e 83       	std	Y+6, r18	; 0x06
    167a:	8e 81       	ldd	r24, Y+6	; 0x06
    167c:	9f 81       	ldd	r25, Y+7	; 0x07
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	91 05       	cpc	r25, r1
    1682:	49 f1       	breq	.+82     	; 0x16d6 <GPIO_writePin+0x98>
    1684:	2e 81       	ldd	r18, Y+6	; 0x06
    1686:	3f 81       	ldd	r19, Y+7	; 0x07
    1688:	22 30       	cpi	r18, 0x02	; 2
    168a:	31 05       	cpc	r19, r1
    168c:	2c f4       	brge	.+10     	; 0x1698 <GPIO_writePin+0x5a>
    168e:	8e 81       	ldd	r24, Y+6	; 0x06
    1690:	9f 81       	ldd	r25, Y+7	; 0x07
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	61 f0       	breq	.+24     	; 0x16ae <GPIO_writePin+0x70>
    1696:	ce c0       	rjmp	.+412    	; 0x1834 <GPIO_writePin+0x1f6>
    1698:	2e 81       	ldd	r18, Y+6	; 0x06
    169a:	3f 81       	ldd	r19, Y+7	; 0x07
    169c:	22 30       	cpi	r18, 0x02	; 2
    169e:	31 05       	cpc	r19, r1
    16a0:	71 f1       	breq	.+92     	; 0x16fe <GPIO_writePin+0xc0>
    16a2:	8e 81       	ldd	r24, Y+6	; 0x06
    16a4:	9f 81       	ldd	r25, Y+7	; 0x07
    16a6:	83 30       	cpi	r24, 0x03	; 3
    16a8:	91 05       	cpc	r25, r1
    16aa:	e9 f1       	breq	.+122    	; 0x1726 <GPIO_writePin+0xe8>
    16ac:	c3 c0       	rjmp	.+390    	; 0x1834 <GPIO_writePin+0x1f6>
			{
			case PORTA_ID: SET_BIT(PORTA,pin_num);
    16ae:	ab e3       	ldi	r26, 0x3B	; 59
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	eb e3       	ldi	r30, 0x3B	; 59
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <GPIO_writePin+0x8e>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <GPIO_writePin+0x8a>
    16d0:	84 2b       	or	r24, r20
    16d2:	8c 93       	st	X, r24
    16d4:	af c0       	rjmp	.+350    	; 0x1834 <GPIO_writePin+0x1f6>
			break;
			case PORTB_ID: SET_BIT(PORTB,pin_num);
    16d6:	a8 e3       	ldi	r26, 0x38	; 56
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e8 e3       	ldi	r30, 0x38	; 56
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	48 2f       	mov	r20, r24
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 2e       	mov	r0, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <GPIO_writePin+0xb6>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	0a 94       	dec	r0
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <GPIO_writePin+0xb2>
    16f8:	84 2b       	or	r24, r20
    16fa:	8c 93       	st	X, r24
    16fc:	9b c0       	rjmp	.+310    	; 0x1834 <GPIO_writePin+0x1f6>
			break;
			case PORTC_ID: SET_BIT(PORTC,pin_num);
    16fe:	a5 e3       	ldi	r26, 0x35	; 53
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e5 e3       	ldi	r30, 0x35	; 53
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <GPIO_writePin+0xde>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <GPIO_writePin+0xda>
    1720:	84 2b       	or	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	87 c0       	rjmp	.+270    	; 0x1834 <GPIO_writePin+0x1f6>
			break;
			case PORTD_ID: SET_BIT(PORTD,pin_num);
    1726:	a2 e3       	ldi	r26, 0x32	; 50
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e2 e3       	ldi	r30, 0x32	; 50
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <GPIO_writePin+0x106>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <GPIO_writePin+0x102>
    1748:	84 2b       	or	r24, r20
    174a:	8c 93       	st	X, r24
    174c:	73 c0       	rjmp	.+230    	; 0x1834 <GPIO_writePin+0x1f6>
			break;
			}
		}
		else{
			switch(port_num)
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	3d 83       	std	Y+5, r19	; 0x05
    1756:	2c 83       	std	Y+4, r18	; 0x04
    1758:	8c 81       	ldd	r24, Y+4	; 0x04
    175a:	9d 81       	ldd	r25, Y+5	; 0x05
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	91 05       	cpc	r25, r1
    1760:	59 f1       	breq	.+86     	; 0x17b8 <GPIO_writePin+0x17a>
    1762:	2c 81       	ldd	r18, Y+4	; 0x04
    1764:	3d 81       	ldd	r19, Y+5	; 0x05
    1766:	22 30       	cpi	r18, 0x02	; 2
    1768:	31 05       	cpc	r19, r1
    176a:	2c f4       	brge	.+10     	; 0x1776 <GPIO_writePin+0x138>
    176c:	8c 81       	ldd	r24, Y+4	; 0x04
    176e:	9d 81       	ldd	r25, Y+5	; 0x05
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	69 f0       	breq	.+26     	; 0x178e <GPIO_writePin+0x150>
    1774:	5f c0       	rjmp	.+190    	; 0x1834 <GPIO_writePin+0x1f6>
    1776:	2c 81       	ldd	r18, Y+4	; 0x04
    1778:	3d 81       	ldd	r19, Y+5	; 0x05
    177a:	22 30       	cpi	r18, 0x02	; 2
    177c:	31 05       	cpc	r19, r1
    177e:	89 f1       	breq	.+98     	; 0x17e2 <GPIO_writePin+0x1a4>
    1780:	8c 81       	ldd	r24, Y+4	; 0x04
    1782:	9d 81       	ldd	r25, Y+5	; 0x05
    1784:	83 30       	cpi	r24, 0x03	; 3
    1786:	91 05       	cpc	r25, r1
    1788:	09 f4       	brne	.+2      	; 0x178c <GPIO_writePin+0x14e>
    178a:	40 c0       	rjmp	.+128    	; 0x180c <GPIO_writePin+0x1ce>
    178c:	53 c0       	rjmp	.+166    	; 0x1834 <GPIO_writePin+0x1f6>
			{
			case PORTA_ID: CLEAR_BIT(PORTA,pin_num);
    178e:	ab e3       	ldi	r26, 0x3B	; 59
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	eb e3       	ldi	r30, 0x3B	; 59
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	48 2f       	mov	r20, r24
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	02 2e       	mov	r0, r18
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <GPIO_writePin+0x16e>
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	0a 94       	dec	r0
    17ae:	e2 f7       	brpl	.-8      	; 0x17a8 <GPIO_writePin+0x16a>
    17b0:	80 95       	com	r24
    17b2:	84 23       	and	r24, r20
    17b4:	8c 93       	st	X, r24
    17b6:	3e c0       	rjmp	.+124    	; 0x1834 <GPIO_writePin+0x1f6>
			break;
			case PORTB_ID: CLEAR_BIT(PORTB,pin_num);
    17b8:	a8 e3       	ldi	r26, 0x38	; 56
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e8 e3       	ldi	r30, 0x38	; 56
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	48 2f       	mov	r20, r24
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	02 2e       	mov	r0, r18
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <GPIO_writePin+0x198>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	0a 94       	dec	r0
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <GPIO_writePin+0x194>
    17da:	80 95       	com	r24
    17dc:	84 23       	and	r24, r20
    17de:	8c 93       	st	X, r24
    17e0:	29 c0       	rjmp	.+82     	; 0x1834 <GPIO_writePin+0x1f6>
			break;
			case PORTC_ID: CLEAR_BIT(PORTC,pin_num);
    17e2:	a5 e3       	ldi	r26, 0x35	; 53
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e5 e3       	ldi	r30, 0x35	; 53
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	48 2f       	mov	r20, r24
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 2e       	mov	r0, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <GPIO_writePin+0x1c2>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	0a 94       	dec	r0
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <GPIO_writePin+0x1be>
    1804:	80 95       	com	r24
    1806:	84 23       	and	r24, r20
    1808:	8c 93       	st	X, r24
    180a:	14 c0       	rjmp	.+40     	; 0x1834 <GPIO_writePin+0x1f6>
			break;
			case PORTD_ID: CLEAR_BIT(PORTD,pin_num);
    180c:	a2 e3       	ldi	r26, 0x32	; 50
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e2 e3       	ldi	r30, 0x32	; 50
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	48 2f       	mov	r20, r24
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	02 2e       	mov	r0, r18
    1824:	02 c0       	rjmp	.+4      	; 0x182a <GPIO_writePin+0x1ec>
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	0a 94       	dec	r0
    182c:	e2 f7       	brpl	.-8      	; 0x1826 <GPIO_writePin+0x1e8>
    182e:	80 95       	com	r24
    1830:	84 23       	and	r24, r20
    1832:	8c 93       	st	X, r24
			break;
			}
		}
	}
}
    1834:	27 96       	adiw	r28, 0x07	; 7
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	de bf       	out	0x3e, r29	; 62
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	cd bf       	out	0x3d, r28	; 61
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <GPIO_readPin>:
/*
 * Description:
 * read the value on the required pin
 * if the port number or pin number is incorrect the function returns zero
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	00 d0       	rcall	.+0      	; 0x184c <GPIO_readPin+0x6>
    184c:	00 d0       	rcall	.+0      	; 0x184e <GPIO_readPin+0x8>
    184e:	0f 92       	push	r0
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	8a 83       	std	Y+2, r24	; 0x02
    1856:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1858:	19 82       	std	Y+1, r1	; 0x01
	if(port_num>=NUM_OF_PORTS || pin_num>=NUM_OF_PINS)
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	84 30       	cpi	r24, 0x04	; 4
    185e:	08 f0       	brcs	.+2      	; 0x1862 <GPIO_readPin+0x1c>
    1860:	84 c0       	rjmp	.+264    	; 0x196a <GPIO_readPin+0x124>
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	88 30       	cpi	r24, 0x08	; 8
    1866:	08 f0       	brcs	.+2      	; 0x186a <GPIO_readPin+0x24>
    1868:	80 c0       	rjmp	.+256    	; 0x196a <GPIO_readPin+0x124>
	{
		/*Do nothing*/
	}
	else
	{
		switch(port_num)
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	3d 83       	std	Y+5, r19	; 0x05
    1872:	2c 83       	std	Y+4, r18	; 0x04
    1874:	4c 81       	ldd	r20, Y+4	; 0x04
    1876:	5d 81       	ldd	r21, Y+5	; 0x05
    1878:	41 30       	cpi	r20, 0x01	; 1
    187a:	51 05       	cpc	r21, r1
    187c:	79 f1       	breq	.+94     	; 0x18dc <GPIO_readPin+0x96>
    187e:	8c 81       	ldd	r24, Y+4	; 0x04
    1880:	9d 81       	ldd	r25, Y+5	; 0x05
    1882:	82 30       	cpi	r24, 0x02	; 2
    1884:	91 05       	cpc	r25, r1
    1886:	34 f4       	brge	.+12     	; 0x1894 <GPIO_readPin+0x4e>
    1888:	2c 81       	ldd	r18, Y+4	; 0x04
    188a:	3d 81       	ldd	r19, Y+5	; 0x05
    188c:	21 15       	cp	r18, r1
    188e:	31 05       	cpc	r19, r1
    1890:	69 f0       	breq	.+26     	; 0x18ac <GPIO_readPin+0x66>
    1892:	6b c0       	rjmp	.+214    	; 0x196a <GPIO_readPin+0x124>
    1894:	4c 81       	ldd	r20, Y+4	; 0x04
    1896:	5d 81       	ldd	r21, Y+5	; 0x05
    1898:	42 30       	cpi	r20, 0x02	; 2
    189a:	51 05       	cpc	r21, r1
    189c:	b9 f1       	breq	.+110    	; 0x190c <GPIO_readPin+0xc6>
    189e:	8c 81       	ldd	r24, Y+4	; 0x04
    18a0:	9d 81       	ldd	r25, Y+5	; 0x05
    18a2:	83 30       	cpi	r24, 0x03	; 3
    18a4:	91 05       	cpc	r25, r1
    18a6:	09 f4       	brne	.+2      	; 0x18aa <GPIO_readPin+0x64>
    18a8:	49 c0       	rjmp	.+146    	; 0x193c <GPIO_readPin+0xf6>
    18aa:	5f c0       	rjmp	.+190    	; 0x196a <GPIO_readPin+0x124>
		{
		case PORTA_ID: if(BIT_IS_SET(PINA,pin_num))
    18ac:	e9 e3       	ldi	r30, 0x39	; 57
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a9 01       	movw	r20, r18
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <GPIO_readPin+0x7e>
    18c0:	55 95       	asr	r21
    18c2:	47 95       	ror	r20
    18c4:	8a 95       	dec	r24
    18c6:	e2 f7       	brpl	.-8      	; 0x18c0 <GPIO_readPin+0x7a>
    18c8:	ca 01       	movw	r24, r20
    18ca:	81 70       	andi	r24, 0x01	; 1
    18cc:	90 70       	andi	r25, 0x00	; 0
    18ce:	88 23       	and	r24, r24
    18d0:	19 f0       	breq	.+6      	; 0x18d8 <GPIO_readPin+0x92>
		{
			pin_value = LOGIC_HIGH;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	89 83       	std	Y+1, r24	; 0x01
    18d6:	49 c0       	rjmp	.+146    	; 0x196a <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    18d8:	19 82       	std	Y+1, r1	; 0x01
    18da:	47 c0       	rjmp	.+142    	; 0x196a <GPIO_readPin+0x124>
		}
		break;
		case PORTB_ID: if(BIT_IS_SET(PINB,pin_num))
    18dc:	e6 e3       	ldi	r30, 0x36	; 54
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	88 2f       	mov	r24, r24
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	a9 01       	movw	r20, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <GPIO_readPin+0xae>
    18f0:	55 95       	asr	r21
    18f2:	47 95       	ror	r20
    18f4:	8a 95       	dec	r24
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <GPIO_readPin+0xaa>
    18f8:	ca 01       	movw	r24, r20
    18fa:	81 70       	andi	r24, 0x01	; 1
    18fc:	90 70       	andi	r25, 0x00	; 0
    18fe:	88 23       	and	r24, r24
    1900:	19 f0       	breq	.+6      	; 0x1908 <GPIO_readPin+0xc2>
		{
			pin_value = LOGIC_HIGH;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	89 83       	std	Y+1, r24	; 0x01
    1906:	31 c0       	rjmp	.+98     	; 0x196a <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1908:	19 82       	std	Y+1, r1	; 0x01
    190a:	2f c0       	rjmp	.+94     	; 0x196a <GPIO_readPin+0x124>
		}
		break;
		case PORTC_ID: if(BIT_IS_SET(PINC,pin_num))
    190c:	e3 e3       	ldi	r30, 0x33	; 51
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	88 2f       	mov	r24, r24
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	a9 01       	movw	r20, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <GPIO_readPin+0xde>
    1920:	55 95       	asr	r21
    1922:	47 95       	ror	r20
    1924:	8a 95       	dec	r24
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <GPIO_readPin+0xda>
    1928:	ca 01       	movw	r24, r20
    192a:	81 70       	andi	r24, 0x01	; 1
    192c:	90 70       	andi	r25, 0x00	; 0
    192e:	88 23       	and	r24, r24
    1930:	19 f0       	breq	.+6      	; 0x1938 <GPIO_readPin+0xf2>
		{
			pin_value = LOGIC_HIGH;
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	19 c0       	rjmp	.+50     	; 0x196a <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1938:	19 82       	std	Y+1, r1	; 0x01
    193a:	17 c0       	rjmp	.+46     	; 0x196a <GPIO_readPin+0x124>
		}
		break;
		case PORTD_ID: if(BIT_IS_SET(PIND,pin_num))
    193c:	e0 e3       	ldi	r30, 0x30	; 48
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	a9 01       	movw	r20, r18
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <GPIO_readPin+0x10e>
    1950:	55 95       	asr	r21
    1952:	47 95       	ror	r20
    1954:	8a 95       	dec	r24
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <GPIO_readPin+0x10a>
    1958:	ca 01       	movw	r24, r20
    195a:	81 70       	andi	r24, 0x01	; 1
    195c:	90 70       	andi	r25, 0x00	; 0
    195e:	88 23       	and	r24, r24
    1960:	19 f0       	breq	.+6      	; 0x1968 <GPIO_readPin+0x122>
		{
			pin_value = LOGIC_HIGH;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	01 c0       	rjmp	.+2      	; 0x196a <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1968:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
		}
	}
	return pin_value;
    196a:	89 81       	ldd	r24, Y+1	; 0x01
}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <GPIO_setupPortDirection>:

/*
 * Description:
 * configure the port direction input/output
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction){
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	00 d0       	rcall	.+0      	; 0x1982 <GPIO_setupPortDirection+0x6>
    1982:	00 d0       	rcall	.+0      	; 0x1984 <GPIO_setupPortDirection+0x8>
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	89 83       	std	Y+1, r24	; 0x01
    198a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>= NUM_OF_PORTS)
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	84 30       	cpi	r24, 0x04	; 4
    1990:	90 f5       	brcc	.+100    	; 0x19f6 <GPIO_setupPortDirection+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	3c 83       	std	Y+4, r19	; 0x04
    199a:	2b 83       	std	Y+3, r18	; 0x03
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	9c 81       	ldd	r25, Y+4	; 0x04
    19a0:	81 30       	cpi	r24, 0x01	; 1
    19a2:	91 05       	cpc	r25, r1
    19a4:	d1 f0       	breq	.+52     	; 0x19da <GPIO_setupPortDirection+0x5e>
    19a6:	2b 81       	ldd	r18, Y+3	; 0x03
    19a8:	3c 81       	ldd	r19, Y+4	; 0x04
    19aa:	22 30       	cpi	r18, 0x02	; 2
    19ac:	31 05       	cpc	r19, r1
    19ae:	2c f4       	brge	.+10     	; 0x19ba <GPIO_setupPortDirection+0x3e>
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	9c 81       	ldd	r25, Y+4	; 0x04
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	61 f0       	breq	.+24     	; 0x19d0 <GPIO_setupPortDirection+0x54>
    19b8:	1e c0       	rjmp	.+60     	; 0x19f6 <GPIO_setupPortDirection+0x7a>
    19ba:	2b 81       	ldd	r18, Y+3	; 0x03
    19bc:	3c 81       	ldd	r19, Y+4	; 0x04
    19be:	22 30       	cpi	r18, 0x02	; 2
    19c0:	31 05       	cpc	r19, r1
    19c2:	81 f0       	breq	.+32     	; 0x19e4 <GPIO_setupPortDirection+0x68>
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	9c 81       	ldd	r25, Y+4	; 0x04
    19c8:	83 30       	cpi	r24, 0x03	; 3
    19ca:	91 05       	cpc	r25, r1
    19cc:	81 f0       	breq	.+32     	; 0x19ee <GPIO_setupPortDirection+0x72>
    19ce:	13 c0       	rjmp	.+38     	; 0x19f6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID: DDRA = direction;
    19d0:	ea e3       	ldi	r30, 0x3A	; 58
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	80 83       	st	Z, r24
    19d8:	0e c0       	rjmp	.+28     	; 0x19f6 <GPIO_setupPortDirection+0x7a>
		break;
		case PORTB_ID: DDRB = direction;
    19da:	e7 e3       	ldi	r30, 0x37	; 55
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	80 83       	st	Z, r24
    19e2:	09 c0       	rjmp	.+18     	; 0x19f6 <GPIO_setupPortDirection+0x7a>
		break;
		case PORTC_ID: DDRC = direction;
    19e4:	e4 e3       	ldi	r30, 0x34	; 52
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	80 83       	st	Z, r24
    19ec:	04 c0       	rjmp	.+8      	; 0x19f6 <GPIO_setupPortDirection+0x7a>
		break;
		case PORTD_ID: DDRD = direction;
    19ee:	e1 e3       	ldi	r30, 0x31	; 49
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	80 83       	st	Z, r24
		break;
		}
	}
}
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <GPIO_writePort>:
 * Description:
 * if the port is output it will write logic high or logic low
 * if the port is input it will enable the pull up resistor if it write logic high
 */

void GPIO_writePort(uint8 port_num, uint8 value){
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <GPIO_writePort+0x6>
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <GPIO_writePort+0x8>
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>= NUM_OF_PORTS)
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	84 30       	cpi	r24, 0x04	; 4
    1a18:	90 f5       	brcc	.+100    	; 0x1a7e <GPIO_writePort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	3c 83       	std	Y+4, r19	; 0x04
    1a22:	2b 83       	std	Y+3, r18	; 0x03
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	9c 81       	ldd	r25, Y+4	; 0x04
    1a28:	81 30       	cpi	r24, 0x01	; 1
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	d1 f0       	breq	.+52     	; 0x1a62 <GPIO_writePort+0x5e>
    1a2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a30:	3c 81       	ldd	r19, Y+4	; 0x04
    1a32:	22 30       	cpi	r18, 0x02	; 2
    1a34:	31 05       	cpc	r19, r1
    1a36:	2c f4       	brge	.+10     	; 0x1a42 <GPIO_writePort+0x3e>
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	61 f0       	breq	.+24     	; 0x1a58 <GPIO_writePort+0x54>
    1a40:	1e c0       	rjmp	.+60     	; 0x1a7e <GPIO_writePort+0x7a>
    1a42:	2b 81       	ldd	r18, Y+3	; 0x03
    1a44:	3c 81       	ldd	r19, Y+4	; 0x04
    1a46:	22 30       	cpi	r18, 0x02	; 2
    1a48:	31 05       	cpc	r19, r1
    1a4a:	81 f0       	breq	.+32     	; 0x1a6c <GPIO_writePort+0x68>
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a50:	83 30       	cpi	r24, 0x03	; 3
    1a52:	91 05       	cpc	r25, r1
    1a54:	81 f0       	breq	.+32     	; 0x1a76 <GPIO_writePort+0x72>
    1a56:	13 c0       	rjmp	.+38     	; 0x1a7e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a58:	eb e3       	ldi	r30, 0x3B	; 59
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	80 83       	st	Z, r24
    1a60:	0e c0       	rjmp	.+28     	; 0x1a7e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a62:	e8 e3       	ldi	r30, 0x38	; 56
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	80 83       	st	Z, r24
    1a6a:	09 c0       	rjmp	.+18     	; 0x1a7e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a6c:	e5 e3       	ldi	r30, 0x35	; 53
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	80 83       	st	Z, r24
    1a74:	04 c0       	rjmp	.+8      	; 0x1a7e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a76:	e2 e3       	ldi	r30, 0x32	; 50
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	08 95       	ret

00001a8c <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num){
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <GPIO_readPort+0x6>
    1a92:	00 d0       	rcall	.+0      	; 0x1a94 <GPIO_readPort+0x8>
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	8a 83       	std	Y+2, r24	; 0x02

	uint8 value = LOGIC_LOW;
    1a9a:	19 82       	std	Y+1, r1	; 0x01
	if(port_num>= NUM_OF_PORTS)
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	84 30       	cpi	r24, 0x04	; 4
    1aa0:	90 f5       	brcc	.+100    	; 0x1b06 <GPIO_readPort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	3c 83       	std	Y+4, r19	; 0x04
    1aaa:	2b 83       	std	Y+3, r18	; 0x03
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab0:	81 30       	cpi	r24, 0x01	; 1
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	d1 f0       	breq	.+52     	; 0x1aea <GPIO_readPort+0x5e>
    1ab6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aba:	22 30       	cpi	r18, 0x02	; 2
    1abc:	31 05       	cpc	r19, r1
    1abe:	2c f4       	brge	.+10     	; 0x1aca <GPIO_readPort+0x3e>
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	61 f0       	breq	.+24     	; 0x1ae0 <GPIO_readPort+0x54>
    1ac8:	1e c0       	rjmp	.+60     	; 0x1b06 <GPIO_readPort+0x7a>
    1aca:	2b 81       	ldd	r18, Y+3	; 0x03
    1acc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ace:	22 30       	cpi	r18, 0x02	; 2
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	81 f0       	breq	.+32     	; 0x1af4 <GPIO_readPort+0x68>
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad8:	83 30       	cpi	r24, 0x03	; 3
    1ada:	91 05       	cpc	r25, r1
    1adc:	81 f0       	breq	.+32     	; 0x1afe <GPIO_readPort+0x72>
    1ade:	13 c0       	rjmp	.+38     	; 0x1b06 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1ae0:	e9 e3       	ldi	r30, 0x39	; 57
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	0e c0       	rjmp	.+28     	; 0x1b06 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1aea:	e6 e3       	ldi	r30, 0x36	; 54
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	89 83       	std	Y+1, r24	; 0x01
    1af2:	09 c0       	rjmp	.+18     	; 0x1b06 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1af4:	e3 e3       	ldi	r30, 0x33	; 51
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	89 83       	std	Y+1, r24	; 0x01
    1afc:	04 c0       	rjmp	.+8      	; 0x1b06 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1afe:	e0 e3       	ldi	r30, 0x30	; 48
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <KEYPAD_getPressedKey+0x6>
    1b1c:	0f 92       	push	r0
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1b22:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1b24:	1b 82       	std	Y+3, r1	; 0x03
    1b26:	4a c0       	rjmp	.+148    	; 0x1bbc <KEYPAD_getPressedKey+0xa6>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1b28:	82 e0       	ldi	r24, 0x02	; 2
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	0e 94 be 0c 	call	0x197c	; 0x197c <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	98 2f       	mov	r25, r24
    1b34:	9c 5f       	subi	r25, 0xFC	; 252
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	69 2f       	mov	r22, r25
    1b3a:	41 e0       	ldi	r20, 0x01	; 1
    1b3c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	88 2f       	mov	r24, r24
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	9c 01       	movw	r18, r24
    1b48:	2c 5f       	subi	r18, 0xFC	; 252
    1b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <KEYPAD_getPressedKey+0x40>
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	2a 95       	dec	r18
    1b58:	e2 f7       	brpl	.-8      	; 0x1b52 <KEYPAD_getPressedKey+0x3c>
    1b5a:	80 95       	com	r24
    1b5c:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1b5e:	82 e0       	ldi	r24, 0x02	; 2
    1b60:	69 81       	ldd	r22, Y+1	; 0x01
    1b62:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1b66:	1a 82       	std	Y+2, r1	; 0x02
    1b68:	23 c0       	rjmp	.+70     	; 0x1bb0 <KEYPAD_getPressedKey+0x9a>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1b6a:	82 e0       	ldi	r24, 0x02	; 2
    1b6c:	6a 81       	ldd	r22, Y+2	; 0x02
    1b6e:	0e 94 23 0c 	call	0x1846	; 0x1846 <GPIO_readPin>
    1b72:	88 23       	and	r24, r24
    1b74:	d1 f4       	brne	.+52     	; 0x1baa <KEYPAD_getPressedKey+0x94>
				{
					while(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED);
    1b76:	82 e0       	ldi	r24, 0x02	; 2
    1b78:	6a 81       	ldd	r22, Y+2	; 0x02
    1b7a:	0e 94 23 0c 	call	0x1846	; 0x1846 <GPIO_readPin>
    1b7e:	88 23       	and	r24, r24
    1b80:	d1 f3       	breq	.-12     	; 0x1b76 <KEYPAD_getPressedKey+0x60>
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	c9 01       	movw	r24, r18
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	82 0f       	add	r24, r18
    1b90:	93 1f       	adc	r25, r19
    1b92:	98 2f       	mov	r25, r24
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	89 0f       	add	r24, r25
    1b98:	8f 5f       	subi	r24, 0xFF	; 255
    1b9a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <KEYPAD_4x3_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	8f 5f       	subi	r24, 0xFF	; 255
    1bae:	8a 83       	std	Y+2, r24	; 0x02
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	84 30       	cpi	r24, 0x04	; 4
    1bb4:	d0 f2       	brcs	.-76     	; 0x1b6a <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	8f 5f       	subi	r24, 0xFF	; 255
    1bba:	8b 83       	std	Y+3, r24	; 0x03
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	83 30       	cpi	r24, 0x03	; 3
    1bc0:	08 f4       	brcc	.+2      	; 0x1bc4 <KEYPAD_getPressedKey+0xae>
    1bc2:	b2 cf       	rjmp	.-156    	; 0x1b28 <KEYPAD_getPressedKey+0x12>
    1bc4:	af cf       	rjmp	.-162    	; 0x1b24 <KEYPAD_getPressedKey+0xe>

00001bc6 <KEYPAD_4x3_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x3 shape
 */
static uint8 KEYPAD_4x3_adjustKeyNumber(uint8 button_number)
{
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <KEYPAD_4x3_adjustKeyNumber+0x6>
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <KEYPAD_4x3_adjustKeyNumber+0x8>
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
    1bd2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1bd4:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	3c 83       	std	Y+4, r19	; 0x04
    1bde:	2b 83       	std	Y+3, r18	; 0x03
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	9c 81       	ldd	r25, Y+4	; 0x04
    1be4:	8a 30       	cpi	r24, 0x0A	; 10
    1be6:	91 05       	cpc	r25, r1
    1be8:	81 f0       	breq	.+32     	; 0x1c0a <KEYPAD_4x3_adjustKeyNumber+0x44>
    1bea:	2b 81       	ldd	r18, Y+3	; 0x03
    1bec:	3c 81       	ldd	r19, Y+4	; 0x04
    1bee:	2a 30       	cpi	r18, 0x0A	; 10
    1bf0:	31 05       	cpc	r19, r1
    1bf2:	a4 f0       	brlt	.+40     	; 0x1c1c <KEYPAD_4x3_adjustKeyNumber+0x56>
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf8:	8b 30       	cpi	r24, 0x0B	; 11
    1bfa:	91 05       	cpc	r25, r1
    1bfc:	49 f0       	breq	.+18     	; 0x1c10 <KEYPAD_4x3_adjustKeyNumber+0x4a>
    1bfe:	2b 81       	ldd	r18, Y+3	; 0x03
    1c00:	3c 81       	ldd	r19, Y+4	; 0x04
    1c02:	2c 30       	cpi	r18, 0x0C	; 12
    1c04:	31 05       	cpc	r19, r1
    1c06:	39 f0       	breq	.+14     	; 0x1c16 <KEYPAD_4x3_adjustKeyNumber+0x50>
    1c08:	09 c0       	rjmp	.+18     	; 0x1c1c <KEYPAD_4x3_adjustKeyNumber+0x56>
	{
		case 10: keypad_button = '*'; // ASCII Code of *
    1c0a:	8a e2       	ldi	r24, 0x2A	; 42
    1c0c:	89 83       	std	Y+1, r24	; 0x01
    1c0e:	08 c0       	rjmp	.+16     	; 0x1c20 <KEYPAD_4x3_adjustKeyNumber+0x5a>
				 break;
		case 11: keypad_button = 22;
    1c10:	86 e1       	ldi	r24, 0x16	; 22
    1c12:	89 83       	std	Y+1, r24	; 0x01
    1c14:	05 c0       	rjmp	.+10     	; 0x1c20 <KEYPAD_4x3_adjustKeyNumber+0x5a>
				 break;		
		case 12: keypad_button = '#'; // ASCII Code of #
    1c16:	83 e2       	ldi	r24, 0x23	; 35
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <KEYPAD_4x3_adjustKeyNumber+0x5a>
				 break;
		default: keypad_button = button_number;
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	08 95       	ret

00001c30 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	65 e0       	ldi	r22, 0x05	; 5
    1c3c:	41 e0       	ldi	r20, 0x01	; 1
    1c3e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	66 e0       	ldi	r22, 0x06	; 6
    1c46:	41 e0       	ldi	r20, 0x01	; 1
    1c48:	0e 94 1b 0a 	call	0x1436	; 0x1436 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	67 e0       	ldi	r22, 0x07	; 7
    1c50:	41 e0       	ldi	r20, 0x01	; 1
    1c52:	0e 94 1b 0a 	call	0x1436	; 0x1436 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	6f ef       	ldi	r22, 0xFF	; 255
    1c5a:	0e 94 be 0c 	call	0x197c	; 0x197c <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1c5e:	88 e3       	ldi	r24, 0x38	; 56
    1c60:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1c64:	8c e0       	ldi	r24, 0x0C	; 12
    1c66:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_sendCommand>
}
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	ea 97       	sbiw	r28, 0x3a	; 58
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1c8c:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	65 e0       	ldi	r22, 0x05	; 5
    1c92:	40 e0       	ldi	r20, 0x00	; 0
    1c94:	0e 94 1f 0b 	call	0x163e	; 0x163e <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	66 e0       	ldi	r22, 0x06	; 6
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	0e 94 1f 0b 	call	0x163e	; 0x163e <GPIO_writePin>
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	a0 e8       	ldi	r26, 0x80	; 128
    1ca8:	bf e3       	ldi	r27, 0x3F	; 63
    1caa:	8d ab       	std	Y+53, r24	; 0x35
    1cac:	9e ab       	std	Y+54, r25	; 0x36
    1cae:	af ab       	std	Y+55, r26	; 0x37
    1cb0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb2:	6d a9       	ldd	r22, Y+53	; 0x35
    1cb4:	7e a9       	ldd	r23, Y+54	; 0x36
    1cb6:	8f a9       	ldd	r24, Y+55	; 0x37
    1cb8:	98 ad       	ldd	r25, Y+56	; 0x38
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	4a ef       	ldi	r20, 0xFA	; 250
    1cc0:	54 e4       	ldi	r21, 0x44	; 68
    1cc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	89 ab       	std	Y+49, r24	; 0x31
    1ccc:	9a ab       	std	Y+50, r25	; 0x32
    1cce:	ab ab       	std	Y+51, r26	; 0x33
    1cd0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cd2:	69 a9       	ldd	r22, Y+49	; 0x31
    1cd4:	7a a9       	ldd	r23, Y+50	; 0x32
    1cd6:	8b a9       	ldd	r24, Y+51	; 0x33
    1cd8:	9c a9       	ldd	r25, Y+52	; 0x34
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e8       	ldi	r20, 0x80	; 128
    1ce0:	5f e3       	ldi	r21, 0x3F	; 63
    1ce2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ce6:	88 23       	and	r24, r24
    1ce8:	2c f4       	brge	.+10     	; 0x1cf4 <LCD_sendCommand+0x7e>
		__ticks = 1;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	98 ab       	std	Y+48, r25	; 0x30
    1cf0:	8f a7       	std	Y+47, r24	; 0x2f
    1cf2:	3f c0       	rjmp	.+126    	; 0x1d72 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1cf4:	69 a9       	ldd	r22, Y+49	; 0x31
    1cf6:	7a a9       	ldd	r23, Y+50	; 0x32
    1cf8:	8b a9       	ldd	r24, Y+51	; 0x33
    1cfa:	9c a9       	ldd	r25, Y+52	; 0x34
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	3f ef       	ldi	r19, 0xFF	; 255
    1d00:	4f e7       	ldi	r20, 0x7F	; 127
    1d02:	57 e4       	ldi	r21, 0x47	; 71
    1d04:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d08:	18 16       	cp	r1, r24
    1d0a:	4c f5       	brge	.+82     	; 0x1d5e <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0c:	6d a9       	ldd	r22, Y+53	; 0x35
    1d0e:	7e a9       	ldd	r23, Y+54	; 0x36
    1d10:	8f a9       	ldd	r24, Y+55	; 0x37
    1d12:	98 ad       	ldd	r25, Y+56	; 0x38
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e2       	ldi	r20, 0x20	; 32
    1d1a:	51 e4       	ldi	r21, 0x41	; 65
    1d1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	bc 01       	movw	r22, r24
    1d26:	cd 01       	movw	r24, r26
    1d28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	98 ab       	std	Y+48, r25	; 0x30
    1d32:	8f a7       	std	Y+47, r24	; 0x2f
    1d34:	0f c0       	rjmp	.+30     	; 0x1d54 <LCD_sendCommand+0xde>
    1d36:	88 ec       	ldi	r24, 0xC8	; 200
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	9e a7       	std	Y+46, r25	; 0x2e
    1d3c:	8d a7       	std	Y+45, r24	; 0x2d
    1d3e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d40:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <LCD_sendCommand+0xcc>
    1d46:	9e a7       	std	Y+46, r25	; 0x2e
    1d48:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	98 ab       	std	Y+48, r25	; 0x30
    1d52:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d56:	98 a9       	ldd	r25, Y+48	; 0x30
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	69 f7       	brne	.-38     	; 0x1d36 <LCD_sendCommand+0xc0>
    1d5c:	14 c0       	rjmp	.+40     	; 0x1d86 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d60:	7a a9       	ldd	r23, Y+50	; 0x32
    1d62:	8b a9       	ldd	r24, Y+51	; 0x33
    1d64:	9c a9       	ldd	r25, Y+52	; 0x34
    1d66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	98 ab       	std	Y+48, r25	; 0x30
    1d70:	8f a7       	std	Y+47, r24	; 0x2f
    1d72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d74:	98 a9       	ldd	r25, Y+48	; 0x30
    1d76:	9c a7       	std	Y+44, r25	; 0x2c
    1d78:	8b a7       	std	Y+43, r24	; 0x2b
    1d7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <LCD_sendCommand+0x108>
    1d82:	9c a7       	std	Y+44, r25	; 0x2c
    1d84:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	67 e0       	ldi	r22, 0x07	; 7
    1d8a:	41 e0       	ldi	r20, 0x01	; 1
    1d8c:	0e 94 1f 0b 	call	0x163e	; 0x163e <GPIO_writePin>
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	a0 e8       	ldi	r26, 0x80	; 128
    1d96:	bf e3       	ldi	r27, 0x3F	; 63
    1d98:	8f a3       	std	Y+39, r24	; 0x27
    1d9a:	98 a7       	std	Y+40, r25	; 0x28
    1d9c:	a9 a7       	std	Y+41, r26	; 0x29
    1d9e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da0:	6f a1       	ldd	r22, Y+39	; 0x27
    1da2:	78 a5       	ldd	r23, Y+40	; 0x28
    1da4:	89 a5       	ldd	r24, Y+41	; 0x29
    1da6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	4a ef       	ldi	r20, 0xFA	; 250
    1dae:	54 e4       	ldi	r21, 0x44	; 68
    1db0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	8b a3       	std	Y+35, r24	; 0x23
    1dba:	9c a3       	std	Y+36, r25	; 0x24
    1dbc:	ad a3       	std	Y+37, r26	; 0x25
    1dbe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dc0:	6b a1       	ldd	r22, Y+35	; 0x23
    1dc2:	7c a1       	ldd	r23, Y+36	; 0x24
    1dc4:	8d a1       	ldd	r24, Y+37	; 0x25
    1dc6:	9e a1       	ldd	r25, Y+38	; 0x26
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e8       	ldi	r20, 0x80	; 128
    1dce:	5f e3       	ldi	r21, 0x3F	; 63
    1dd0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dd4:	88 23       	and	r24, r24
    1dd6:	2c f4       	brge	.+10     	; 0x1de2 <LCD_sendCommand+0x16c>
		__ticks = 1;
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	9a a3       	std	Y+34, r25	; 0x22
    1dde:	89 a3       	std	Y+33, r24	; 0x21
    1de0:	3f c0       	rjmp	.+126    	; 0x1e60 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1de2:	6b a1       	ldd	r22, Y+35	; 0x23
    1de4:	7c a1       	ldd	r23, Y+36	; 0x24
    1de6:	8d a1       	ldd	r24, Y+37	; 0x25
    1de8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	3f ef       	ldi	r19, 0xFF	; 255
    1dee:	4f e7       	ldi	r20, 0x7F	; 127
    1df0:	57 e4       	ldi	r21, 0x47	; 71
    1df2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1df6:	18 16       	cp	r1, r24
    1df8:	4c f5       	brge	.+82     	; 0x1e4c <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfa:	6f a1       	ldd	r22, Y+39	; 0x27
    1dfc:	78 a5       	ldd	r23, Y+40	; 0x28
    1dfe:	89 a5       	ldd	r24, Y+41	; 0x29
    1e00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	40 e2       	ldi	r20, 0x20	; 32
    1e08:	51 e4       	ldi	r21, 0x41	; 65
    1e0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	bc 01       	movw	r22, r24
    1e14:	cd 01       	movw	r24, r26
    1e16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	9a a3       	std	Y+34, r25	; 0x22
    1e20:	89 a3       	std	Y+33, r24	; 0x21
    1e22:	0f c0       	rjmp	.+30     	; 0x1e42 <LCD_sendCommand+0x1cc>
    1e24:	88 ec       	ldi	r24, 0xC8	; 200
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	98 a3       	std	Y+32, r25	; 0x20
    1e2a:	8f 8f       	std	Y+31, r24	; 0x1f
    1e2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e2e:	98 a1       	ldd	r25, Y+32	; 0x20
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <LCD_sendCommand+0x1ba>
    1e34:	98 a3       	std	Y+32, r25	; 0x20
    1e36:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e38:	89 a1       	ldd	r24, Y+33	; 0x21
    1e3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	9a a3       	std	Y+34, r25	; 0x22
    1e40:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e42:	89 a1       	ldd	r24, Y+33	; 0x21
    1e44:	9a a1       	ldd	r25, Y+34	; 0x22
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	69 f7       	brne	.-38     	; 0x1e24 <LCD_sendCommand+0x1ae>
    1e4a:	14 c0       	rjmp	.+40     	; 0x1e74 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e50:	8d a1       	ldd	r24, Y+37	; 0x25
    1e52:	9e a1       	ldd	r25, Y+38	; 0x26
    1e54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	9a a3       	std	Y+34, r25	; 0x22
    1e5e:	89 a3       	std	Y+33, r24	; 0x21
    1e60:	89 a1       	ldd	r24, Y+33	; 0x21
    1e62:	9a a1       	ldd	r25, Y+34	; 0x22
    1e64:	9e 8f       	std	Y+30, r25	; 0x1e
    1e66:	8d 8f       	std	Y+29, r24	; 0x1d
    1e68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	f1 f7       	brne	.-4      	; 0x1e6c <LCD_sendCommand+0x1f6>
    1e70:	9e 8f       	std	Y+30, r25	; 0x1e
    1e72:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	6a ad       	ldd	r22, Y+58	; 0x3a
    1e78:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <GPIO_writePort>
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	a0 e8       	ldi	r26, 0x80	; 128
    1e82:	bf e3       	ldi	r27, 0x3F	; 63
    1e84:	89 8f       	std	Y+25, r24	; 0x19
    1e86:	9a 8f       	std	Y+26, r25	; 0x1a
    1e88:	ab 8f       	std	Y+27, r26	; 0x1b
    1e8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	4a ef       	ldi	r20, 0xFA	; 250
    1e9a:	54 e4       	ldi	r21, 0x44	; 68
    1e9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	8d 8b       	std	Y+21, r24	; 0x15
    1ea6:	9e 8b       	std	Y+22, r25	; 0x16
    1ea8:	af 8b       	std	Y+23, r26	; 0x17
    1eaa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1eac:	6d 89       	ldd	r22, Y+21	; 0x15
    1eae:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 e8       	ldi	r20, 0x80	; 128
    1eba:	5f e3       	ldi	r21, 0x3F	; 63
    1ebc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ec0:	88 23       	and	r24, r24
    1ec2:	2c f4       	brge	.+10     	; 0x1ece <LCD_sendCommand+0x258>
		__ticks = 1;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	9c 8b       	std	Y+20, r25	; 0x14
    1eca:	8b 8b       	std	Y+19, r24	; 0x13
    1ecc:	3f c0       	rjmp	.+126    	; 0x1f4c <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1ece:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	3f ef       	ldi	r19, 0xFF	; 255
    1eda:	4f e7       	ldi	r20, 0x7F	; 127
    1edc:	57 e4       	ldi	r21, 0x47	; 71
    1ede:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ee2:	18 16       	cp	r1, r24
    1ee4:	4c f5       	brge	.+82     	; 0x1f38 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e2       	ldi	r20, 0x20	; 32
    1ef4:	51 e4       	ldi	r21, 0x41	; 65
    1ef6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	bc 01       	movw	r22, r24
    1f00:	cd 01       	movw	r24, r26
    1f02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	9c 8b       	std	Y+20, r25	; 0x14
    1f0c:	8b 8b       	std	Y+19, r24	; 0x13
    1f0e:	0f c0       	rjmp	.+30     	; 0x1f2e <LCD_sendCommand+0x2b8>
    1f10:	88 ec       	ldi	r24, 0xC8	; 200
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	9a 8b       	std	Y+18, r25	; 0x12
    1f16:	89 8b       	std	Y+17, r24	; 0x11
    1f18:	89 89       	ldd	r24, Y+17	; 0x11
    1f1a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <LCD_sendCommand+0x2a6>
    1f20:	9a 8b       	std	Y+18, r25	; 0x12
    1f22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f24:	8b 89       	ldd	r24, Y+19	; 0x13
    1f26:	9c 89       	ldd	r25, Y+20	; 0x14
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	9c 8b       	std	Y+20, r25	; 0x14
    1f2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f30:	9c 89       	ldd	r25, Y+20	; 0x14
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	69 f7       	brne	.-38     	; 0x1f10 <LCD_sendCommand+0x29a>
    1f36:	14 c0       	rjmp	.+40     	; 0x1f60 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f38:	6d 89       	ldd	r22, Y+21	; 0x15
    1f3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	9c 8b       	std	Y+20, r25	; 0x14
    1f4a:	8b 8b       	std	Y+19, r24	; 0x13
    1f4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f50:	98 8b       	std	Y+16, r25	; 0x10
    1f52:	8f 87       	std	Y+15, r24	; 0x0f
    1f54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f56:	98 89       	ldd	r25, Y+16	; 0x10
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <LCD_sendCommand+0x2e2>
    1f5c:	98 8b       	std	Y+16, r25	; 0x10
    1f5e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	67 e0       	ldi	r22, 0x07	; 7
    1f64:	40 e0       	ldi	r20, 0x00	; 0
    1f66:	0e 94 1f 0b 	call	0x163e	; 0x163e <GPIO_writePin>
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	a0 e8       	ldi	r26, 0x80	; 128
    1f70:	bf e3       	ldi	r27, 0x3F	; 63
    1f72:	8b 87       	std	Y+11, r24	; 0x0b
    1f74:	9c 87       	std	Y+12, r25	; 0x0c
    1f76:	ad 87       	std	Y+13, r26	; 0x0d
    1f78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	4a ef       	ldi	r20, 0xFA	; 250
    1f88:	54 e4       	ldi	r21, 0x44	; 68
    1f8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	8f 83       	std	Y+7, r24	; 0x07
    1f94:	98 87       	std	Y+8, r25	; 0x08
    1f96:	a9 87       	std	Y+9, r26	; 0x09
    1f98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9c:	78 85       	ldd	r23, Y+8	; 0x08
    1f9e:	89 85       	ldd	r24, Y+9	; 0x09
    1fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e8       	ldi	r20, 0x80	; 128
    1fa8:	5f e3       	ldi	r21, 0x3F	; 63
    1faa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fae:	88 23       	and	r24, r24
    1fb0:	2c f4       	brge	.+10     	; 0x1fbc <LCD_sendCommand+0x346>
		__ticks = 1;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9e 83       	std	Y+6, r25	; 0x06
    1fb8:	8d 83       	std	Y+5, r24	; 0x05
    1fba:	3f c0       	rjmp	.+126    	; 0x203a <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    1fbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fbe:	78 85       	ldd	r23, Y+8	; 0x08
    1fc0:	89 85       	ldd	r24, Y+9	; 0x09
    1fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	3f ef       	ldi	r19, 0xFF	; 255
    1fc8:	4f e7       	ldi	r20, 0x7F	; 127
    1fca:	57 e4       	ldi	r21, 0x47	; 71
    1fcc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fd0:	18 16       	cp	r1, r24
    1fd2:	4c f5       	brge	.+82     	; 0x2026 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e2       	ldi	r20, 0x20	; 32
    1fe2:	51 e4       	ldi	r21, 0x41	; 65
    1fe4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	bc 01       	movw	r22, r24
    1fee:	cd 01       	movw	r24, r26
    1ff0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	9e 83       	std	Y+6, r25	; 0x06
    1ffa:	8d 83       	std	Y+5, r24	; 0x05
    1ffc:	0f c0       	rjmp	.+30     	; 0x201c <LCD_sendCommand+0x3a6>
    1ffe:	88 ec       	ldi	r24, 0xC8	; 200
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9c 83       	std	Y+4, r25	; 0x04
    2004:	8b 83       	std	Y+3, r24	; 0x03
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	9c 81       	ldd	r25, Y+4	; 0x04
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_sendCommand+0x394>
    200e:	9c 83       	std	Y+4, r25	; 0x04
    2010:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2012:	8d 81       	ldd	r24, Y+5	; 0x05
    2014:	9e 81       	ldd	r25, Y+6	; 0x06
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201c:	8d 81       	ldd	r24, Y+5	; 0x05
    201e:	9e 81       	ldd	r25, Y+6	; 0x06
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	69 f7       	brne	.-38     	; 0x1ffe <LCD_sendCommand+0x388>
    2024:	14 c0       	rjmp	.+40     	; 0x204e <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2026:	6f 81       	ldd	r22, Y+7	; 0x07
    2028:	78 85       	ldd	r23, Y+8	; 0x08
    202a:	89 85       	ldd	r24, Y+9	; 0x09
    202c:	9a 85       	ldd	r25, Y+10	; 0x0a
    202e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	9e 83       	std	Y+6, r25	; 0x06
    2038:	8d 83       	std	Y+5, r24	; 0x05
    203a:	8d 81       	ldd	r24, Y+5	; 0x05
    203c:	9e 81       	ldd	r25, Y+6	; 0x06
    203e:	9a 83       	std	Y+2, r25	; 0x02
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	9a 81       	ldd	r25, Y+2	; 0x02
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	f1 f7       	brne	.-4      	; 0x2046 <LCD_sendCommand+0x3d0>
    204a:	9a 83       	std	Y+2, r25	; 0x02
    204c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    204e:	ea 96       	adiw	r28, 0x3a	; 58
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	ea 97       	sbiw	r28, 0x3a	; 58
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	de bf       	out	0x3e, r29	; 62
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	cd bf       	out	0x3d, r28	; 61
    2074:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2076:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	65 e0       	ldi	r22, 0x05	; 5
    207c:	41 e0       	ldi	r20, 0x01	; 1
    207e:	0e 94 1f 0b 	call	0x163e	; 0x163e <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	66 e0       	ldi	r22, 0x06	; 6
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	0e 94 1f 0b 	call	0x163e	; 0x163e <GPIO_writePin>
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	a0 e8       	ldi	r26, 0x80	; 128
    2092:	bf e3       	ldi	r27, 0x3F	; 63
    2094:	8d ab       	std	Y+53, r24	; 0x35
    2096:	9e ab       	std	Y+54, r25	; 0x36
    2098:	af ab       	std	Y+55, r26	; 0x37
    209a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209c:	6d a9       	ldd	r22, Y+53	; 0x35
    209e:	7e a9       	ldd	r23, Y+54	; 0x36
    20a0:	8f a9       	ldd	r24, Y+55	; 0x37
    20a2:	98 ad       	ldd	r25, Y+56	; 0x38
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	4a ef       	ldi	r20, 0xFA	; 250
    20aa:	54 e4       	ldi	r21, 0x44	; 68
    20ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	89 ab       	std	Y+49, r24	; 0x31
    20b6:	9a ab       	std	Y+50, r25	; 0x32
    20b8:	ab ab       	std	Y+51, r26	; 0x33
    20ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20bc:	69 a9       	ldd	r22, Y+49	; 0x31
    20be:	7a a9       	ldd	r23, Y+50	; 0x32
    20c0:	8b a9       	ldd	r24, Y+51	; 0x33
    20c2:	9c a9       	ldd	r25, Y+52	; 0x34
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e8       	ldi	r20, 0x80	; 128
    20ca:	5f e3       	ldi	r21, 0x3F	; 63
    20cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20d0:	88 23       	and	r24, r24
    20d2:	2c f4       	brge	.+10     	; 0x20de <LCD_displayCharacter+0x7e>
		__ticks = 1;
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	98 ab       	std	Y+48, r25	; 0x30
    20da:	8f a7       	std	Y+47, r24	; 0x2f
    20dc:	3f c0       	rjmp	.+126    	; 0x215c <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    20de:	69 a9       	ldd	r22, Y+49	; 0x31
    20e0:	7a a9       	ldd	r23, Y+50	; 0x32
    20e2:	8b a9       	ldd	r24, Y+51	; 0x33
    20e4:	9c a9       	ldd	r25, Y+52	; 0x34
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	3f ef       	ldi	r19, 0xFF	; 255
    20ea:	4f e7       	ldi	r20, 0x7F	; 127
    20ec:	57 e4       	ldi	r21, 0x47	; 71
    20ee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20f2:	18 16       	cp	r1, r24
    20f4:	4c f5       	brge	.+82     	; 0x2148 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f6:	6d a9       	ldd	r22, Y+53	; 0x35
    20f8:	7e a9       	ldd	r23, Y+54	; 0x36
    20fa:	8f a9       	ldd	r24, Y+55	; 0x37
    20fc:	98 ad       	ldd	r25, Y+56	; 0x38
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e2       	ldi	r20, 0x20	; 32
    2104:	51 e4       	ldi	r21, 0x41	; 65
    2106:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	bc 01       	movw	r22, r24
    2110:	cd 01       	movw	r24, r26
    2112:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	98 ab       	std	Y+48, r25	; 0x30
    211c:	8f a7       	std	Y+47, r24	; 0x2f
    211e:	0f c0       	rjmp	.+30     	; 0x213e <LCD_displayCharacter+0xde>
    2120:	88 ec       	ldi	r24, 0xC8	; 200
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	9e a7       	std	Y+46, r25	; 0x2e
    2126:	8d a7       	std	Y+45, r24	; 0x2d
    2128:	8d a5       	ldd	r24, Y+45	; 0x2d
    212a:	9e a5       	ldd	r25, Y+46	; 0x2e
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	f1 f7       	brne	.-4      	; 0x212c <LCD_displayCharacter+0xcc>
    2130:	9e a7       	std	Y+46, r25	; 0x2e
    2132:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2134:	8f a5       	ldd	r24, Y+47	; 0x2f
    2136:	98 a9       	ldd	r25, Y+48	; 0x30
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	98 ab       	std	Y+48, r25	; 0x30
    213c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2140:	98 a9       	ldd	r25, Y+48	; 0x30
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	69 f7       	brne	.-38     	; 0x2120 <LCD_displayCharacter+0xc0>
    2146:	14 c0       	rjmp	.+40     	; 0x2170 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2148:	69 a9       	ldd	r22, Y+49	; 0x31
    214a:	7a a9       	ldd	r23, Y+50	; 0x32
    214c:	8b a9       	ldd	r24, Y+51	; 0x33
    214e:	9c a9       	ldd	r25, Y+52	; 0x34
    2150:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	98 ab       	std	Y+48, r25	; 0x30
    215a:	8f a7       	std	Y+47, r24	; 0x2f
    215c:	8f a5       	ldd	r24, Y+47	; 0x2f
    215e:	98 a9       	ldd	r25, Y+48	; 0x30
    2160:	9c a7       	std	Y+44, r25	; 0x2c
    2162:	8b a7       	std	Y+43, r24	; 0x2b
    2164:	8b a5       	ldd	r24, Y+43	; 0x2b
    2166:	9c a5       	ldd	r25, Y+44	; 0x2c
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	f1 f7       	brne	.-4      	; 0x2168 <LCD_displayCharacter+0x108>
    216c:	9c a7       	std	Y+44, r25	; 0x2c
    216e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	67 e0       	ldi	r22, 0x07	; 7
    2174:	41 e0       	ldi	r20, 0x01	; 1
    2176:	0e 94 1f 0b 	call	0x163e	; 0x163e <GPIO_writePin>
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	a0 e8       	ldi	r26, 0x80	; 128
    2180:	bf e3       	ldi	r27, 0x3F	; 63
    2182:	8f a3       	std	Y+39, r24	; 0x27
    2184:	98 a7       	std	Y+40, r25	; 0x28
    2186:	a9 a7       	std	Y+41, r26	; 0x29
    2188:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218a:	6f a1       	ldd	r22, Y+39	; 0x27
    218c:	78 a5       	ldd	r23, Y+40	; 0x28
    218e:	89 a5       	ldd	r24, Y+41	; 0x29
    2190:	9a a5       	ldd	r25, Y+42	; 0x2a
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	4a ef       	ldi	r20, 0xFA	; 250
    2198:	54 e4       	ldi	r21, 0x44	; 68
    219a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	8b a3       	std	Y+35, r24	; 0x23
    21a4:	9c a3       	std	Y+36, r25	; 0x24
    21a6:	ad a3       	std	Y+37, r26	; 0x25
    21a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21aa:	6b a1       	ldd	r22, Y+35	; 0x23
    21ac:	7c a1       	ldd	r23, Y+36	; 0x24
    21ae:	8d a1       	ldd	r24, Y+37	; 0x25
    21b0:	9e a1       	ldd	r25, Y+38	; 0x26
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e8       	ldi	r20, 0x80	; 128
    21b8:	5f e3       	ldi	r21, 0x3F	; 63
    21ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21be:	88 23       	and	r24, r24
    21c0:	2c f4       	brge	.+10     	; 0x21cc <LCD_displayCharacter+0x16c>
		__ticks = 1;
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9a a3       	std	Y+34, r25	; 0x22
    21c8:	89 a3       	std	Y+33, r24	; 0x21
    21ca:	3f c0       	rjmp	.+126    	; 0x224a <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    21cc:	6b a1       	ldd	r22, Y+35	; 0x23
    21ce:	7c a1       	ldd	r23, Y+36	; 0x24
    21d0:	8d a1       	ldd	r24, Y+37	; 0x25
    21d2:	9e a1       	ldd	r25, Y+38	; 0x26
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	3f ef       	ldi	r19, 0xFF	; 255
    21d8:	4f e7       	ldi	r20, 0x7F	; 127
    21da:	57 e4       	ldi	r21, 0x47	; 71
    21dc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21e0:	18 16       	cp	r1, r24
    21e2:	4c f5       	brge	.+82     	; 0x2236 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e4:	6f a1       	ldd	r22, Y+39	; 0x27
    21e6:	78 a5       	ldd	r23, Y+40	; 0x28
    21e8:	89 a5       	ldd	r24, Y+41	; 0x29
    21ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e2       	ldi	r20, 0x20	; 32
    21f2:	51 e4       	ldi	r21, 0x41	; 65
    21f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	bc 01       	movw	r22, r24
    21fe:	cd 01       	movw	r24, r26
    2200:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	9a a3       	std	Y+34, r25	; 0x22
    220a:	89 a3       	std	Y+33, r24	; 0x21
    220c:	0f c0       	rjmp	.+30     	; 0x222c <LCD_displayCharacter+0x1cc>
    220e:	88 ec       	ldi	r24, 0xC8	; 200
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	98 a3       	std	Y+32, r25	; 0x20
    2214:	8f 8f       	std	Y+31, r24	; 0x1f
    2216:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2218:	98 a1       	ldd	r25, Y+32	; 0x20
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <LCD_displayCharacter+0x1ba>
    221e:	98 a3       	std	Y+32, r25	; 0x20
    2220:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2222:	89 a1       	ldd	r24, Y+33	; 0x21
    2224:	9a a1       	ldd	r25, Y+34	; 0x22
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	9a a3       	std	Y+34, r25	; 0x22
    222a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222c:	89 a1       	ldd	r24, Y+33	; 0x21
    222e:	9a a1       	ldd	r25, Y+34	; 0x22
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	69 f7       	brne	.-38     	; 0x220e <LCD_displayCharacter+0x1ae>
    2234:	14 c0       	rjmp	.+40     	; 0x225e <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2236:	6b a1       	ldd	r22, Y+35	; 0x23
    2238:	7c a1       	ldd	r23, Y+36	; 0x24
    223a:	8d a1       	ldd	r24, Y+37	; 0x25
    223c:	9e a1       	ldd	r25, Y+38	; 0x26
    223e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	9a a3       	std	Y+34, r25	; 0x22
    2248:	89 a3       	std	Y+33, r24	; 0x21
    224a:	89 a1       	ldd	r24, Y+33	; 0x21
    224c:	9a a1       	ldd	r25, Y+34	; 0x22
    224e:	9e 8f       	std	Y+30, r25	; 0x1e
    2250:	8d 8f       	std	Y+29, r24	; 0x1d
    2252:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2254:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	f1 f7       	brne	.-4      	; 0x2256 <LCD_displayCharacter+0x1f6>
    225a:	9e 8f       	std	Y+30, r25	; 0x1e
    225c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	6a ad       	ldd	r22, Y+58	; 0x3a
    2262:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <GPIO_writePort>
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	a0 e8       	ldi	r26, 0x80	; 128
    226c:	bf e3       	ldi	r27, 0x3F	; 63
    226e:	89 8f       	std	Y+25, r24	; 0x19
    2270:	9a 8f       	std	Y+26, r25	; 0x1a
    2272:	ab 8f       	std	Y+27, r26	; 0x1b
    2274:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2276:	69 8d       	ldd	r22, Y+25	; 0x19
    2278:	7a 8d       	ldd	r23, Y+26	; 0x1a
    227a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    227c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	4a ef       	ldi	r20, 0xFA	; 250
    2284:	54 e4       	ldi	r21, 0x44	; 68
    2286:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	8d 8b       	std	Y+21, r24	; 0x15
    2290:	9e 8b       	std	Y+22, r25	; 0x16
    2292:	af 8b       	std	Y+23, r26	; 0x17
    2294:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2296:	6d 89       	ldd	r22, Y+21	; 0x15
    2298:	7e 89       	ldd	r23, Y+22	; 0x16
    229a:	8f 89       	ldd	r24, Y+23	; 0x17
    229c:	98 8d       	ldd	r25, Y+24	; 0x18
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e8       	ldi	r20, 0x80	; 128
    22a4:	5f e3       	ldi	r21, 0x3F	; 63
    22a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22aa:	88 23       	and	r24, r24
    22ac:	2c f4       	brge	.+10     	; 0x22b8 <LCD_displayCharacter+0x258>
		__ticks = 1;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	9c 8b       	std	Y+20, r25	; 0x14
    22b4:	8b 8b       	std	Y+19, r24	; 0x13
    22b6:	3f c0       	rjmp	.+126    	; 0x2336 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    22b8:	6d 89       	ldd	r22, Y+21	; 0x15
    22ba:	7e 89       	ldd	r23, Y+22	; 0x16
    22bc:	8f 89       	ldd	r24, Y+23	; 0x17
    22be:	98 8d       	ldd	r25, Y+24	; 0x18
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	3f ef       	ldi	r19, 0xFF	; 255
    22c4:	4f e7       	ldi	r20, 0x7F	; 127
    22c6:	57 e4       	ldi	r21, 0x47	; 71
    22c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22cc:	18 16       	cp	r1, r24
    22ce:	4c f5       	brge	.+82     	; 0x2322 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d0:	69 8d       	ldd	r22, Y+25	; 0x19
    22d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e2       	ldi	r20, 0x20	; 32
    22de:	51 e4       	ldi	r21, 0x41	; 65
    22e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	bc 01       	movw	r22, r24
    22ea:	cd 01       	movw	r24, r26
    22ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	9c 8b       	std	Y+20, r25	; 0x14
    22f6:	8b 8b       	std	Y+19, r24	; 0x13
    22f8:	0f c0       	rjmp	.+30     	; 0x2318 <LCD_displayCharacter+0x2b8>
    22fa:	88 ec       	ldi	r24, 0xC8	; 200
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	9a 8b       	std	Y+18, r25	; 0x12
    2300:	89 8b       	std	Y+17, r24	; 0x11
    2302:	89 89       	ldd	r24, Y+17	; 0x11
    2304:	9a 89       	ldd	r25, Y+18	; 0x12
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <LCD_displayCharacter+0x2a6>
    230a:	9a 8b       	std	Y+18, r25	; 0x12
    230c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230e:	8b 89       	ldd	r24, Y+19	; 0x13
    2310:	9c 89       	ldd	r25, Y+20	; 0x14
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	9c 8b       	std	Y+20, r25	; 0x14
    2316:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2318:	8b 89       	ldd	r24, Y+19	; 0x13
    231a:	9c 89       	ldd	r25, Y+20	; 0x14
    231c:	00 97       	sbiw	r24, 0x00	; 0
    231e:	69 f7       	brne	.-38     	; 0x22fa <LCD_displayCharacter+0x29a>
    2320:	14 c0       	rjmp	.+40     	; 0x234a <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2322:	6d 89       	ldd	r22, Y+21	; 0x15
    2324:	7e 89       	ldd	r23, Y+22	; 0x16
    2326:	8f 89       	ldd	r24, Y+23	; 0x17
    2328:	98 8d       	ldd	r25, Y+24	; 0x18
    232a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9c 8b       	std	Y+20, r25	; 0x14
    2334:	8b 8b       	std	Y+19, r24	; 0x13
    2336:	8b 89       	ldd	r24, Y+19	; 0x13
    2338:	9c 89       	ldd	r25, Y+20	; 0x14
    233a:	98 8b       	std	Y+16, r25	; 0x10
    233c:	8f 87       	std	Y+15, r24	; 0x0f
    233e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2340:	98 89       	ldd	r25, Y+16	; 0x10
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <LCD_displayCharacter+0x2e2>
    2346:	98 8b       	std	Y+16, r25	; 0x10
    2348:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	67 e0       	ldi	r22, 0x07	; 7
    234e:	40 e0       	ldi	r20, 0x00	; 0
    2350:	0e 94 1f 0b 	call	0x163e	; 0x163e <GPIO_writePin>
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	a0 e8       	ldi	r26, 0x80	; 128
    235a:	bf e3       	ldi	r27, 0x3F	; 63
    235c:	8b 87       	std	Y+11, r24	; 0x0b
    235e:	9c 87       	std	Y+12, r25	; 0x0c
    2360:	ad 87       	std	Y+13, r26	; 0x0d
    2362:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2364:	6b 85       	ldd	r22, Y+11	; 0x0b
    2366:	7c 85       	ldd	r23, Y+12	; 0x0c
    2368:	8d 85       	ldd	r24, Y+13	; 0x0d
    236a:	9e 85       	ldd	r25, Y+14	; 0x0e
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	4a ef       	ldi	r20, 0xFA	; 250
    2372:	54 e4       	ldi	r21, 0x44	; 68
    2374:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	8f 83       	std	Y+7, r24	; 0x07
    237e:	98 87       	std	Y+8, r25	; 0x08
    2380:	a9 87       	std	Y+9, r26	; 0x09
    2382:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2384:	6f 81       	ldd	r22, Y+7	; 0x07
    2386:	78 85       	ldd	r23, Y+8	; 0x08
    2388:	89 85       	ldd	r24, Y+9	; 0x09
    238a:	9a 85       	ldd	r25, Y+10	; 0x0a
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e8       	ldi	r20, 0x80	; 128
    2392:	5f e3       	ldi	r21, 0x3F	; 63
    2394:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2398:	88 23       	and	r24, r24
    239a:	2c f4       	brge	.+10     	; 0x23a6 <LCD_displayCharacter+0x346>
		__ticks = 1;
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	9e 83       	std	Y+6, r25	; 0x06
    23a2:	8d 83       	std	Y+5, r24	; 0x05
    23a4:	3f c0       	rjmp	.+126    	; 0x2424 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    23a6:	6f 81       	ldd	r22, Y+7	; 0x07
    23a8:	78 85       	ldd	r23, Y+8	; 0x08
    23aa:	89 85       	ldd	r24, Y+9	; 0x09
    23ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	3f ef       	ldi	r19, 0xFF	; 255
    23b2:	4f e7       	ldi	r20, 0x7F	; 127
    23b4:	57 e4       	ldi	r21, 0x47	; 71
    23b6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23ba:	18 16       	cp	r1, r24
    23bc:	4c f5       	brge	.+82     	; 0x2410 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23be:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e2       	ldi	r20, 0x20	; 32
    23cc:	51 e4       	ldi	r21, 0x41	; 65
    23ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	bc 01       	movw	r22, r24
    23d8:	cd 01       	movw	r24, r26
    23da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	9e 83       	std	Y+6, r25	; 0x06
    23e4:	8d 83       	std	Y+5, r24	; 0x05
    23e6:	0f c0       	rjmp	.+30     	; 0x2406 <LCD_displayCharacter+0x3a6>
    23e8:	88 ec       	ldi	r24, 0xC8	; 200
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	9c 83       	std	Y+4, r25	; 0x04
    23ee:	8b 83       	std	Y+3, r24	; 0x03
    23f0:	8b 81       	ldd	r24, Y+3	; 0x03
    23f2:	9c 81       	ldd	r25, Y+4	; 0x04
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <LCD_displayCharacter+0x394>
    23f8:	9c 83       	std	Y+4, r25	; 0x04
    23fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fc:	8d 81       	ldd	r24, Y+5	; 0x05
    23fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	9e 83       	std	Y+6, r25	; 0x06
    2404:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2406:	8d 81       	ldd	r24, Y+5	; 0x05
    2408:	9e 81       	ldd	r25, Y+6	; 0x06
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	69 f7       	brne	.-38     	; 0x23e8 <LCD_displayCharacter+0x388>
    240e:	14 c0       	rjmp	.+40     	; 0x2438 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2410:	6f 81       	ldd	r22, Y+7	; 0x07
    2412:	78 85       	ldd	r23, Y+8	; 0x08
    2414:	89 85       	ldd	r24, Y+9	; 0x09
    2416:	9a 85       	ldd	r25, Y+10	; 0x0a
    2418:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	9e 83       	std	Y+6, r25	; 0x06
    2422:	8d 83       	std	Y+5, r24	; 0x05
    2424:	8d 81       	ldd	r24, Y+5	; 0x05
    2426:	9e 81       	ldd	r25, Y+6	; 0x06
    2428:	9a 83       	std	Y+2, r25	; 0x02
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	9a 81       	ldd	r25, Y+2	; 0x02
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	f1 f7       	brne	.-4      	; 0x2430 <LCD_displayCharacter+0x3d0>
    2434:	9a 83       	std	Y+2, r25	; 0x02
    2436:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2438:	ea 96       	adiw	r28, 0x3a	; 58
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	00 d0       	rcall	.+0      	; 0x2450 <LCD_displayString+0x6>
    2450:	0f 92       	push	r0
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	9b 83       	std	Y+3, r25	; 0x03
    2458:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    245a:	19 82       	std	Y+1, r1	; 0x01
    245c:	0e c0       	rjmp	.+28     	; 0x247a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	28 2f       	mov	r18, r24
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	9b 81       	ldd	r25, Y+3	; 0x03
    2468:	fc 01       	movw	r30, r24
    246a:	e2 0f       	add	r30, r18
    246c:	f3 1f       	adc	r31, r19
    246e:	80 81       	ld	r24, Z
    2470:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_displayCharacter>
		i++;
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	8f 5f       	subi	r24, 0xFF	; 255
    2478:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	28 2f       	mov	r18, r24
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	9b 81       	ldd	r25, Y+3	; 0x03
    2484:	fc 01       	movw	r30, r24
    2486:	e2 0f       	add	r30, r18
    2488:	f3 1f       	adc	r31, r19
    248a:	80 81       	ld	r24, Z
    248c:	88 23       	and	r24, r24
    248e:	39 f7       	brne	.-50     	; 0x245e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	08 95       	ret

0000249c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	00 d0       	rcall	.+0      	; 0x24a2 <LCD_moveCursor+0x6>
    24a2:	00 d0       	rcall	.+0      	; 0x24a4 <LCD_moveCursor+0x8>
    24a4:	0f 92       	push	r0
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	8a 83       	std	Y+2, r24	; 0x02
    24ac:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	3d 83       	std	Y+5, r19	; 0x05
    24b6:	2c 83       	std	Y+4, r18	; 0x04
    24b8:	8c 81       	ldd	r24, Y+4	; 0x04
    24ba:	9d 81       	ldd	r25, Y+5	; 0x05
    24bc:	81 30       	cpi	r24, 0x01	; 1
    24be:	91 05       	cpc	r25, r1
    24c0:	c1 f0       	breq	.+48     	; 0x24f2 <LCD_moveCursor+0x56>
    24c2:	2c 81       	ldd	r18, Y+4	; 0x04
    24c4:	3d 81       	ldd	r19, Y+5	; 0x05
    24c6:	22 30       	cpi	r18, 0x02	; 2
    24c8:	31 05       	cpc	r19, r1
    24ca:	2c f4       	brge	.+10     	; 0x24d6 <LCD_moveCursor+0x3a>
    24cc:	8c 81       	ldd	r24, Y+4	; 0x04
    24ce:	9d 81       	ldd	r25, Y+5	; 0x05
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	61 f0       	breq	.+24     	; 0x24ec <LCD_moveCursor+0x50>
    24d4:	19 c0       	rjmp	.+50     	; 0x2508 <LCD_moveCursor+0x6c>
    24d6:	2c 81       	ldd	r18, Y+4	; 0x04
    24d8:	3d 81       	ldd	r19, Y+5	; 0x05
    24da:	22 30       	cpi	r18, 0x02	; 2
    24dc:	31 05       	cpc	r19, r1
    24de:	69 f0       	breq	.+26     	; 0x24fa <LCD_moveCursor+0x5e>
    24e0:	8c 81       	ldd	r24, Y+4	; 0x04
    24e2:	9d 81       	ldd	r25, Y+5	; 0x05
    24e4:	83 30       	cpi	r24, 0x03	; 3
    24e6:	91 05       	cpc	r25, r1
    24e8:	61 f0       	breq	.+24     	; 0x2502 <LCD_moveCursor+0x66>
    24ea:	0e c0       	rjmp	.+28     	; 0x2508 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    24ec:	8b 81       	ldd	r24, Y+3	; 0x03
    24ee:	89 83       	std	Y+1, r24	; 0x01
    24f0:	0b c0       	rjmp	.+22     	; 0x2508 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	80 5c       	subi	r24, 0xC0	; 192
    24f6:	89 83       	std	Y+1, r24	; 0x01
    24f8:	07 c0       	rjmp	.+14     	; 0x2508 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	80 5f       	subi	r24, 0xF0	; 240
    24fe:	89 83       	std	Y+1, r24	; 0x01
    2500:	03 c0       	rjmp	.+6      	; 0x2508 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	80 5b       	subi	r24, 0xB0	; 176
    2506:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	80 68       	ori	r24, 0x80	; 128
    250c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_sendCommand>
}
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	00 d0       	rcall	.+0      	; 0x2526 <LCD_displayStringRowColumn+0x6>
    2526:	00 d0       	rcall	.+0      	; 0x2528 <LCD_displayStringRowColumn+0x8>
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	89 83       	std	Y+1, r24	; 0x01
    252e:	6a 83       	std	Y+2, r22	; 0x02
    2530:	5c 83       	std	Y+4, r21	; 0x04
    2532:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2534:	89 81       	ldd	r24, Y+1	; 0x01
    2536:	6a 81       	ldd	r22, Y+2	; 0x02
    2538:	0e 94 4e 12 	call	0x249c	; 0x249c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    253c:	8b 81       	ldd	r24, Y+3	; 0x03
    253e:	9c 81       	ldd	r25, Y+4	; 0x04
    2540:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_displayString>
}
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	cf 91       	pop	r28
    254e:	df 91       	pop	r29
    2550:	08 95       	ret

00002552 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
    255a:	62 97       	sbiw	r28, 0x12	; 18
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	f8 94       	cli
    2560:	de bf       	out	0x3e, r29	; 62
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	cd bf       	out	0x3d, r28	; 61
    2566:	9a 8b       	std	Y+18, r25	; 0x12
    2568:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    256a:	89 89       	ldd	r24, Y+17	; 0x11
    256c:	9a 89       	ldd	r25, Y+18	; 0x12
    256e:	9e 01       	movw	r18, r28
    2570:	2f 5f       	subi	r18, 0xFF	; 255
    2572:	3f 4f       	sbci	r19, 0xFF	; 255
    2574:	b9 01       	movw	r22, r18
    2576:	4a e0       	ldi	r20, 0x0A	; 10
    2578:	50 e0       	ldi	r21, 0x00	; 0
    257a:	0e 94 5d 14 	call	0x28ba	; 0x28ba <itoa>
   LCD_displayString(buff); /* Display the string */
    257e:	ce 01       	movw	r24, r28
    2580:	01 96       	adiw	r24, 0x01	; 1
    2582:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_displayString>
}
    2586:	62 96       	adiw	r28, 0x12	; 18
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	f8 94       	cli
    258c:	de bf       	out	0x3e, r29	; 62
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	cd bf       	out	0x3d, r28	; 61
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_sendCommand>
}
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	08 95       	ret

000025ac <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_Config*Config_Ptr)
{
    25ac:	df 93       	push	r29
    25ae:	cf 93       	push	r28
    25b0:	00 d0       	rcall	.+0      	; 0x25b2 <UART_init+0x6>
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <UART_init+0x8>
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	9c 83       	std	Y+4, r25	; 0x04
    25ba:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    25bc:	1a 82       	std	Y+2, r1	; 0x02
    25be:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    25c0:	eb e2       	ldi	r30, 0x2B	; 43
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	82 e0       	ldi	r24, 0x02	; 2
    25c6:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2  obtained from frame_size variable in the configurations structure
	 ***********************************************************************/ 
	if (Config_Ptr->frame_size!= SIZE_9){
    25c8:	eb 81       	ldd	r30, Y+3	; 0x03
    25ca:	fc 81       	ldd	r31, Y+4	; 0x04
    25cc:	80 81       	ld	r24, Z
    25ce:	87 30       	cpi	r24, 0x07	; 7
    25d0:	29 f0       	breq	.+10     	; 0x25dc <UART_init+0x30>
	UCSRB = (1<<RXEN) | (1<<TXEN);}
    25d2:	ea e2       	ldi	r30, 0x2A	; 42
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	88 e1       	ldi	r24, 0x18	; 24
    25d8:	80 83       	st	Z, r24
    25da:	04 c0       	rjmp	.+8      	; 0x25e4 <UART_init+0x38>
	else{
		UCSRB = (1<<RXEN) | (1<<TXEN)|(1<<UCSZ2);
    25dc:	ea e2       	ldi	r30, 0x2A	; 42
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	8c e1       	ldi	r24, 0x1C	; 28
    25e2:	80 83       	st	Z, r24
	 * UPM1:0    obtained from parity_mode variable in the configurations structure
	 * USBS      obtained from stop_bits variable in the configurations structure
	 * UCSZ1:0   obtained from frame_size variable in the configurations structure
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    25e4:	e0 e4       	ldi	r30, 0x40	; 64
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 e8       	ldi	r24, 0x80	; 128
    25ea:	80 83       	st	Z, r24
	UCSRC |= (UCSRC&0xf9)|((Config_Ptr->frame_size&0x03)<<1);
    25ec:	a0 e4       	ldi	r26, 0x40	; 64
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	e0 e4       	ldi	r30, 0x40	; 64
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	38 2f       	mov	r19, r24
    25f8:	e0 e4       	ldi	r30, 0x40	; 64
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	28 2f       	mov	r18, r24
    2600:	29 7f       	andi	r18, 0xF9	; 249
    2602:	eb 81       	ldd	r30, Y+3	; 0x03
    2604:	fc 81       	ldd	r31, Y+4	; 0x04
    2606:	80 81       	ld	r24, Z
    2608:	88 2f       	mov	r24, r24
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	83 70       	andi	r24, 0x03	; 3
    260e:	90 70       	andi	r25, 0x00	; 0
    2610:	88 0f       	add	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	82 2b       	or	r24, r18
    2616:	83 2b       	or	r24, r19
    2618:	8c 93       	st	X, r24
	UCSRC |=(UCSRC&0xcf)|((Config_Ptr->parity_mode)<<4);
    261a:	a0 e4       	ldi	r26, 0x40	; 64
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e0 e4       	ldi	r30, 0x40	; 64
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	38 2f       	mov	r19, r24
    2626:	e0 e4       	ldi	r30, 0x40	; 64
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	28 2f       	mov	r18, r24
    262e:	2f 7c       	andi	r18, 0xCF	; 207
    2630:	eb 81       	ldd	r30, Y+3	; 0x03
    2632:	fc 81       	ldd	r31, Y+4	; 0x04
    2634:	81 81       	ldd	r24, Z+1	; 0x01
    2636:	88 2f       	mov	r24, r24
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	82 95       	swap	r24
    263c:	92 95       	swap	r25
    263e:	90 7f       	andi	r25, 0xF0	; 240
    2640:	98 27       	eor	r25, r24
    2642:	80 7f       	andi	r24, 0xF0	; 240
    2644:	98 27       	eor	r25, r24
    2646:	82 2b       	or	r24, r18
    2648:	83 2b       	or	r24, r19
    264a:	8c 93       	st	X, r24
	UCSRC |=(UCSRC&0xf7)|((Config_Ptr->stop_bits)<<3);
    264c:	a0 e4       	ldi	r26, 0x40	; 64
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	e0 e4       	ldi	r30, 0x40	; 64
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	38 2f       	mov	r19, r24
    2658:	e0 e4       	ldi	r30, 0x40	; 64
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	28 2f       	mov	r18, r24
    2660:	27 7f       	andi	r18, 0xF7	; 247
    2662:	eb 81       	ldd	r30, Y+3	; 0x03
    2664:	fc 81       	ldd	r31, Y+4	; 0x04
    2666:	82 81       	ldd	r24, Z+2	; 0x02
    2668:	88 2f       	mov	r24, r24
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	88 0f       	add	r24, r24
    266e:	99 1f       	adc	r25, r25
    2670:	88 0f       	add	r24, r24
    2672:	99 1f       	adc	r25, r25
    2674:	88 0f       	add	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	82 2b       	or	r24, r18
    267a:	83 2b       	or	r24, r19
    267c:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    267e:	eb 81       	ldd	r30, Y+3	; 0x03
    2680:	fc 81       	ldd	r31, Y+4	; 0x04
    2682:	83 81       	ldd	r24, Z+3	; 0x03
    2684:	94 81       	ldd	r25, Z+4	; 0x04
    2686:	a5 81       	ldd	r26, Z+5	; 0x05
    2688:	b6 81       	ldd	r27, Z+6	; 0x06
    268a:	88 0f       	add	r24, r24
    268c:	99 1f       	adc	r25, r25
    268e:	aa 1f       	adc	r26, r26
    2690:	bb 1f       	adc	r27, r27
    2692:	88 0f       	add	r24, r24
    2694:	99 1f       	adc	r25, r25
    2696:	aa 1f       	adc	r26, r26
    2698:	bb 1f       	adc	r27, r27
    269a:	88 0f       	add	r24, r24
    269c:	99 1f       	adc	r25, r25
    269e:	aa 1f       	adc	r26, r26
    26a0:	bb 1f       	adc	r27, r27
    26a2:	9c 01       	movw	r18, r24
    26a4:	ad 01       	movw	r20, r26
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	92 e1       	ldi	r25, 0x12	; 18
    26aa:	aa e7       	ldi	r26, 0x7A	; 122
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	bc 01       	movw	r22, r24
    26b0:	cd 01       	movw	r24, r26
    26b2:	0e 94 04 14 	call	0x2808	; 0x2808 <__udivmodsi4>
    26b6:	da 01       	movw	r26, r20
    26b8:	c9 01       	movw	r24, r18
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	9a 83       	std	Y+2, r25	; 0x02
    26be:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    26c0:	e0 e4       	ldi	r30, 0x40	; 64
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	9a 81       	ldd	r25, Y+2	; 0x02
    26c8:	89 2f       	mov	r24, r25
    26ca:	99 27       	eor	r25, r25
    26cc:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    26ce:	e9 e2       	ldi	r30, 0x29	; 41
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	80 83       	st	Z, r24
}
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

000026e4 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	0f 92       	push	r0
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    26f0:	eb e2       	ldi	r30, 0x2B	; 43
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	88 2f       	mov	r24, r24
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	80 72       	andi	r24, 0x20	; 32
    26fc:	90 70       	andi	r25, 0x00	; 0
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	b9 f3       	breq	.-18     	; 0x26f0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2702:	ec e2       	ldi	r30, 0x2C	; 44
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    270a:	0f 90       	pop	r0
    270c:	cf 91       	pop	r28
    270e:	df 91       	pop	r29
    2710:	08 95       	ret

00002712 <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    2712:	df 93       	push	r29
    2714:	cf 93       	push	r28
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    271a:	eb e2       	ldi	r30, 0x2B	; 43
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	88 23       	and	r24, r24
    2722:	dc f7       	brge	.-10     	; 0x271a <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2724:	ec e2       	ldi	r30, 0x2C	; 44
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	80 81       	ld	r24, Z
}
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	00 d0       	rcall	.+0      	; 0x2736 <UART_sendString+0x6>
    2736:	0f 92       	push	r0
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	9b 83       	std	Y+3, r25	; 0x03
    273e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2740:	19 82       	std	Y+1, r1	; 0x01
    2742:	0e c0       	rjmp	.+28     	; 0x2760 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	28 2f       	mov	r18, r24
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	8a 81       	ldd	r24, Y+2	; 0x02
    274c:	9b 81       	ldd	r25, Y+3	; 0x03
    274e:	fc 01       	movw	r30, r24
    2750:	e2 0f       	add	r30, r18
    2752:	f3 1f       	adc	r31, r19
    2754:	80 81       	ld	r24, Z
    2756:	0e 94 72 13 	call	0x26e4	; 0x26e4 <UART_sendByte>
		i++;
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	8f 5f       	subi	r24, 0xFF	; 255
    275e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	28 2f       	mov	r18, r24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	9b 81       	ldd	r25, Y+3	; 0x03
    276a:	fc 01       	movw	r30, r24
    276c:	e2 0f       	add	r30, r18
    276e:	f3 1f       	adc	r31, r19
    2770:	80 81       	ld	r24, Z
    2772:	88 23       	and	r24, r24
    2774:	39 f7       	brne	.-50     	; 0x2744 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	08 95       	ret

00002782 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2782:	0f 93       	push	r16
    2784:	1f 93       	push	r17
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	00 d0       	rcall	.+0      	; 0x278c <UART_receiveString+0xa>
    278c:	0f 92       	push	r0
    278e:	cd b7       	in	r28, 0x3d	; 61
    2790:	de b7       	in	r29, 0x3e	; 62
    2792:	9b 83       	std	Y+3, r25	; 0x03
    2794:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2796:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	28 2f       	mov	r18, r24
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	9b 81       	ldd	r25, Y+3	; 0x03
    27a2:	8c 01       	movw	r16, r24
    27a4:	02 0f       	add	r16, r18
    27a6:	13 1f       	adc	r17, r19
    27a8:	0e 94 89 13 	call	0x2712	; 0x2712 <UART_receiveByte>
    27ac:	f8 01       	movw	r30, r16
    27ae:	80 83       	st	Z, r24
    27b0:	0f c0       	rjmp	.+30     	; 0x27d0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	8f 5f       	subi	r24, 0xFF	; 255
    27b6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	28 2f       	mov	r18, r24
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	8a 81       	ldd	r24, Y+2	; 0x02
    27c0:	9b 81       	ldd	r25, Y+3	; 0x03
    27c2:	8c 01       	movw	r16, r24
    27c4:	02 0f       	add	r16, r18
    27c6:	13 1f       	adc	r17, r19
    27c8:	0e 94 89 13 	call	0x2712	; 0x2712 <UART_receiveByte>
    27cc:	f8 01       	movw	r30, r16
    27ce:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	28 2f       	mov	r18, r24
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	8a 81       	ldd	r24, Y+2	; 0x02
    27d8:	9b 81       	ldd	r25, Y+3	; 0x03
    27da:	fc 01       	movw	r30, r24
    27dc:	e2 0f       	add	r30, r18
    27de:	f3 1f       	adc	r31, r19
    27e0:	80 81       	ld	r24, Z
    27e2:	83 32       	cpi	r24, 0x23	; 35
    27e4:	31 f7       	brne	.-52     	; 0x27b2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	28 2f       	mov	r18, r24
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	8a 81       	ldd	r24, Y+2	; 0x02
    27ee:	9b 81       	ldd	r25, Y+3	; 0x03
    27f0:	fc 01       	movw	r30, r24
    27f2:	e2 0f       	add	r30, r18
    27f4:	f3 1f       	adc	r31, r19
    27f6:	10 82       	st	Z, r1
}
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	cf 91       	pop	r28
    2800:	df 91       	pop	r29
    2802:	1f 91       	pop	r17
    2804:	0f 91       	pop	r16
    2806:	08 95       	ret

00002808 <__udivmodsi4>:
    2808:	a1 e2       	ldi	r26, 0x21	; 33
    280a:	1a 2e       	mov	r1, r26
    280c:	aa 1b       	sub	r26, r26
    280e:	bb 1b       	sub	r27, r27
    2810:	fd 01       	movw	r30, r26
    2812:	0d c0       	rjmp	.+26     	; 0x282e <__udivmodsi4_ep>

00002814 <__udivmodsi4_loop>:
    2814:	aa 1f       	adc	r26, r26
    2816:	bb 1f       	adc	r27, r27
    2818:	ee 1f       	adc	r30, r30
    281a:	ff 1f       	adc	r31, r31
    281c:	a2 17       	cp	r26, r18
    281e:	b3 07       	cpc	r27, r19
    2820:	e4 07       	cpc	r30, r20
    2822:	f5 07       	cpc	r31, r21
    2824:	20 f0       	brcs	.+8      	; 0x282e <__udivmodsi4_ep>
    2826:	a2 1b       	sub	r26, r18
    2828:	b3 0b       	sbc	r27, r19
    282a:	e4 0b       	sbc	r30, r20
    282c:	f5 0b       	sbc	r31, r21

0000282e <__udivmodsi4_ep>:
    282e:	66 1f       	adc	r22, r22
    2830:	77 1f       	adc	r23, r23
    2832:	88 1f       	adc	r24, r24
    2834:	99 1f       	adc	r25, r25
    2836:	1a 94       	dec	r1
    2838:	69 f7       	brne	.-38     	; 0x2814 <__udivmodsi4_loop>
    283a:	60 95       	com	r22
    283c:	70 95       	com	r23
    283e:	80 95       	com	r24
    2840:	90 95       	com	r25
    2842:	9b 01       	movw	r18, r22
    2844:	ac 01       	movw	r20, r24
    2846:	bd 01       	movw	r22, r26
    2848:	cf 01       	movw	r24, r30
    284a:	08 95       	ret

0000284c <__prologue_saves__>:
    284c:	2f 92       	push	r2
    284e:	3f 92       	push	r3
    2850:	4f 92       	push	r4
    2852:	5f 92       	push	r5
    2854:	6f 92       	push	r6
    2856:	7f 92       	push	r7
    2858:	8f 92       	push	r8
    285a:	9f 92       	push	r9
    285c:	af 92       	push	r10
    285e:	bf 92       	push	r11
    2860:	cf 92       	push	r12
    2862:	df 92       	push	r13
    2864:	ef 92       	push	r14
    2866:	ff 92       	push	r15
    2868:	0f 93       	push	r16
    286a:	1f 93       	push	r17
    286c:	cf 93       	push	r28
    286e:	df 93       	push	r29
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
    2874:	ca 1b       	sub	r28, r26
    2876:	db 0b       	sbc	r29, r27
    2878:	0f b6       	in	r0, 0x3f	; 63
    287a:	f8 94       	cli
    287c:	de bf       	out	0x3e, r29	; 62
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	cd bf       	out	0x3d, r28	; 61
    2882:	09 94       	ijmp

00002884 <__epilogue_restores__>:
    2884:	2a 88       	ldd	r2, Y+18	; 0x12
    2886:	39 88       	ldd	r3, Y+17	; 0x11
    2888:	48 88       	ldd	r4, Y+16	; 0x10
    288a:	5f 84       	ldd	r5, Y+15	; 0x0f
    288c:	6e 84       	ldd	r6, Y+14	; 0x0e
    288e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2890:	8c 84       	ldd	r8, Y+12	; 0x0c
    2892:	9b 84       	ldd	r9, Y+11	; 0x0b
    2894:	aa 84       	ldd	r10, Y+10	; 0x0a
    2896:	b9 84       	ldd	r11, Y+9	; 0x09
    2898:	c8 84       	ldd	r12, Y+8	; 0x08
    289a:	df 80       	ldd	r13, Y+7	; 0x07
    289c:	ee 80       	ldd	r14, Y+6	; 0x06
    289e:	fd 80       	ldd	r15, Y+5	; 0x05
    28a0:	0c 81       	ldd	r16, Y+4	; 0x04
    28a2:	1b 81       	ldd	r17, Y+3	; 0x03
    28a4:	aa 81       	ldd	r26, Y+2	; 0x02
    28a6:	b9 81       	ldd	r27, Y+1	; 0x01
    28a8:	ce 0f       	add	r28, r30
    28aa:	d1 1d       	adc	r29, r1
    28ac:	0f b6       	in	r0, 0x3f	; 63
    28ae:	f8 94       	cli
    28b0:	de bf       	out	0x3e, r29	; 62
    28b2:	0f be       	out	0x3f, r0	; 63
    28b4:	cd bf       	out	0x3d, r28	; 61
    28b6:	ed 01       	movw	r28, r26
    28b8:	08 95       	ret

000028ba <itoa>:
    28ba:	fb 01       	movw	r30, r22
    28bc:	9f 01       	movw	r18, r30
    28be:	e8 94       	clt
    28c0:	42 30       	cpi	r20, 0x02	; 2
    28c2:	c4 f0       	brlt	.+48     	; 0x28f4 <itoa+0x3a>
    28c4:	45 32       	cpi	r20, 0x25	; 37
    28c6:	b4 f4       	brge	.+44     	; 0x28f4 <itoa+0x3a>
    28c8:	4a 30       	cpi	r20, 0x0A	; 10
    28ca:	29 f4       	brne	.+10     	; 0x28d6 <itoa+0x1c>
    28cc:	97 fb       	bst	r25, 7
    28ce:	1e f4       	brtc	.+6      	; 0x28d6 <itoa+0x1c>
    28d0:	90 95       	com	r25
    28d2:	81 95       	neg	r24
    28d4:	9f 4f       	sbci	r25, 0xFF	; 255
    28d6:	64 2f       	mov	r22, r20
    28d8:	77 27       	eor	r23, r23
    28da:	0e 94 8e 14 	call	0x291c	; 0x291c <__udivmodhi4>
    28de:	80 5d       	subi	r24, 0xD0	; 208
    28e0:	8a 33       	cpi	r24, 0x3A	; 58
    28e2:	0c f0       	brlt	.+2      	; 0x28e6 <itoa+0x2c>
    28e4:	89 5d       	subi	r24, 0xD9	; 217
    28e6:	81 93       	st	Z+, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	a1 f7       	brne	.-24     	; 0x28d6 <itoa+0x1c>
    28ee:	16 f4       	brtc	.+4      	; 0x28f4 <itoa+0x3a>
    28f0:	5d e2       	ldi	r21, 0x2D	; 45
    28f2:	51 93       	st	Z+, r21
    28f4:	10 82       	st	Z, r1
    28f6:	c9 01       	movw	r24, r18
    28f8:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <strrev>

000028fc <strrev>:
    28fc:	dc 01       	movw	r26, r24
    28fe:	fc 01       	movw	r30, r24
    2900:	67 2f       	mov	r22, r23
    2902:	71 91       	ld	r23, Z+
    2904:	77 23       	and	r23, r23
    2906:	e1 f7       	brne	.-8      	; 0x2900 <strrev+0x4>
    2908:	32 97       	sbiw	r30, 0x02	; 2
    290a:	04 c0       	rjmp	.+8      	; 0x2914 <strrev+0x18>
    290c:	7c 91       	ld	r23, X
    290e:	6d 93       	st	X+, r22
    2910:	70 83       	st	Z, r23
    2912:	62 91       	ld	r22, -Z
    2914:	ae 17       	cp	r26, r30
    2916:	bf 07       	cpc	r27, r31
    2918:	c8 f3       	brcs	.-14     	; 0x290c <strrev+0x10>
    291a:	08 95       	ret

0000291c <__udivmodhi4>:
    291c:	aa 1b       	sub	r26, r26
    291e:	bb 1b       	sub	r27, r27
    2920:	51 e1       	ldi	r21, 0x11	; 17
    2922:	07 c0       	rjmp	.+14     	; 0x2932 <__udivmodhi4_ep>

00002924 <__udivmodhi4_loop>:
    2924:	aa 1f       	adc	r26, r26
    2926:	bb 1f       	adc	r27, r27
    2928:	a6 17       	cp	r26, r22
    292a:	b7 07       	cpc	r27, r23
    292c:	10 f0       	brcs	.+4      	; 0x2932 <__udivmodhi4_ep>
    292e:	a6 1b       	sub	r26, r22
    2930:	b7 0b       	sbc	r27, r23

00002932 <__udivmodhi4_ep>:
    2932:	88 1f       	adc	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	5a 95       	dec	r21
    2938:	a9 f7       	brne	.-22     	; 0x2924 <__udivmodhi4_loop>
    293a:	80 95       	com	r24
    293c:	90 95       	com	r25
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	08 95       	ret

00002944 <_exit>:
    2944:	f8 94       	cli

00002946 <__stop_program>:
    2946:	ff cf       	rjmp	.-2      	; 0x2946 <__stop_program>
