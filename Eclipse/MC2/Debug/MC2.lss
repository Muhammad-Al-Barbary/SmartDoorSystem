
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002508  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002508  0000259c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800078  00800078  000025b4  2**0
                  ALLOC
  3 .stab         000024a8  00000000  00000000  000025b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001413  00000000  00000000  00004a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000611f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008c53  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009ded  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a5bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__vector_3>
      10:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <__vector_6>
      1c:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <__vector_7>
      20:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <__vector_8>
      24:	0c 94 e4 0c 	jmp	0x19c8	; 0x19c8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 82 12 	jmp	0x2504	; 0x2504 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void Motor(void);
void WrongPass();

uint8 g_password[10];

int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6e 97       	sbiw	r28, 0x1e	; 30
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24
	uint8 password_flag;
	uint8 key;
	DcMotor_Init();
     b68:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <DcMotor_Init>
	TIMER_ConfigType TimerConfig={TIMER1,COMPARE,F_CPU_1024,OCN_DISCONNECTED,COMPARE_A,0,4000};
     b6c:	9e 01       	movw	r18, r28
     b6e:	2d 5f       	subi	r18, 0xFD	; 253
     b70:	3f 4f       	sbci	r19, 0xFF	; 255
     b72:	3e 8b       	std	Y+22, r19	; 0x16
     b74:	2d 8b       	std	Y+21, r18	; 0x15
     b76:	8f e6       	ldi	r24, 0x6F	; 111
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	98 8f       	std	Y+24, r25	; 0x18
     b7c:	8f 8b       	std	Y+23, r24	; 0x17
     b7e:	99 e0       	ldi	r25, 0x09	; 9
     b80:	99 8f       	std	Y+25, r25	; 0x19
     b82:	ef 89       	ldd	r30, Y+23	; 0x17
     b84:	f8 8d       	ldd	r31, Y+24	; 0x18
     b86:	00 80       	ld	r0, Z
     b88:	2f 89       	ldd	r18, Y+23	; 0x17
     b8a:	38 8d       	ldd	r19, Y+24	; 0x18
     b8c:	2f 5f       	subi	r18, 0xFF	; 255
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	38 8f       	std	Y+24, r19	; 0x18
     b92:	2f 8b       	std	Y+23, r18	; 0x17
     b94:	ed 89       	ldd	r30, Y+21	; 0x15
     b96:	fe 89       	ldd	r31, Y+22	; 0x16
     b98:	00 82       	st	Z, r0
     b9a:	2d 89       	ldd	r18, Y+21	; 0x15
     b9c:	3e 89       	ldd	r19, Y+22	; 0x16
     b9e:	2f 5f       	subi	r18, 0xFF	; 255
     ba0:	3f 4f       	sbci	r19, 0xFF	; 255
     ba2:	3e 8b       	std	Y+22, r19	; 0x16
     ba4:	2d 8b       	std	Y+21, r18	; 0x15
     ba6:	39 8d       	ldd	r19, Y+25	; 0x19
     ba8:	31 50       	subi	r19, 0x01	; 1
     baa:	39 8f       	std	Y+25, r19	; 0x19
     bac:	89 8d       	ldd	r24, Y+25	; 0x19
     bae:	88 23       	and	r24, r24
     bb0:	41 f7       	brne	.-48     	; 0xb82 <main+0x3c>
	UART_Config uartConfig = {SIZE_8,DISABLED,BIT_1,9600};
     bb2:	fe 01       	movw	r30, r28
     bb4:	3c 96       	adiw	r30, 0x0c	; 12
     bb6:	fb 8f       	std	Y+27, r31	; 0x1b
     bb8:	ea 8f       	std	Y+26, r30	; 0x1a
     bba:	28 e6       	ldi	r18, 0x68	; 104
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	3d 8f       	std	Y+29, r19	; 0x1d
     bc0:	2c 8f       	std	Y+28, r18	; 0x1c
     bc2:	37 e0       	ldi	r19, 0x07	; 7
     bc4:	3e 8f       	std	Y+30, r19	; 0x1e
     bc6:	ec 8d       	ldd	r30, Y+28	; 0x1c
     bc8:	fd 8d       	ldd	r31, Y+29	; 0x1d
     bca:	00 80       	ld	r0, Z
     bcc:	2c 8d       	ldd	r18, Y+28	; 0x1c
     bce:	3d 8d       	ldd	r19, Y+29	; 0x1d
     bd0:	2f 5f       	subi	r18, 0xFF	; 255
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	3d 8f       	std	Y+29, r19	; 0x1d
     bd6:	2c 8f       	std	Y+28, r18	; 0x1c
     bd8:	ea 8d       	ldd	r30, Y+26	; 0x1a
     bda:	fb 8d       	ldd	r31, Y+27	; 0x1b
     bdc:	00 82       	st	Z, r0
     bde:	2a 8d       	ldd	r18, Y+26	; 0x1a
     be0:	3b 8d       	ldd	r19, Y+27	; 0x1b
     be2:	2f 5f       	subi	r18, 0xFF	; 255
     be4:	3f 4f       	sbci	r19, 0xFF	; 255
     be6:	3b 8f       	std	Y+27, r19	; 0x1b
     be8:	2a 8f       	std	Y+26, r18	; 0x1a
     bea:	3e 8d       	ldd	r19, Y+30	; 0x1e
     bec:	31 50       	subi	r19, 0x01	; 1
     bee:	3e 8f       	std	Y+30, r19	; 0x1e
     bf0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bf2:	88 23       	and	r24, r24
     bf4:	41 f7       	brne	.-48     	; 0xbc6 <main+0x80>
	UART_init(&uartConfig);
     bf6:	ce 01       	movw	r24, r28
     bf8:	0c 96       	adiw	r24, 0x0c	; 12
     bfa:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <UART_init>
	BUZZER_init();
     bfe:	0e 94 63 07 	call	0xec6	; 0xec6 <BUZZER_init>

	SetPassword();
     c02:	0e 94 4f 06 	call	0xc9e	; 0xc9e <SetPassword>

	EEPROM_readString(0x0008,g_password);
     c06:	2f e7       	ldi	r18, 0x7F	; 127
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	88 e0       	ldi	r24, 0x08	; 8
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	b9 01       	movw	r22, r18
     c10:	0e 94 56 08 	call	0x10ac	; 0x10ac <EEPROM_readString>

	while(1){
		UART_sendByte(55);
     c14:	87 e3       	ldi	r24, 0x37	; 55
     c16:	0e 94 97 11 	call	0x232e	; 0x232e <UART_sendByte>
		key=UART_receiveByte();
     c1a:	0e 94 ae 11 	call	0x235c	; 0x235c <UART_receiveByte>
     c1e:	89 83       	std	Y+1, r24	; 0x01
		password_flag=CheckReceivedPassword();
     c20:	0e 94 64 06 	call	0xcc8	; 0xcc8 <CheckReceivedPassword>
     c24:	8a 83       	std	Y+2, r24	; 0x02
		while(UART_receiveByte()!=20);
     c26:	0e 94 ae 11 	call	0x235c	; 0x235c <UART_receiveByte>
     c2a:	84 31       	cpi	r24, 0x14	; 20
     c2c:	e1 f7       	brne	.-8      	; 0xc26 <main+0xe0>
		UART_sendByte(password_flag);
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	0e 94 97 11 	call	0x232e	; 0x232e <UART_sendByte>

		switch(key){
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	e8 2f       	mov	r30, r24
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	fc 8b       	std	Y+20, r31	; 0x14
     c3c:	eb 8b       	std	Y+19, r30	; 0x13
     c3e:	2b 89       	ldd	r18, Y+19	; 0x13
     c40:	3c 89       	ldd	r19, Y+20	; 0x14
     c42:	21 30       	cpi	r18, 0x01	; 1
     c44:	31 05       	cpc	r19, r1
     c46:	31 f0       	breq	.+12     	; 0xc54 <main+0x10e>
     c48:	8b 89       	ldd	r24, Y+19	; 0x13
     c4a:	9c 89       	ldd	r25, Y+20	; 0x14
     c4c:	82 30       	cpi	r24, 0x02	; 2
     c4e:	91 05       	cpc	r25, r1
     c50:	b1 f0       	breq	.+44     	; 0xc7e <main+0x138>
     c52:	e0 cf       	rjmp	.-64     	; 0xc14 <main+0xce>
		case 1:
			if (password_flag){
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	88 23       	and	r24, r24
     c58:	79 f0       	breq	.+30     	; 0xc78 <main+0x132>
				TIMER_setCallBackT1(&Motor);
     c5a:	85 e2       	ldi	r24, 0x25	; 37
     c5c:	97 e0       	ldi	r25, 0x07	; 7
     c5e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <TIMER_setCallBackT1>
				timer_counter=0;
     c62:	10 92 78 00 	sts	0x0078, r1
				TIMER_init(&TimerConfig);
     c66:	ce 01       	movw	r24, r28
     c68:	03 96       	adiw	r24, 0x03	; 3
     c6a:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <TIMER_init>
				while(timer_counter<34);
     c6e:	80 91 78 00 	lds	r24, 0x0078
     c72:	82 32       	cpi	r24, 0x22	; 34
     c74:	e0 f3       	brcs	.-8      	; 0xc6e <main+0x128>
     c76:	ce cf       	rjmp	.-100    	; 0xc14 <main+0xce>
			}
			else{
				WrongPass();
     c78:	0e 94 9c 06 	call	0xd38	; 0xd38 <WrongPass>
     c7c:	cb cf       	rjmp	.-106    	; 0xc14 <main+0xce>
			}
			break;
		case 2:
			if (password_flag){
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	88 23       	and	r24, r24
     c82:	51 f0       	breq	.+20     	; 0xc98 <main+0x152>
				SetPassword();
     c84:	0e 94 4f 06 	call	0xc9e	; 0xc9e <SetPassword>
				EEPROM_readString(0x0008,g_password);
     c88:	2f e7       	ldi	r18, 0x7F	; 127
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	88 e0       	ldi	r24, 0x08	; 8
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	b9 01       	movw	r22, r18
     c92:	0e 94 56 08 	call	0x10ac	; 0x10ac <EEPROM_readString>
     c96:	be cf       	rjmp	.-132    	; 0xc14 <main+0xce>
			}
			else{
				WrongPass();
     c98:	0e 94 9c 06 	call	0xd38	; 0xd38 <WrongPass>
     c9c:	bb cf       	rjmp	.-138    	; 0xc14 <main+0xce>

00000c9e <SetPassword>:
			break;
		}
	}
}

void SetPassword(){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(10);
     ca6:	8a e0       	ldi	r24, 0x0A	; 10
     ca8:	0e 94 97 11 	call	0x232e	; 0x232e <UART_sendByte>
	UART_receiveString(g_password);
     cac:	8f e7       	ldi	r24, 0x7F	; 127
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 e6 11 	call	0x23cc	; 0x23cc <UART_receiveString>
	EEPROM_writeString(0x0008,g_password);
     cb4:	2f e7       	ldi	r18, 0x7F	; 127
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	88 e0       	ldi	r24, 0x08	; 8
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	b9 01       	movw	r22, r18
     cbe:	0e 94 28 08 	call	0x1050	; 0x1050 <EEPROM_writeString>
}
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	08 95       	ret

00000cc8 <CheckReceivedPassword>:

uint8 CheckReceivedPassword(){
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	2c 97       	sbiw	r28, 0x0c	; 12
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	uint8 password_try[10];
	uint8 password_flag=1;
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	89 83       	std	Y+1, r24	; 0x01

	UART_sendByte(111);
     ce0:	8f e6       	ldi	r24, 0x6F	; 111
     ce2:	0e 94 97 11 	call	0x232e	; 0x232e <UART_sendByte>
	UART_receiveString(password_try);
     ce6:	ce 01       	movw	r24, r28
     ce8:	03 96       	adiw	r24, 0x03	; 3
     cea:	0e 94 e6 11 	call	0x23cc	; 0x23cc <UART_receiveString>
	for (i=0;i<5;i++){
     cee:	1a 82       	std	Y+2, r1	; 0x02
     cf0:	16 c0       	rjmp	.+44     	; 0xd1e <CheckReceivedPassword+0x56>
		if (password_try[i] != g_password[i])
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	ce 01       	movw	r24, r28
     cfa:	03 96       	adiw	r24, 0x03	; 3
     cfc:	fc 01       	movw	r30, r24
     cfe:	e2 0f       	add	r30, r18
     d00:	f3 1f       	adc	r31, r19
     d02:	20 81       	ld	r18, Z
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	88 2f       	mov	r24, r24
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	fc 01       	movw	r30, r24
     d0c:	e1 58       	subi	r30, 0x81	; 129
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	80 81       	ld	r24, Z
     d12:	28 17       	cp	r18, r24
     d14:	09 f0       	breq	.+2      	; 0xd18 <CheckReceivedPassword+0x50>
			password_flag=0;
     d16:	19 82       	std	Y+1, r1	; 0x01
	uint8 password_try[10];
	uint8 password_flag=1;

	UART_sendByte(111);
	UART_receiveString(password_try);
	for (i=0;i<5;i++){
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	8f 5f       	subi	r24, 0xFF	; 255
     d1c:	8a 83       	std	Y+2, r24	; 0x02
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	85 30       	cpi	r24, 0x05	; 5
     d22:	38 f3       	brcs	.-50     	; 0xcf2 <CheckReceivedPassword+0x2a>
		if (password_try[i] != g_password[i])
			password_flag=0;
	}

	return password_flag;
     d24:	89 81       	ldd	r24, Y+1	; 0x01
}
     d26:	2c 96       	adiw	r28, 0x0c	; 12
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	08 95       	ret

00000d38 <WrongPass>:

void WrongPass(){
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	2e 97       	sbiw	r28, 0x0e	; 14
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
	BUZZER_on();
     d4c:	0e 94 6f 07 	call	0xede	; 0xede <BUZZER_on>
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	aa ef       	ldi	r26, 0xFA	; 250
     d56:	b4 e4       	ldi	r27, 0x44	; 68
     d58:	8b 87       	std	Y+11, r24	; 0x0b
     d5a:	9c 87       	std	Y+12, r25	; 0x0c
     d5c:	ad 87       	std	Y+13, r26	; 0x0d
     d5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d60:	6b 85       	ldd	r22, Y+11	; 0x0b
     d62:	7c 85       	ldd	r23, Y+12	; 0x0c
     d64:	8d 85       	ldd	r24, Y+13	; 0x0d
     d66:	9e 85       	ldd	r25, Y+14	; 0x0e
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	4a ef       	ldi	r20, 0xFA	; 250
     d6e:	54 e4       	ldi	r21, 0x44	; 68
     d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d74:	dc 01       	movw	r26, r24
     d76:	cb 01       	movw	r24, r22
     d78:	8f 83       	std	Y+7, r24	; 0x07
     d7a:	98 87       	std	Y+8, r25	; 0x08
     d7c:	a9 87       	std	Y+9, r26	; 0x09
     d7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d80:	6f 81       	ldd	r22, Y+7	; 0x07
     d82:	78 85       	ldd	r23, Y+8	; 0x08
     d84:	89 85       	ldd	r24, Y+9	; 0x09
     d86:	9a 85       	ldd	r25, Y+10	; 0x0a
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	40 e8       	ldi	r20, 0x80	; 128
     d8e:	5f e3       	ldi	r21, 0x3F	; 63
     d90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d94:	88 23       	and	r24, r24
     d96:	2c f4       	brge	.+10     	; 0xda2 <WrongPass+0x6a>
		__ticks = 1;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	9e 83       	std	Y+6, r25	; 0x06
     d9e:	8d 83       	std	Y+5, r24	; 0x05
     da0:	3f c0       	rjmp	.+126    	; 0xe20 <WrongPass+0xe8>
	else if (__tmp > 65535)
     da2:	6f 81       	ldd	r22, Y+7	; 0x07
     da4:	78 85       	ldd	r23, Y+8	; 0x08
     da6:	89 85       	ldd	r24, Y+9	; 0x09
     da8:	9a 85       	ldd	r25, Y+10	; 0x0a
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	3f ef       	ldi	r19, 0xFF	; 255
     dae:	4f e7       	ldi	r20, 0x7F	; 127
     db0:	57 e4       	ldi	r21, 0x47	; 71
     db2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     db6:	18 16       	cp	r1, r24
     db8:	4c f5       	brge	.+82     	; 0xe0c <WrongPass+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dba:	6b 85       	ldd	r22, Y+11	; 0x0b
     dbc:	7c 85       	ldd	r23, Y+12	; 0x0c
     dbe:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc0:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e2       	ldi	r20, 0x20	; 32
     dc8:	51 e4       	ldi	r21, 0x41	; 65
     dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	bc 01       	movw	r22, r24
     dd4:	cd 01       	movw	r24, r26
     dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	9e 83       	std	Y+6, r25	; 0x06
     de0:	8d 83       	std	Y+5, r24	; 0x05
     de2:	0f c0       	rjmp	.+30     	; 0xe02 <WrongPass+0xca>
     de4:	88 ec       	ldi	r24, 0xC8	; 200
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	9c 83       	std	Y+4, r25	; 0x04
     dea:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	9c 81       	ldd	r25, Y+4	; 0x04
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	f1 f7       	brne	.-4      	; 0xdf0 <WrongPass+0xb8>
     df4:	9c 83       	std	Y+4, r25	; 0x04
     df6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df8:	8d 81       	ldd	r24, Y+5	; 0x05
     dfa:	9e 81       	ldd	r25, Y+6	; 0x06
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	9e 83       	std	Y+6, r25	; 0x06
     e00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e02:	8d 81       	ldd	r24, Y+5	; 0x05
     e04:	9e 81       	ldd	r25, Y+6	; 0x06
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	69 f7       	brne	.-38     	; 0xde4 <WrongPass+0xac>
     e0a:	14 c0       	rjmp	.+40     	; 0xe34 <WrongPass+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0c:	6f 81       	ldd	r22, Y+7	; 0x07
     e0e:	78 85       	ldd	r23, Y+8	; 0x08
     e10:	89 85       	ldd	r24, Y+9	; 0x09
     e12:	9a 85       	ldd	r25, Y+10	; 0x0a
     e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	9e 83       	std	Y+6, r25	; 0x06
     e1e:	8d 83       	std	Y+5, r24	; 0x05
     e20:	8d 81       	ldd	r24, Y+5	; 0x05
     e22:	9e 81       	ldd	r25, Y+6	; 0x06
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	9a 81       	ldd	r25, Y+2	; 0x02
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <WrongPass+0xf4>
     e30:	9a 83       	std	Y+2, r25	; 0x02
     e32:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	BUZZER_off();
     e34:	0e 94 7b 07 	call	0xef6	; 0xef6 <BUZZER_off>
}
     e38:	2e 96       	adiw	r28, 0x0e	; 14
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <Motor>:

void Motor(void){
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	timer_counter++;
     e52:	80 91 78 00 	lds	r24, 0x0078
     e56:	8f 5f       	subi	r24, 0xFF	; 255
     e58:	80 93 78 00 	sts	0x0078, r24
	if (timer_counter==1){
     e5c:	80 91 78 00 	lds	r24, 0x0078
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	41 f4       	brne	.+16     	; 0xe74 <Motor+0x2a>
		DcMotor_Rotate(CW);
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	0e 94 9f 0c 	call	0x193e	; 0x193e <DcMotor_Rotate>
		UART_sendByte(timer_counter);
     e6a:	80 91 78 00 	lds	r24, 0x0078
     e6e:	0e 94 97 11 	call	0x232e	; 0x232e <UART_sendByte>
     e72:	26 c0       	rjmp	.+76     	; 0xec0 <Motor+0x76>
	}
	else if (timer_counter==6){
     e74:	80 91 78 00 	lds	r24, 0x0078
     e78:	86 30       	cpi	r24, 0x06	; 6
     e7a:	41 f4       	brne	.+16     	; 0xe8c <Motor+0x42>
		DcMotor_Rotate(stop);
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	0e 94 9f 0c 	call	0x193e	; 0x193e <DcMotor_Rotate>
		UART_sendByte(timer_counter);
     e82:	80 91 78 00 	lds	r24, 0x0078
     e86:	0e 94 97 11 	call	0x232e	; 0x232e <UART_sendByte>
     e8a:	1a c0       	rjmp	.+52     	; 0xec0 <Motor+0x76>
	}
	else if (timer_counter==29){
     e8c:	80 91 78 00 	lds	r24, 0x0078
     e90:	8d 31       	cpi	r24, 0x1D	; 29
     e92:	41 f4       	brne	.+16     	; 0xea4 <Motor+0x5a>
		DcMotor_Rotate(A_CW);
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	0e 94 9f 0c 	call	0x193e	; 0x193e <DcMotor_Rotate>
		UART_sendByte(timer_counter);
     e9a:	80 91 78 00 	lds	r24, 0x0078
     e9e:	0e 94 97 11 	call	0x232e	; 0x232e <UART_sendByte>
     ea2:	0e c0       	rjmp	.+28     	; 0xec0 <Motor+0x76>
	}
	else if(timer_counter==34)
     ea4:	80 91 78 00 	lds	r24, 0x0078
     ea8:	82 32       	cpi	r24, 0x22	; 34
     eaa:	51 f4       	brne	.+20     	; 0xec0 <Motor+0x76>
	{
		DcMotor_Rotate(stop);
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	0e 94 9f 0c 	call	0x193e	; 0x193e <DcMotor_Rotate>
		UART_sendByte(timer_counter);
     eb2:	80 91 78 00 	lds	r24, 0x0078
     eb6:	0e 94 97 11 	call	0x232e	; 0x232e <UART_sendByte>
		TIMER_DeInit(TIMER1);
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	0e 94 a0 10 	call	0x2140	; 0x2140 <TIMER_DeInit>
	}
}
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <BUZZER_init>:
 *******************************************************************************/
/*
 * Description:
 * setup the buzzer pin direction
 */
void BUZZER_init(void){
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	41 e0       	ldi	r20, 0x01	; 1
     ed4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <GPIO_setupPinDirection>
}
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <BUZZER_on>:

/*
 * Description:
 * turn on the buzzer
 */
void BUZZER_on(void){
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	41 e0       	ldi	r20, 0x01	; 1
     eec:	0e 94 83 09 	call	0x1306	; 0x1306 <GPIO_writePin>
}
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <BUZZER_off>:

/*
 * Description:
 * turn off the buzzer
 */
void BUZZER_off(void){
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	40 e0       	ldi	r20, 0x00	; 0
     f04:	0e 94 83 09 	call	0x1306	; 0x1306 <GPIO_writePin>
}
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "i2c.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	00 d0       	rcall	.+0      	; 0xf14 <EEPROM_writeByte+0x6>
     f14:	00 d0       	rcall	.+0      	; 0xf16 <EEPROM_writeByte+0x8>
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	9a 83       	std	Y+2, r25	; 0x02
     f1c:	89 83       	std	Y+1, r24	; 0x01
     f1e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     f20:	0e 94 13 0c 	call	0x1826	; 0x1826 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     f24:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <TWI_getStatus>
     f28:	88 30       	cpi	r24, 0x08	; 8
     f2a:	11 f0       	breq	.+4      	; 0xf30 <EEPROM_writeByte+0x22>
        return ERROR;
     f2c:	1c 82       	std	Y+4, r1	; 0x04
     f2e:	28 c0       	rjmp	.+80     	; 0xf80 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
     f34:	80 70       	andi	r24, 0x00	; 0
     f36:	97 70       	andi	r25, 0x07	; 7
     f38:	88 0f       	add	r24, r24
     f3a:	89 2f       	mov	r24, r25
     f3c:	88 1f       	adc	r24, r24
     f3e:	99 0b       	sbc	r25, r25
     f40:	91 95       	neg	r25
     f42:	80 6a       	ori	r24, 0xA0	; 160
     f44:	0e 94 2e 0c 	call	0x185c	; 0x185c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     f48:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <TWI_getStatus>
     f4c:	88 31       	cpi	r24, 0x18	; 24
     f4e:	11 f0       	breq	.+4      	; 0xf54 <EEPROM_writeByte+0x46>
        return ERROR;
     f50:	1c 82       	std	Y+4, r1	; 0x04
     f52:	16 c0       	rjmp	.+44     	; 0xf80 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	0e 94 2e 0c 	call	0x185c	; 0x185c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     f5a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <TWI_getStatus>
     f5e:	88 32       	cpi	r24, 0x28	; 40
     f60:	11 f0       	breq	.+4      	; 0xf66 <EEPROM_writeByte+0x58>
        return ERROR;
     f62:	1c 82       	std	Y+4, r1	; 0x04
     f64:	0d c0       	rjmp	.+26     	; 0xf80 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	0e 94 2e 0c 	call	0x185c	; 0x185c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     f6c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <TWI_getStatus>
     f70:	88 32       	cpi	r24, 0x28	; 40
     f72:	11 f0       	breq	.+4      	; 0xf78 <EEPROM_writeByte+0x6a>
        return ERROR;
     f74:	1c 82       	std	Y+4, r1	; 0x04
     f76:	04 c0       	rjmp	.+8      	; 0xf80 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     f78:	0e 94 23 0c 	call	0x1846	; 0x1846 <TWI_stop>

    return SUCCESS;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	8c 83       	std	Y+4, r24	; 0x04
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
}
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	00 d0       	rcall	.+0      	; 0xf96 <EEPROM_readByte+0x6>
     f96:	00 d0       	rcall	.+0      	; 0xf98 <EEPROM_readByte+0x8>
     f98:	0f 92       	push	r0
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	9a 83       	std	Y+2, r25	; 0x02
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	7c 83       	std	Y+4, r23	; 0x04
     fa4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     fa6:	0e 94 13 0c 	call	0x1826	; 0x1826 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     faa:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <TWI_getStatus>
     fae:	88 30       	cpi	r24, 0x08	; 8
     fb0:	11 f0       	breq	.+4      	; 0xfb6 <EEPROM_readByte+0x26>
        return ERROR;
     fb2:	1d 82       	std	Y+5, r1	; 0x05
     fb4:	44 c0       	rjmp	.+136    	; 0x103e <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	9a 81       	ldd	r25, Y+2	; 0x02
     fba:	80 70       	andi	r24, 0x00	; 0
     fbc:	97 70       	andi	r25, 0x07	; 7
     fbe:	88 0f       	add	r24, r24
     fc0:	89 2f       	mov	r24, r25
     fc2:	88 1f       	adc	r24, r24
     fc4:	99 0b       	sbc	r25, r25
     fc6:	91 95       	neg	r25
     fc8:	80 6a       	ori	r24, 0xA0	; 160
     fca:	0e 94 2e 0c 	call	0x185c	; 0x185c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     fce:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <TWI_getStatus>
     fd2:	88 31       	cpi	r24, 0x18	; 24
     fd4:	11 f0       	breq	.+4      	; 0xfda <EEPROM_readByte+0x4a>
        return ERROR;
     fd6:	1d 82       	std	Y+5, r1	; 0x05
     fd8:	32 c0       	rjmp	.+100    	; 0x103e <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	0e 94 2e 0c 	call	0x185c	; 0x185c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     fe0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <TWI_getStatus>
     fe4:	88 32       	cpi	r24, 0x28	; 40
     fe6:	11 f0       	breq	.+4      	; 0xfec <EEPROM_readByte+0x5c>
        return ERROR;
     fe8:	1d 82       	std	Y+5, r1	; 0x05
     fea:	29 c0       	rjmp	.+82     	; 0x103e <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
     fec:	0e 94 13 0c 	call	0x1826	; 0x1826 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     ff0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <TWI_getStatus>
     ff4:	80 31       	cpi	r24, 0x10	; 16
     ff6:	11 f0       	breq	.+4      	; 0xffc <EEPROM_readByte+0x6c>
        return ERROR;
     ff8:	1d 82       	std	Y+5, r1	; 0x05
     ffa:	21 c0       	rjmp	.+66     	; 0x103e <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    1000:	80 70       	andi	r24, 0x00	; 0
    1002:	97 70       	andi	r25, 0x07	; 7
    1004:	88 0f       	add	r24, r24
    1006:	89 2f       	mov	r24, r25
    1008:	88 1f       	adc	r24, r24
    100a:	99 0b       	sbc	r25, r25
    100c:	91 95       	neg	r25
    100e:	81 6a       	ori	r24, 0xA1	; 161
    1010:	0e 94 2e 0c 	call	0x185c	; 0x185c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1014:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <TWI_getStatus>
    1018:	80 34       	cpi	r24, 0x40	; 64
    101a:	11 f0       	breq	.+4      	; 0x1020 <EEPROM_readByte+0x90>
        return ERROR;
    101c:	1d 82       	std	Y+5, r1	; 0x05
    101e:	0f c0       	rjmp	.+30     	; 0x103e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1020:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <TWI_readByteWithNACK>
    1024:	eb 81       	ldd	r30, Y+3	; 0x03
    1026:	fc 81       	ldd	r31, Y+4	; 0x04
    1028:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    102a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <TWI_getStatus>
    102e:	88 35       	cpi	r24, 0x58	; 88
    1030:	11 f0       	breq	.+4      	; 0x1036 <EEPROM_readByte+0xa6>
        return ERROR;
    1032:	1d 82       	std	Y+5, r1	; 0x05
    1034:	04 c0       	rjmp	.+8      	; 0x103e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1036:	0e 94 23 0c 	call	0x1846	; 0x1846 <TWI_stop>

    return SUCCESS;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	8d 83       	std	Y+5, r24	; 0x05
    103e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <EEPROM_writeString>:

void EEPROM_writeString(uint16 u16addr,uint8 *str){
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	00 d0       	rcall	.+0      	; 0x1056 <EEPROM_writeString+0x6>
    1056:	00 d0       	rcall	.+0      	; 0x1058 <EEPROM_writeString+0x8>
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	9a 83       	std	Y+2, r25	; 0x02
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	7c 83       	std	Y+4, r23	; 0x04
    1062:	6b 83       	std	Y+3, r22	; 0x03
    1064:	12 c0       	rjmp	.+36     	; 0x108a <EEPROM_writeString+0x3a>

	/*keep writing until the null character */
	while(*str != '\0'){

		EEPROM_writeByte(u16addr, *str);
    1066:	eb 81       	ldd	r30, Y+3	; 0x03
    1068:	fc 81       	ldd	r31, Y+4	; 0x04
    106a:	20 81       	ld	r18, Z
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	9a 81       	ldd	r25, Y+2	; 0x02
    1070:	62 2f       	mov	r22, r18
    1072:	0e 94 87 07 	call	0xf0e	; 0xf0e <EEPROM_writeByte>
		u16addr++;
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	9a 83       	std	Y+2, r25	; 0x02
    107e:	89 83       	std	Y+1, r24	; 0x01
		str++;
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	9c 81       	ldd	r25, Y+4	; 0x04
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	9c 83       	std	Y+4, r25	; 0x04
    1088:	8b 83       	std	Y+3, r24	; 0x03
}

void EEPROM_writeString(uint16 u16addr,uint8 *str){

	/*keep writing until the null character */
	while(*str != '\0'){
    108a:	eb 81       	ldd	r30, Y+3	; 0x03
    108c:	fc 81       	ldd	r31, Y+4	; 0x04
    108e:	80 81       	ld	r24, Z
    1090:	88 23       	and	r24, r24
    1092:	49 f7       	brne	.-46     	; 0x1066 <EEPROM_writeString+0x16>
		EEPROM_writeByte(u16addr, *str);
		u16addr++;
		str++;
	}
	/*write null character*/
	EEPROM_writeByte(u16addr, '\0');
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	9a 81       	ldd	r25, Y+2	; 0x02
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	0e 94 87 07 	call	0xf0e	; 0xf0e <EEPROM_writeByte>

}
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <EEPROM_readString>:

void EEPROM_readString(uint16 u16addr,uint8 *str){
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <EEPROM_readString+0x6>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <EEPROM_readString+0x8>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	9a 83       	std	Y+2, r25	; 0x02
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	7c 83       	std	Y+4, r23	; 0x04
    10be:	6b 83       	std	Y+3, r22	; 0x03

	do {
		EEPROM_readByte(u16addr, str);
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	9a 81       	ldd	r25, Y+2	; 0x02
    10c4:	2b 81       	ldd	r18, Y+3	; 0x03
    10c6:	3c 81       	ldd	r19, Y+4	; 0x04
    10c8:	b9 01       	movw	r22, r18
    10ca:	0e 94 c8 07 	call	0xf90	; 0xf90 <EEPROM_readByte>
		u16addr++;
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	9a 81       	ldd	r25, Y+2	; 0x02
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	9a 83       	std	Y+2, r25	; 0x02
    10d6:	89 83       	std	Y+1, r24	; 0x01
		str++;
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	9c 83       	std	Y+4, r25	; 0x04
    10e0:	8b 83       	std	Y+3, r24	; 0x03
	} while (*(str-1) !='\0');
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	9c 81       	ldd	r25, Y+4	; 0x04
    10e6:	fc 01       	movw	r30, r24
    10e8:	31 97       	sbiw	r30, 0x01	; 1
    10ea:	80 81       	ld	r24, Z
    10ec:	88 23       	and	r24, r24
    10ee:	41 f7       	brne	.-48     	; 0x10c0 <EEPROM_readString+0x14>

}
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <GPIO_setupPinDirection>:

/*
 * Description:
 * configure the pin direction input/output
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction){
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	27 97       	sbiw	r28, 0x07	; 7
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	cd bf       	out	0x3d, r28	; 61
    1112:	89 83       	std	Y+1, r24	; 0x01
    1114:	6a 83       	std	Y+2, r22	; 0x02
    1116:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>=NUM_OF_PORTS || pin_num>=NUM_OF_PINS)
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	84 30       	cpi	r24, 0x04	; 4
    111c:	08 f0       	brcs	.+2      	; 0x1120 <GPIO_setupPinDirection+0x22>
    111e:	ea c0       	rjmp	.+468    	; 0x12f4 <GPIO_setupPinDirection+0x1f6>
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	88 30       	cpi	r24, 0x08	; 8
    1124:	08 f0       	brcs	.+2      	; 0x1128 <GPIO_setupPinDirection+0x2a>
    1126:	e6 c0       	rjmp	.+460    	; 0x12f4 <GPIO_setupPinDirection+0x1f6>
	{
		/* Do nothing*/
	}
	else{
		if(direction)
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	88 23       	and	r24, r24
    112c:	09 f4       	brne	.+2      	; 0x1130 <GPIO_setupPinDirection+0x32>
    112e:	6f c0       	rjmp	.+222    	; 0x120e <GPIO_setupPinDirection+0x110>
		{
			switch(port_num)
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	3f 83       	std	Y+7, r19	; 0x07
    1138:	2e 83       	std	Y+6, r18	; 0x06
    113a:	8e 81       	ldd	r24, Y+6	; 0x06
    113c:	9f 81       	ldd	r25, Y+7	; 0x07
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	91 05       	cpc	r25, r1
    1142:	49 f1       	breq	.+82     	; 0x1196 <GPIO_setupPinDirection+0x98>
    1144:	2e 81       	ldd	r18, Y+6	; 0x06
    1146:	3f 81       	ldd	r19, Y+7	; 0x07
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 05       	cpc	r19, r1
    114c:	2c f4       	brge	.+10     	; 0x1158 <GPIO_setupPinDirection+0x5a>
    114e:	8e 81       	ldd	r24, Y+6	; 0x06
    1150:	9f 81       	ldd	r25, Y+7	; 0x07
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	61 f0       	breq	.+24     	; 0x116e <GPIO_setupPinDirection+0x70>
    1156:	ce c0       	rjmp	.+412    	; 0x12f4 <GPIO_setupPinDirection+0x1f6>
    1158:	2e 81       	ldd	r18, Y+6	; 0x06
    115a:	3f 81       	ldd	r19, Y+7	; 0x07
    115c:	22 30       	cpi	r18, 0x02	; 2
    115e:	31 05       	cpc	r19, r1
    1160:	71 f1       	breq	.+92     	; 0x11be <GPIO_setupPinDirection+0xc0>
    1162:	8e 81       	ldd	r24, Y+6	; 0x06
    1164:	9f 81       	ldd	r25, Y+7	; 0x07
    1166:	83 30       	cpi	r24, 0x03	; 3
    1168:	91 05       	cpc	r25, r1
    116a:	e9 f1       	breq	.+122    	; 0x11e6 <GPIO_setupPinDirection+0xe8>
    116c:	c3 c0       	rjmp	.+390    	; 0x12f4 <GPIO_setupPinDirection+0x1f6>
			{
			case PORTA_ID: SET_BIT(DDRA,pin_num);
    116e:	aa e3       	ldi	r26, 0x3A	; 58
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	ea e3       	ldi	r30, 0x3A	; 58
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	48 2f       	mov	r20, r24
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 2e       	mov	r0, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <GPIO_setupPinDirection+0x8e>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	0a 94       	dec	r0
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <GPIO_setupPinDirection+0x8a>
    1190:	84 2b       	or	r24, r20
    1192:	8c 93       	st	X, r24
    1194:	af c0       	rjmp	.+350    	; 0x12f4 <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTB_ID: SET_BIT(DDRB,pin_num);
    1196:	a7 e3       	ldi	r26, 0x37	; 55
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e7 e3       	ldi	r30, 0x37	; 55
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	48 2f       	mov	r20, r24
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 2e       	mov	r0, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <GPIO_setupPinDirection+0xb6>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	0a 94       	dec	r0
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <GPIO_setupPinDirection+0xb2>
    11b8:	84 2b       	or	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	9b c0       	rjmp	.+310    	; 0x12f4 <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTC_ID: SET_BIT(DDRC,pin_num);
    11be:	a4 e3       	ldi	r26, 0x34	; 52
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e4 e3       	ldi	r30, 0x34	; 52
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <GPIO_setupPinDirection+0xde>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <GPIO_setupPinDirection+0xda>
    11e0:	84 2b       	or	r24, r20
    11e2:	8c 93       	st	X, r24
    11e4:	87 c0       	rjmp	.+270    	; 0x12f4 <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTD_ID: SET_BIT(DDRD,pin_num);
    11e6:	a1 e3       	ldi	r26, 0x31	; 49
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e1 e3       	ldi	r30, 0x31	; 49
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <GPIO_setupPinDirection+0x106>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <GPIO_setupPinDirection+0x102>
    1208:	84 2b       	or	r24, r20
    120a:	8c 93       	st	X, r24
    120c:	73 c0       	rjmp	.+230    	; 0x12f4 <GPIO_setupPinDirection+0x1f6>
			break;
			}
		}
		else{
			switch(port_num)
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	3d 83       	std	Y+5, r19	; 0x05
    1216:	2c 83       	std	Y+4, r18	; 0x04
    1218:	8c 81       	ldd	r24, Y+4	; 0x04
    121a:	9d 81       	ldd	r25, Y+5	; 0x05
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	91 05       	cpc	r25, r1
    1220:	59 f1       	breq	.+86     	; 0x1278 <GPIO_setupPinDirection+0x17a>
    1222:	2c 81       	ldd	r18, Y+4	; 0x04
    1224:	3d 81       	ldd	r19, Y+5	; 0x05
    1226:	22 30       	cpi	r18, 0x02	; 2
    1228:	31 05       	cpc	r19, r1
    122a:	2c f4       	brge	.+10     	; 0x1236 <GPIO_setupPinDirection+0x138>
    122c:	8c 81       	ldd	r24, Y+4	; 0x04
    122e:	9d 81       	ldd	r25, Y+5	; 0x05
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	69 f0       	breq	.+26     	; 0x124e <GPIO_setupPinDirection+0x150>
    1234:	5f c0       	rjmp	.+190    	; 0x12f4 <GPIO_setupPinDirection+0x1f6>
    1236:	2c 81       	ldd	r18, Y+4	; 0x04
    1238:	3d 81       	ldd	r19, Y+5	; 0x05
    123a:	22 30       	cpi	r18, 0x02	; 2
    123c:	31 05       	cpc	r19, r1
    123e:	89 f1       	breq	.+98     	; 0x12a2 <GPIO_setupPinDirection+0x1a4>
    1240:	8c 81       	ldd	r24, Y+4	; 0x04
    1242:	9d 81       	ldd	r25, Y+5	; 0x05
    1244:	83 30       	cpi	r24, 0x03	; 3
    1246:	91 05       	cpc	r25, r1
    1248:	09 f4       	brne	.+2      	; 0x124c <GPIO_setupPinDirection+0x14e>
    124a:	40 c0       	rjmp	.+128    	; 0x12cc <GPIO_setupPinDirection+0x1ce>
    124c:	53 c0       	rjmp	.+166    	; 0x12f4 <GPIO_setupPinDirection+0x1f6>
			{
			case PORTA_ID: CLEAR_BIT(DDRA,pin_num);
    124e:	aa e3       	ldi	r26, 0x3A	; 58
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	ea e3       	ldi	r30, 0x3A	; 58
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <GPIO_setupPinDirection+0x16e>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <GPIO_setupPinDirection+0x16a>
    1270:	80 95       	com	r24
    1272:	84 23       	and	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	3e c0       	rjmp	.+124    	; 0x12f4 <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTB_ID: CLEAR_BIT(DDRB,pin_num);
    1278:	a7 e3       	ldi	r26, 0x37	; 55
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e7 e3       	ldi	r30, 0x37	; 55
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <GPIO_setupPinDirection+0x198>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <GPIO_setupPinDirection+0x194>
    129a:	80 95       	com	r24
    129c:	84 23       	and	r24, r20
    129e:	8c 93       	st	X, r24
    12a0:	29 c0       	rjmp	.+82     	; 0x12f4 <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTC_ID: CLEAR_BIT(DDRC,pin_num);
    12a2:	a4 e3       	ldi	r26, 0x34	; 52
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e4 e3       	ldi	r30, 0x34	; 52
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <GPIO_setupPinDirection+0x1c2>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <GPIO_setupPinDirection+0x1be>
    12c4:	80 95       	com	r24
    12c6:	84 23       	and	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	14 c0       	rjmp	.+40     	; 0x12f4 <GPIO_setupPinDirection+0x1f6>
			break;
			case PORTD_ID: CLEAR_BIT(DDRD,pin_num);
    12cc:	a1 e3       	ldi	r26, 0x31	; 49
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e1 e3       	ldi	r30, 0x31	; 49
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <GPIO_setupPinDirection+0x1ec>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <GPIO_setupPinDirection+0x1e8>
    12ee:	80 95       	com	r24
    12f0:	84 23       	and	r24, r20
    12f2:	8c 93       	st	X, r24
			break;
			}
		}
	}
}
    12f4:	27 96       	adiw	r28, 0x07	; 7
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <GPIO_writePin>:
 * Description:
 * if the pin is output it will write logic high or logic low
 * if the pin is input it will enable the pull up resistor if it write logic high
 */

void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	27 97       	sbiw	r28, 0x07	; 7
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	89 83       	std	Y+1, r24	; 0x01
    131c:	6a 83       	std	Y+2, r22	; 0x02
    131e:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>=NUM_OF_PORTS || pin_num>=NUM_OF_PINS)
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	84 30       	cpi	r24, 0x04	; 4
    1324:	08 f0       	brcs	.+2      	; 0x1328 <GPIO_writePin+0x22>
    1326:	ea c0       	rjmp	.+468    	; 0x14fc <GPIO_writePin+0x1f6>
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	88 30       	cpi	r24, 0x08	; 8
    132c:	08 f0       	brcs	.+2      	; 0x1330 <GPIO_writePin+0x2a>
    132e:	e6 c0       	rjmp	.+460    	; 0x14fc <GPIO_writePin+0x1f6>
	{
		/* Do nothing*/
	}
	else
	{
		if(value == LOGIC_HIGH)
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	09 f0       	breq	.+2      	; 0x1338 <GPIO_writePin+0x32>
    1336:	6f c0       	rjmp	.+222    	; 0x1416 <GPIO_writePin+0x110>
		{
			switch(port_num)
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	3f 83       	std	Y+7, r19	; 0x07
    1340:	2e 83       	std	Y+6, r18	; 0x06
    1342:	8e 81       	ldd	r24, Y+6	; 0x06
    1344:	9f 81       	ldd	r25, Y+7	; 0x07
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	91 05       	cpc	r25, r1
    134a:	49 f1       	breq	.+82     	; 0x139e <GPIO_writePin+0x98>
    134c:	2e 81       	ldd	r18, Y+6	; 0x06
    134e:	3f 81       	ldd	r19, Y+7	; 0x07
    1350:	22 30       	cpi	r18, 0x02	; 2
    1352:	31 05       	cpc	r19, r1
    1354:	2c f4       	brge	.+10     	; 0x1360 <GPIO_writePin+0x5a>
    1356:	8e 81       	ldd	r24, Y+6	; 0x06
    1358:	9f 81       	ldd	r25, Y+7	; 0x07
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	61 f0       	breq	.+24     	; 0x1376 <GPIO_writePin+0x70>
    135e:	ce c0       	rjmp	.+412    	; 0x14fc <GPIO_writePin+0x1f6>
    1360:	2e 81       	ldd	r18, Y+6	; 0x06
    1362:	3f 81       	ldd	r19, Y+7	; 0x07
    1364:	22 30       	cpi	r18, 0x02	; 2
    1366:	31 05       	cpc	r19, r1
    1368:	71 f1       	breq	.+92     	; 0x13c6 <GPIO_writePin+0xc0>
    136a:	8e 81       	ldd	r24, Y+6	; 0x06
    136c:	9f 81       	ldd	r25, Y+7	; 0x07
    136e:	83 30       	cpi	r24, 0x03	; 3
    1370:	91 05       	cpc	r25, r1
    1372:	e9 f1       	breq	.+122    	; 0x13ee <GPIO_writePin+0xe8>
    1374:	c3 c0       	rjmp	.+390    	; 0x14fc <GPIO_writePin+0x1f6>
			{
			case PORTA_ID: SET_BIT(PORTA,pin_num);
    1376:	ab e3       	ldi	r26, 0x3B	; 59
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	eb e3       	ldi	r30, 0x3B	; 59
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <GPIO_writePin+0x8e>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <GPIO_writePin+0x8a>
    1398:	84 2b       	or	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	af c0       	rjmp	.+350    	; 0x14fc <GPIO_writePin+0x1f6>
			break;
			case PORTB_ID: SET_BIT(PORTB,pin_num);
    139e:	a8 e3       	ldi	r26, 0x38	; 56
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e8 e3       	ldi	r30, 0x38	; 56
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	48 2f       	mov	r20, r24
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 2e       	mov	r0, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <GPIO_writePin+0xb6>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	0a 94       	dec	r0
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <GPIO_writePin+0xb2>
    13c0:	84 2b       	or	r24, r20
    13c2:	8c 93       	st	X, r24
    13c4:	9b c0       	rjmp	.+310    	; 0x14fc <GPIO_writePin+0x1f6>
			break;
			case PORTC_ID: SET_BIT(PORTC,pin_num);
    13c6:	a5 e3       	ldi	r26, 0x35	; 53
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e5 e3       	ldi	r30, 0x35	; 53
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 2e       	mov	r0, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <GPIO_writePin+0xde>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <GPIO_writePin+0xda>
    13e8:	84 2b       	or	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	87 c0       	rjmp	.+270    	; 0x14fc <GPIO_writePin+0x1f6>
			break;
			case PORTD_ID: SET_BIT(PORTD,pin_num);
    13ee:	a2 e3       	ldi	r26, 0x32	; 50
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e2 e3       	ldi	r30, 0x32	; 50
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	48 2f       	mov	r20, r24
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 2e       	mov	r0, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <GPIO_writePin+0x106>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	0a 94       	dec	r0
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <GPIO_writePin+0x102>
    1410:	84 2b       	or	r24, r20
    1412:	8c 93       	st	X, r24
    1414:	73 c0       	rjmp	.+230    	; 0x14fc <GPIO_writePin+0x1f6>
			break;
			}
		}
		else{
			switch(port_num)
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	3d 83       	std	Y+5, r19	; 0x05
    141e:	2c 83       	std	Y+4, r18	; 0x04
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	9d 81       	ldd	r25, Y+5	; 0x05
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	91 05       	cpc	r25, r1
    1428:	59 f1       	breq	.+86     	; 0x1480 <GPIO_writePin+0x17a>
    142a:	2c 81       	ldd	r18, Y+4	; 0x04
    142c:	3d 81       	ldd	r19, Y+5	; 0x05
    142e:	22 30       	cpi	r18, 0x02	; 2
    1430:	31 05       	cpc	r19, r1
    1432:	2c f4       	brge	.+10     	; 0x143e <GPIO_writePin+0x138>
    1434:	8c 81       	ldd	r24, Y+4	; 0x04
    1436:	9d 81       	ldd	r25, Y+5	; 0x05
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	69 f0       	breq	.+26     	; 0x1456 <GPIO_writePin+0x150>
    143c:	5f c0       	rjmp	.+190    	; 0x14fc <GPIO_writePin+0x1f6>
    143e:	2c 81       	ldd	r18, Y+4	; 0x04
    1440:	3d 81       	ldd	r19, Y+5	; 0x05
    1442:	22 30       	cpi	r18, 0x02	; 2
    1444:	31 05       	cpc	r19, r1
    1446:	89 f1       	breq	.+98     	; 0x14aa <GPIO_writePin+0x1a4>
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	9d 81       	ldd	r25, Y+5	; 0x05
    144c:	83 30       	cpi	r24, 0x03	; 3
    144e:	91 05       	cpc	r25, r1
    1450:	09 f4       	brne	.+2      	; 0x1454 <GPIO_writePin+0x14e>
    1452:	40 c0       	rjmp	.+128    	; 0x14d4 <GPIO_writePin+0x1ce>
    1454:	53 c0       	rjmp	.+166    	; 0x14fc <GPIO_writePin+0x1f6>
			{
			case PORTA_ID: CLEAR_BIT(PORTA,pin_num);
    1456:	ab e3       	ldi	r26, 0x3B	; 59
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	eb e3       	ldi	r30, 0x3B	; 59
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <GPIO_writePin+0x16e>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <GPIO_writePin+0x16a>
    1478:	80 95       	com	r24
    147a:	84 23       	and	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	3e c0       	rjmp	.+124    	; 0x14fc <GPIO_writePin+0x1f6>
			break;
			case PORTB_ID: CLEAR_BIT(PORTB,pin_num);
    1480:	a8 e3       	ldi	r26, 0x38	; 56
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e8 e3       	ldi	r30, 0x38	; 56
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <GPIO_writePin+0x198>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <GPIO_writePin+0x194>
    14a2:	80 95       	com	r24
    14a4:	84 23       	and	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	29 c0       	rjmp	.+82     	; 0x14fc <GPIO_writePin+0x1f6>
			break;
			case PORTC_ID: CLEAR_BIT(PORTC,pin_num);
    14aa:	a5 e3       	ldi	r26, 0x35	; 53
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e5 e3       	ldi	r30, 0x35	; 53
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <GPIO_writePin+0x1c2>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <GPIO_writePin+0x1be>
    14cc:	80 95       	com	r24
    14ce:	84 23       	and	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	14 c0       	rjmp	.+40     	; 0x14fc <GPIO_writePin+0x1f6>
			break;
			case PORTD_ID: CLEAR_BIT(PORTD,pin_num);
    14d4:	a2 e3       	ldi	r26, 0x32	; 50
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e2 e3       	ldi	r30, 0x32	; 50
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	48 2f       	mov	r20, r24
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 2e       	mov	r0, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <GPIO_writePin+0x1ec>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <GPIO_writePin+0x1e8>
    14f6:	80 95       	com	r24
    14f8:	84 23       	and	r24, r20
    14fa:	8c 93       	st	X, r24
			break;
			}
		}
	}
}
    14fc:	27 96       	adiw	r28, 0x07	; 7
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <GPIO_readPin>:
/*
 * Description:
 * read the value on the required pin
 * if the port number or pin number is incorrect the function returns zero
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	00 d0       	rcall	.+0      	; 0x1514 <GPIO_readPin+0x6>
    1514:	00 d0       	rcall	.+0      	; 0x1516 <GPIO_readPin+0x8>
    1516:	0f 92       	push	r0
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	8a 83       	std	Y+2, r24	; 0x02
    151e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1520:	19 82       	std	Y+1, r1	; 0x01
	if(port_num>=NUM_OF_PORTS || pin_num>=NUM_OF_PINS)
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	84 30       	cpi	r24, 0x04	; 4
    1526:	08 f0       	brcs	.+2      	; 0x152a <GPIO_readPin+0x1c>
    1528:	84 c0       	rjmp	.+264    	; 0x1632 <GPIO_readPin+0x124>
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	88 30       	cpi	r24, 0x08	; 8
    152e:	08 f0       	brcs	.+2      	; 0x1532 <GPIO_readPin+0x24>
    1530:	80 c0       	rjmp	.+256    	; 0x1632 <GPIO_readPin+0x124>
	{
		/*Do nothing*/
	}
	else
	{
		switch(port_num)
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	3d 83       	std	Y+5, r19	; 0x05
    153a:	2c 83       	std	Y+4, r18	; 0x04
    153c:	4c 81       	ldd	r20, Y+4	; 0x04
    153e:	5d 81       	ldd	r21, Y+5	; 0x05
    1540:	41 30       	cpi	r20, 0x01	; 1
    1542:	51 05       	cpc	r21, r1
    1544:	79 f1       	breq	.+94     	; 0x15a4 <GPIO_readPin+0x96>
    1546:	8c 81       	ldd	r24, Y+4	; 0x04
    1548:	9d 81       	ldd	r25, Y+5	; 0x05
    154a:	82 30       	cpi	r24, 0x02	; 2
    154c:	91 05       	cpc	r25, r1
    154e:	34 f4       	brge	.+12     	; 0x155c <GPIO_readPin+0x4e>
    1550:	2c 81       	ldd	r18, Y+4	; 0x04
    1552:	3d 81       	ldd	r19, Y+5	; 0x05
    1554:	21 15       	cp	r18, r1
    1556:	31 05       	cpc	r19, r1
    1558:	69 f0       	breq	.+26     	; 0x1574 <GPIO_readPin+0x66>
    155a:	6b c0       	rjmp	.+214    	; 0x1632 <GPIO_readPin+0x124>
    155c:	4c 81       	ldd	r20, Y+4	; 0x04
    155e:	5d 81       	ldd	r21, Y+5	; 0x05
    1560:	42 30       	cpi	r20, 0x02	; 2
    1562:	51 05       	cpc	r21, r1
    1564:	b9 f1       	breq	.+110    	; 0x15d4 <GPIO_readPin+0xc6>
    1566:	8c 81       	ldd	r24, Y+4	; 0x04
    1568:	9d 81       	ldd	r25, Y+5	; 0x05
    156a:	83 30       	cpi	r24, 0x03	; 3
    156c:	91 05       	cpc	r25, r1
    156e:	09 f4       	brne	.+2      	; 0x1572 <GPIO_readPin+0x64>
    1570:	49 c0       	rjmp	.+146    	; 0x1604 <GPIO_readPin+0xf6>
    1572:	5f c0       	rjmp	.+190    	; 0x1632 <GPIO_readPin+0x124>
		{
		case PORTA_ID: if(BIT_IS_SET(PINA,pin_num))
    1574:	e9 e3       	ldi	r30, 0x39	; 57
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	88 2f       	mov	r24, r24
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	a9 01       	movw	r20, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <GPIO_readPin+0x7e>
    1588:	55 95       	asr	r21
    158a:	47 95       	ror	r20
    158c:	8a 95       	dec	r24
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <GPIO_readPin+0x7a>
    1590:	ca 01       	movw	r24, r20
    1592:	81 70       	andi	r24, 0x01	; 1
    1594:	90 70       	andi	r25, 0x00	; 0
    1596:	88 23       	and	r24, r24
    1598:	19 f0       	breq	.+6      	; 0x15a0 <GPIO_readPin+0x92>
		{
			pin_value = LOGIC_HIGH;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	49 c0       	rjmp	.+146    	; 0x1632 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    15a0:	19 82       	std	Y+1, r1	; 0x01
    15a2:	47 c0       	rjmp	.+142    	; 0x1632 <GPIO_readPin+0x124>
		}
		break;
		case PORTB_ID: if(BIT_IS_SET(PINB,pin_num))
    15a4:	e6 e3       	ldi	r30, 0x36	; 54
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	88 2f       	mov	r24, r24
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	a9 01       	movw	r20, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <GPIO_readPin+0xae>
    15b8:	55 95       	asr	r21
    15ba:	47 95       	ror	r20
    15bc:	8a 95       	dec	r24
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <GPIO_readPin+0xaa>
    15c0:	ca 01       	movw	r24, r20
    15c2:	81 70       	andi	r24, 0x01	; 1
    15c4:	90 70       	andi	r25, 0x00	; 0
    15c6:	88 23       	and	r24, r24
    15c8:	19 f0       	breq	.+6      	; 0x15d0 <GPIO_readPin+0xc2>
		{
			pin_value = LOGIC_HIGH;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	31 c0       	rjmp	.+98     	; 0x1632 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    15d0:	19 82       	std	Y+1, r1	; 0x01
    15d2:	2f c0       	rjmp	.+94     	; 0x1632 <GPIO_readPin+0x124>
		}
		break;
		case PORTC_ID: if(BIT_IS_SET(PINC,pin_num))
    15d4:	e3 e3       	ldi	r30, 0x33	; 51
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a9 01       	movw	r20, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <GPIO_readPin+0xde>
    15e8:	55 95       	asr	r21
    15ea:	47 95       	ror	r20
    15ec:	8a 95       	dec	r24
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <GPIO_readPin+0xda>
    15f0:	ca 01       	movw	r24, r20
    15f2:	81 70       	andi	r24, 0x01	; 1
    15f4:	90 70       	andi	r25, 0x00	; 0
    15f6:	88 23       	and	r24, r24
    15f8:	19 f0       	breq	.+6      	; 0x1600 <GPIO_readPin+0xf2>
		{
			pin_value = LOGIC_HIGH;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	19 c0       	rjmp	.+50     	; 0x1632 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1600:	19 82       	std	Y+1, r1	; 0x01
    1602:	17 c0       	rjmp	.+46     	; 0x1632 <GPIO_readPin+0x124>
		}
		break;
		case PORTD_ID: if(BIT_IS_SET(PIND,pin_num))
    1604:	e0 e3       	ldi	r30, 0x30	; 48
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	88 2f       	mov	r24, r24
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	a9 01       	movw	r20, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <GPIO_readPin+0x10e>
    1618:	55 95       	asr	r21
    161a:	47 95       	ror	r20
    161c:	8a 95       	dec	r24
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <GPIO_readPin+0x10a>
    1620:	ca 01       	movw	r24, r20
    1622:	81 70       	andi	r24, 0x01	; 1
    1624:	90 70       	andi	r25, 0x00	; 0
    1626:	88 23       	and	r24, r24
    1628:	19 f0       	breq	.+6      	; 0x1630 <GPIO_readPin+0x122>
		{
			pin_value = LOGIC_HIGH;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	01 c0       	rjmp	.+2      	; 0x1632 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1630:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
		}
	}
	return pin_value;
    1632:	89 81       	ldd	r24, Y+1	; 0x01
}
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <GPIO_setupPortDirection>:

/*
 * Description:
 * configure the port direction input/output
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction){
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <GPIO_setupPortDirection+0x6>
    164a:	00 d0       	rcall	.+0      	; 0x164c <GPIO_setupPortDirection+0x8>
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>= NUM_OF_PORTS)
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	84 30       	cpi	r24, 0x04	; 4
    1658:	90 f5       	brcc	.+100    	; 0x16be <GPIO_setupPortDirection+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	3c 83       	std	Y+4, r19	; 0x04
    1662:	2b 83       	std	Y+3, r18	; 0x03
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	91 05       	cpc	r25, r1
    166c:	d1 f0       	breq	.+52     	; 0x16a2 <GPIO_setupPortDirection+0x5e>
    166e:	2b 81       	ldd	r18, Y+3	; 0x03
    1670:	3c 81       	ldd	r19, Y+4	; 0x04
    1672:	22 30       	cpi	r18, 0x02	; 2
    1674:	31 05       	cpc	r19, r1
    1676:	2c f4       	brge	.+10     	; 0x1682 <GPIO_setupPortDirection+0x3e>
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	9c 81       	ldd	r25, Y+4	; 0x04
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	61 f0       	breq	.+24     	; 0x1698 <GPIO_setupPortDirection+0x54>
    1680:	1e c0       	rjmp	.+60     	; 0x16be <GPIO_setupPortDirection+0x7a>
    1682:	2b 81       	ldd	r18, Y+3	; 0x03
    1684:	3c 81       	ldd	r19, Y+4	; 0x04
    1686:	22 30       	cpi	r18, 0x02	; 2
    1688:	31 05       	cpc	r19, r1
    168a:	81 f0       	breq	.+32     	; 0x16ac <GPIO_setupPortDirection+0x68>
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	9c 81       	ldd	r25, Y+4	; 0x04
    1690:	83 30       	cpi	r24, 0x03	; 3
    1692:	91 05       	cpc	r25, r1
    1694:	81 f0       	breq	.+32     	; 0x16b6 <GPIO_setupPortDirection+0x72>
    1696:	13 c0       	rjmp	.+38     	; 0x16be <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID: DDRA = direction;
    1698:	ea e3       	ldi	r30, 0x3A	; 58
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	80 83       	st	Z, r24
    16a0:	0e c0       	rjmp	.+28     	; 0x16be <GPIO_setupPortDirection+0x7a>
		break;
		case PORTB_ID: DDRB = direction;
    16a2:	e7 e3       	ldi	r30, 0x37	; 55
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	80 83       	st	Z, r24
    16aa:	09 c0       	rjmp	.+18     	; 0x16be <GPIO_setupPortDirection+0x7a>
		break;
		case PORTC_ID: DDRC = direction;
    16ac:	e4 e3       	ldi	r30, 0x34	; 52
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	80 83       	st	Z, r24
    16b4:	04 c0       	rjmp	.+8      	; 0x16be <GPIO_setupPortDirection+0x7a>
		break;
		case PORTD_ID: DDRD = direction;
    16b6:	e1 e3       	ldi	r30, 0x31	; 49
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	80 83       	st	Z, r24
		break;
		}
	}
}
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <GPIO_writePort>:
 * Description:
 * if the port is output it will write logic high or logic low
 * if the port is input it will enable the pull up resistor if it write logic high
 */

void GPIO_writePort(uint8 port_num, uint8 value){
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <GPIO_writePort+0x6>
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <GPIO_writePort+0x8>
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>= NUM_OF_PORTS)
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	84 30       	cpi	r24, 0x04	; 4
    16e0:	90 f5       	brcc	.+100    	; 0x1746 <GPIO_writePort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	3c 83       	std	Y+4, r19	; 0x04
    16ea:	2b 83       	std	Y+3, r18	; 0x03
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	9c 81       	ldd	r25, Y+4	; 0x04
    16f0:	81 30       	cpi	r24, 0x01	; 1
    16f2:	91 05       	cpc	r25, r1
    16f4:	d1 f0       	breq	.+52     	; 0x172a <GPIO_writePort+0x5e>
    16f6:	2b 81       	ldd	r18, Y+3	; 0x03
    16f8:	3c 81       	ldd	r19, Y+4	; 0x04
    16fa:	22 30       	cpi	r18, 0x02	; 2
    16fc:	31 05       	cpc	r19, r1
    16fe:	2c f4       	brge	.+10     	; 0x170a <GPIO_writePort+0x3e>
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	9c 81       	ldd	r25, Y+4	; 0x04
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	61 f0       	breq	.+24     	; 0x1720 <GPIO_writePort+0x54>
    1708:	1e c0       	rjmp	.+60     	; 0x1746 <GPIO_writePort+0x7a>
    170a:	2b 81       	ldd	r18, Y+3	; 0x03
    170c:	3c 81       	ldd	r19, Y+4	; 0x04
    170e:	22 30       	cpi	r18, 0x02	; 2
    1710:	31 05       	cpc	r19, r1
    1712:	81 f0       	breq	.+32     	; 0x1734 <GPIO_writePort+0x68>
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	83 30       	cpi	r24, 0x03	; 3
    171a:	91 05       	cpc	r25, r1
    171c:	81 f0       	breq	.+32     	; 0x173e <GPIO_writePort+0x72>
    171e:	13 c0       	rjmp	.+38     	; 0x1746 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1720:	eb e3       	ldi	r30, 0x3B	; 59
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	80 83       	st	Z, r24
    1728:	0e c0       	rjmp	.+28     	; 0x1746 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    172a:	e8 e3       	ldi	r30, 0x38	; 56
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	80 83       	st	Z, r24
    1732:	09 c0       	rjmp	.+18     	; 0x1746 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1734:	e5 e3       	ldi	r30, 0x35	; 53
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	80 83       	st	Z, r24
    173c:	04 c0       	rjmp	.+8      	; 0x1746 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    173e:	e2 e3       	ldi	r30, 0x32	; 50
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	80 83       	st	Z, r24
			break;
		}
	}
}
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num){
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	00 d0       	rcall	.+0      	; 0x175a <GPIO_readPort+0x6>
    175a:	00 d0       	rcall	.+0      	; 0x175c <GPIO_readPort+0x8>
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	8a 83       	std	Y+2, r24	; 0x02

	uint8 value = LOGIC_LOW;
    1762:	19 82       	std	Y+1, r1	; 0x01
	if(port_num>= NUM_OF_PORTS)
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	84 30       	cpi	r24, 0x04	; 4
    1768:	90 f5       	brcc	.+100    	; 0x17ce <GPIO_readPort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	3c 83       	std	Y+4, r19	; 0x04
    1772:	2b 83       	std	Y+3, r18	; 0x03
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	9c 81       	ldd	r25, Y+4	; 0x04
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	91 05       	cpc	r25, r1
    177c:	d1 f0       	breq	.+52     	; 0x17b2 <GPIO_readPort+0x5e>
    177e:	2b 81       	ldd	r18, Y+3	; 0x03
    1780:	3c 81       	ldd	r19, Y+4	; 0x04
    1782:	22 30       	cpi	r18, 0x02	; 2
    1784:	31 05       	cpc	r19, r1
    1786:	2c f4       	brge	.+10     	; 0x1792 <GPIO_readPort+0x3e>
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	9c 81       	ldd	r25, Y+4	; 0x04
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	61 f0       	breq	.+24     	; 0x17a8 <GPIO_readPort+0x54>
    1790:	1e c0       	rjmp	.+60     	; 0x17ce <GPIO_readPort+0x7a>
    1792:	2b 81       	ldd	r18, Y+3	; 0x03
    1794:	3c 81       	ldd	r19, Y+4	; 0x04
    1796:	22 30       	cpi	r18, 0x02	; 2
    1798:	31 05       	cpc	r19, r1
    179a:	81 f0       	breq	.+32     	; 0x17bc <GPIO_readPort+0x68>
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	9c 81       	ldd	r25, Y+4	; 0x04
    17a0:	83 30       	cpi	r24, 0x03	; 3
    17a2:	91 05       	cpc	r25, r1
    17a4:	81 f0       	breq	.+32     	; 0x17c6 <GPIO_readPort+0x72>
    17a6:	13 c0       	rjmp	.+38     	; 0x17ce <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    17a8:	e9 e3       	ldi	r30, 0x39	; 57
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	0e c0       	rjmp	.+28     	; 0x17ce <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    17b2:	e6 e3       	ldi	r30, 0x36	; 54
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	09 c0       	rjmp	.+18     	; 0x17ce <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    17bc:	e3 e3       	ldi	r30, 0x33	; 51
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	04 c0       	rjmp	.+8      	; 0x17ce <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    17c6:	e0 e3       	ldi	r30, 0x30	; 48
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <TWI_init>:
 * Description:
 * 1- Enable I2C
 * 2- Setup the bit rate
 * 3- Setup the address
 */
void TWI_init(const TWI_ConfigType * Config_Ptr){
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <TWI_init+0x6>
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	9a 83       	std	Y+2, r25	; 0x02
    17ea:	89 83       	std	Y+1, r24	; 0x01
	/*configure the bit rate and the pre-scaler */
	TWBR = Config_Ptr->bit_rate;
    17ec:	a0 e2       	ldi	r26, 0x20	; 32
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e9 81       	ldd	r30, Y+1	; 0x01
    17f2:	fa 81       	ldd	r31, Y+2	; 0x02
    17f4:	80 81       	ld	r24, Z
    17f6:	8c 93       	st	X, r24
	TWSR = Config_Ptr->pre_scaler&0x03;
    17f8:	a1 e2       	ldi	r26, 0x21	; 33
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e9 81       	ldd	r30, Y+1	; 0x01
    17fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1800:	81 81       	ldd	r24, Z+1	; 0x01
    1802:	83 70       	andi	r24, 0x03	; 3
    1804:	8c 93       	st	X, r24

	/* Passing the address of the slave
	   General Call Recognition: Off */
	TWAR = (Config_Ptr->address<<1);
    1806:	a2 e2       	ldi	r26, 0x22	; 34
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e9 81       	ldd	r30, Y+1	; 0x01
    180c:	fa 81       	ldd	r31, Y+2	; 0x02
    180e:	82 81       	ldd	r24, Z+2	; 0x02
    1810:	88 0f       	add	r24, r24
    1812:	8c 93       	st	X, r24

	TWCR = (1<<TWEN); /* enable TWI */
    1814:	e6 e5       	ldi	r30, 0x56	; 86
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	84 e0       	ldi	r24, 0x04	; 4
    181a:	80 83       	st	Z, r24
}
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <TWI_start>:
/*
 * Description:
 * send the start bit
 * Enable TWI Module
 */
void TWI_start(void){
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    182e:	e6 e5       	ldi	r30, 0x56	; 86
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	84 ea       	ldi	r24, 0xA4	; 164
    1834:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1836:	e6 e5       	ldi	r30, 0x56	; 86
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	88 23       	and	r24, r24
    183e:	dc f7       	brge	.-10     	; 0x1836 <TWI_start+0x10>
}
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <TWI_stop>:
/*
 * Description:
 * send the stop bit
 * Enable TWI Module
 */
void TWI_stop(void){
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    184e:	e6 e5       	ldi	r30, 0x56	; 86
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	84 e9       	ldi	r24, 0x94	; 148
    1854:	80 83       	st	Z, r24
}
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <TWI_writeByte>:

/*
 * Description:
 * send the data to the data register
 */
void TWI_writeByte(uint8 data){
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	0f 92       	push	r0
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    1868:	e3 e2       	ldi	r30, 0x23	; 35
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    1870:	e6 e5       	ldi	r30, 0x56	; 86
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	84 e8       	ldi	r24, 0x84	; 132
    1876:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1878:	e6 e5       	ldi	r30, 0x56	; 86
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	88 23       	and	r24, r24
    1880:	dc f7       	brge	.-10     	; 0x1878 <TWI_writeByte+0x1c>
}
    1882:	0f 90       	pop	r0
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <TWI_readByteWithACK>:

/*
 * Description:
 * reading the data with ACK
 */
uint8 TWI_readByteWithACK(void){
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1892:	e6 e5       	ldi	r30, 0x56	; 86
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	84 ec       	ldi	r24, 0xC4	; 196
    1898:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    189a:	e6 e5       	ldi	r30, 0x56	; 86
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	88 23       	and	r24, r24
    18a2:	dc f7       	brge	.-10     	; 0x189a <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    18a4:	e3 e2       	ldi	r30, 0x23	; 35
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
}
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <TWI_readByteWithNACK>:

/*
 * Description:
 * reading the data with NACK
 */
uint8 TWI_readByteWithNACK(void){
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    18b8:	e6 e5       	ldi	r30, 0x56	; 86
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	84 e8       	ldi	r24, 0x84	; 132
    18be:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    18c0:	e6 e5       	ldi	r30, 0x56	; 86
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	88 23       	and	r24, r24
    18c8:	dc f7       	brge	.-10     	; 0x18c0 <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    18ca:	e3 e2       	ldi	r30, 0x23	; 35
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
}
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <TWI_getStatus>:

uint8 TWI_getStatus(void){
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	0f 92       	push	r0
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	    status = TWSR & 0xF8;
    18e0:	e1 e2       	ldi	r30, 0x21	; 33
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	88 7f       	andi	r24, 0xF8	; 248
    18e8:	89 83       	std	Y+1, r24	; 0x01
	    return status;
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ec:	0f 90       	pop	r0
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <DcMotor_Init>:
 *The Function responsible for setup the direction for the two
 *motor pins through the GPIO driver.
 *Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void)
{/* configure pin PB0 and PB1 as output pins */
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTB_ID,PIN0_ID,PIN_OUTPUT);
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	41 e0       	ldi	r20, 0x01	; 1
    1902:	0e 94 7f 08 	call	0x10fe	; 0x10fe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN1_ID,PIN_OUTPUT);
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	61 e0       	ldi	r22, 0x01	; 1
    190a:	41 e0       	ldi	r20, 0x01	; 1
    190c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN2_ID,PIN_OUTPUT);
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	62 e0       	ldi	r22, 0x02	; 2
    1914:	41 e0       	ldi	r20, 0x01	; 1
    1916:	0e 94 7f 08 	call	0x10fe	; 0x10fe <GPIO_setupPinDirection>
	/* Motor is stop at the beginning */
	GPIO_writePin(PORTB_ID,PIN0_ID, LOGIC_LOW);
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	60 e0       	ldi	r22, 0x00	; 0
    191e:	40 e0       	ldi	r20, 0x00	; 0
    1920:	0e 94 83 09 	call	0x1306	; 0x1306 <GPIO_writePin>
	GPIO_writePin(PORTB_ID,PIN1_ID, LOGIC_LOW);
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	61 e0       	ldi	r22, 0x01	; 1
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	0e 94 83 09 	call	0x1306	; 0x1306 <GPIO_writePin>
	GPIO_writePin(PORTB_ID,PIN2_ID, LOGIC_LOW);
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	62 e0       	ldi	r22, 0x02	; 2
    1932:	40 e0       	ldi	r20, 0x00	; 0
    1934:	0e 94 83 09 	call	0x1306	; 0x1306 <GPIO_writePin>
}
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <DcMotor_Rotate>:
 *stop the motor based on the state input state value.
 *Send the required duty cycle to the PWM driver based on the
 *required speed value.
 */
void DcMotor_Rotate(DcMotor_State state)
{
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	00 d0       	rcall	.+0      	; 0x1944 <DcMotor_Rotate+0x6>
    1944:	0f 92       	push	r0
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	3b 83       	std	Y+3, r19	; 0x03
    1954:	2a 83       	std	Y+2, r18	; 0x02
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	9b 81       	ldd	r25, Y+3	; 0x03
    195a:	81 30       	cpi	r24, 0x01	; 1
    195c:	91 05       	cpc	r25, r1
    195e:	a1 f0       	breq	.+40     	; 0x1988 <DcMotor_Rotate+0x4a>
    1960:	2a 81       	ldd	r18, Y+2	; 0x02
    1962:	3b 81       	ldd	r19, Y+3	; 0x03
    1964:	22 30       	cpi	r18, 0x02	; 2
    1966:	31 05       	cpc	r19, r1
    1968:	d1 f0       	breq	.+52     	; 0x199e <DcMotor_Rotate+0x60>
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	9b 81       	ldd	r25, Y+3	; 0x03
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	01 f5       	brne	.+64     	; 0x19b2 <DcMotor_Rotate+0x74>
	{
	case stop:
		GPIO_writePin(PORTB_ID,PIN0_ID, LOGIC_LOW);
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	60 e0       	ldi	r22, 0x00	; 0
    1976:	40 e0       	ldi	r20, 0x00	; 0
    1978:	0e 94 83 09 	call	0x1306	; 0x1306 <GPIO_writePin>
		GPIO_writePin(PORTB_ID,PIN1_ID, LOGIC_LOW);
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	61 e0       	ldi	r22, 0x01	; 1
    1980:	40 e0       	ldi	r20, 0x00	; 0
    1982:	0e 94 83 09 	call	0x1306	; 0x1306 <GPIO_writePin>
    1986:	15 c0       	rjmp	.+42     	; 0x19b2 <DcMotor_Rotate+0x74>
		break;
	case CW:
		GPIO_writePin(PORTB_ID,PIN0_ID, LOGIC_HIGH);
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	60 e0       	ldi	r22, 0x00	; 0
    198c:	41 e0       	ldi	r20, 0x01	; 1
    198e:	0e 94 83 09 	call	0x1306	; 0x1306 <GPIO_writePin>
		GPIO_writePin(PORTB_ID,PIN1_ID, LOGIC_LOW);
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	61 e0       	ldi	r22, 0x01	; 1
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	0e 94 83 09 	call	0x1306	; 0x1306 <GPIO_writePin>
    199c:	0a c0       	rjmp	.+20     	; 0x19b2 <DcMotor_Rotate+0x74>
		break;
	case A_CW:
		GPIO_writePin(PORTB_ID,PIN0_ID, LOGIC_LOW);
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	60 e0       	ldi	r22, 0x00	; 0
    19a2:	40 e0       	ldi	r20, 0x00	; 0
    19a4:	0e 94 83 09 	call	0x1306	; 0x1306 <GPIO_writePin>
		GPIO_writePin(PORTB_ID,PIN1_ID, LOGIC_HIGH);
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	61 e0       	ldi	r22, 0x01	; 1
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	0e 94 83 09 	call	0x1306	; 0x1306 <GPIO_writePin>
		break;
	}
	GPIO_writePin(PORTB_ID,PIN2_ID, LOGIC_HIGH);
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	62 e0       	ldi	r22, 0x02	; 2
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	0e 94 83 09 	call	0x1306	; 0x1306 <GPIO_writePin>

}
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <__vector_9>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
/*
 * ISR for the over flow mode
 */
ISR(TIMER0_OVF_vect){
    19c8:	1f 92       	push	r1
    19ca:	0f 92       	push	r0
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	0f 92       	push	r0
    19d0:	11 24       	eor	r1, r1
    19d2:	2f 93       	push	r18
    19d4:	3f 93       	push	r19
    19d6:	4f 93       	push	r20
    19d8:	5f 93       	push	r21
    19da:	6f 93       	push	r22
    19dc:	7f 93       	push	r23
    19de:	8f 93       	push	r24
    19e0:	9f 93       	push	r25
    19e2:	af 93       	push	r26
    19e4:	bf 93       	push	r27
    19e6:	ef 93       	push	r30
    19e8:	ff 93       	push	r31
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrT0 != NULL_PTR)
    19f2:	80 91 79 00 	lds	r24, 0x0079
    19f6:	90 91 7a 00 	lds	r25, 0x007A
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	29 f0       	breq	.+10     	; 0x1a08 <__vector_9+0x40>
	{

		(*g_callBackPtrT0)();
    19fe:	e0 91 79 00 	lds	r30, 0x0079
    1a02:	f0 91 7a 00 	lds	r31, 0x007A
    1a06:	09 95       	icall
	}
}
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	ff 91       	pop	r31
    1a0e:	ef 91       	pop	r30
    1a10:	bf 91       	pop	r27
    1a12:	af 91       	pop	r26
    1a14:	9f 91       	pop	r25
    1a16:	8f 91       	pop	r24
    1a18:	7f 91       	pop	r23
    1a1a:	6f 91       	pop	r22
    1a1c:	5f 91       	pop	r21
    1a1e:	4f 91       	pop	r20
    1a20:	3f 91       	pop	r19
    1a22:	2f 91       	pop	r18
    1a24:	0f 90       	pop	r0
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	0f 90       	pop	r0
    1a2a:	1f 90       	pop	r1
    1a2c:	18 95       	reti

00001a2e <__vector_8>:

ISR(TIMER1_OVF_vect){
    1a2e:	1f 92       	push	r1
    1a30:	0f 92       	push	r0
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	0f 92       	push	r0
    1a36:	11 24       	eor	r1, r1
    1a38:	2f 93       	push	r18
    1a3a:	3f 93       	push	r19
    1a3c:	4f 93       	push	r20
    1a3e:	5f 93       	push	r21
    1a40:	6f 93       	push	r22
    1a42:	7f 93       	push	r23
    1a44:	8f 93       	push	r24
    1a46:	9f 93       	push	r25
    1a48:	af 93       	push	r26
    1a4a:	bf 93       	push	r27
    1a4c:	ef 93       	push	r30
    1a4e:	ff 93       	push	r31
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrT1 != NULL_PTR)
    1a58:	80 91 7b 00 	lds	r24, 0x007B
    1a5c:	90 91 7c 00 	lds	r25, 0x007C
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	29 f0       	breq	.+10     	; 0x1a6e <__vector_8+0x40>
	{

		(*g_callBackPtrT1)();
    1a64:	e0 91 7b 00 	lds	r30, 0x007B
    1a68:	f0 91 7c 00 	lds	r31, 0x007C
    1a6c:	09 95       	icall
	}
}
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	ff 91       	pop	r31
    1a74:	ef 91       	pop	r30
    1a76:	bf 91       	pop	r27
    1a78:	af 91       	pop	r26
    1a7a:	9f 91       	pop	r25
    1a7c:	8f 91       	pop	r24
    1a7e:	7f 91       	pop	r23
    1a80:	6f 91       	pop	r22
    1a82:	5f 91       	pop	r21
    1a84:	4f 91       	pop	r20
    1a86:	3f 91       	pop	r19
    1a88:	2f 91       	pop	r18
    1a8a:	0f 90       	pop	r0
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	0f 90       	pop	r0
    1a90:	1f 90       	pop	r1
    1a92:	18 95       	reti

00001a94 <__vector_4>:

ISR(TIMER2_OVF_vect){
    1a94:	1f 92       	push	r1
    1a96:	0f 92       	push	r0
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	0f 92       	push	r0
    1a9c:	11 24       	eor	r1, r1
    1a9e:	2f 93       	push	r18
    1aa0:	3f 93       	push	r19
    1aa2:	4f 93       	push	r20
    1aa4:	5f 93       	push	r21
    1aa6:	6f 93       	push	r22
    1aa8:	7f 93       	push	r23
    1aaa:	8f 93       	push	r24
    1aac:	9f 93       	push	r25
    1aae:	af 93       	push	r26
    1ab0:	bf 93       	push	r27
    1ab2:	ef 93       	push	r30
    1ab4:	ff 93       	push	r31
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrT2 != NULL_PTR)
    1abe:	80 91 7d 00 	lds	r24, 0x007D
    1ac2:	90 91 7e 00 	lds	r25, 0x007E
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	29 f0       	breq	.+10     	; 0x1ad4 <__vector_4+0x40>
	{

		(*g_callBackPtrT2)();
    1aca:	e0 91 7d 00 	lds	r30, 0x007D
    1ace:	f0 91 7e 00 	lds	r31, 0x007E
    1ad2:	09 95       	icall
	}
}
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	ff 91       	pop	r31
    1ada:	ef 91       	pop	r30
    1adc:	bf 91       	pop	r27
    1ade:	af 91       	pop	r26
    1ae0:	9f 91       	pop	r25
    1ae2:	8f 91       	pop	r24
    1ae4:	7f 91       	pop	r23
    1ae6:	6f 91       	pop	r22
    1ae8:	5f 91       	pop	r21
    1aea:	4f 91       	pop	r20
    1aec:	3f 91       	pop	r19
    1aee:	2f 91       	pop	r18
    1af0:	0f 90       	pop	r0
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	0f 90       	pop	r0
    1af6:	1f 90       	pop	r1
    1af8:	18 95       	reti

00001afa <__vector_19>:
/*
 * ISR for the compare mode
 */
ISR(TIMER0_COMP_vect){
    1afa:	1f 92       	push	r1
    1afc:	0f 92       	push	r0
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	0f 92       	push	r0
    1b02:	11 24       	eor	r1, r1
    1b04:	2f 93       	push	r18
    1b06:	3f 93       	push	r19
    1b08:	4f 93       	push	r20
    1b0a:	5f 93       	push	r21
    1b0c:	6f 93       	push	r22
    1b0e:	7f 93       	push	r23
    1b10:	8f 93       	push	r24
    1b12:	9f 93       	push	r25
    1b14:	af 93       	push	r26
    1b16:	bf 93       	push	r27
    1b18:	ef 93       	push	r30
    1b1a:	ff 93       	push	r31
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrT0 != NULL_PTR)
    1b24:	80 91 79 00 	lds	r24, 0x0079
    1b28:	90 91 7a 00 	lds	r25, 0x007A
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	29 f0       	breq	.+10     	; 0x1b3a <__vector_19+0x40>
	{

		(*g_callBackPtrT0)();
    1b30:	e0 91 79 00 	lds	r30, 0x0079
    1b34:	f0 91 7a 00 	lds	r31, 0x007A
    1b38:	09 95       	icall
	}
}
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	ff 91       	pop	r31
    1b40:	ef 91       	pop	r30
    1b42:	bf 91       	pop	r27
    1b44:	af 91       	pop	r26
    1b46:	9f 91       	pop	r25
    1b48:	8f 91       	pop	r24
    1b4a:	7f 91       	pop	r23
    1b4c:	6f 91       	pop	r22
    1b4e:	5f 91       	pop	r21
    1b50:	4f 91       	pop	r20
    1b52:	3f 91       	pop	r19
    1b54:	2f 91       	pop	r18
    1b56:	0f 90       	pop	r0
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	0f 90       	pop	r0
    1b5c:	1f 90       	pop	r1
    1b5e:	18 95       	reti

00001b60 <__vector_6>:

ISR(TIMER1_COMPA_vect){
    1b60:	1f 92       	push	r1
    1b62:	0f 92       	push	r0
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	0f 92       	push	r0
    1b68:	11 24       	eor	r1, r1
    1b6a:	2f 93       	push	r18
    1b6c:	3f 93       	push	r19
    1b6e:	4f 93       	push	r20
    1b70:	5f 93       	push	r21
    1b72:	6f 93       	push	r22
    1b74:	7f 93       	push	r23
    1b76:	8f 93       	push	r24
    1b78:	9f 93       	push	r25
    1b7a:	af 93       	push	r26
    1b7c:	bf 93       	push	r27
    1b7e:	ef 93       	push	r30
    1b80:	ff 93       	push	r31
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrT1 != NULL_PTR)
    1b8a:	80 91 7b 00 	lds	r24, 0x007B
    1b8e:	90 91 7c 00 	lds	r25, 0x007C
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	29 f0       	breq	.+10     	; 0x1ba0 <__vector_6+0x40>
	{

		(*g_callBackPtrT1)();
    1b96:	e0 91 7b 00 	lds	r30, 0x007B
    1b9a:	f0 91 7c 00 	lds	r31, 0x007C
    1b9e:	09 95       	icall
	}
}
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	ff 91       	pop	r31
    1ba6:	ef 91       	pop	r30
    1ba8:	bf 91       	pop	r27
    1baa:	af 91       	pop	r26
    1bac:	9f 91       	pop	r25
    1bae:	8f 91       	pop	r24
    1bb0:	7f 91       	pop	r23
    1bb2:	6f 91       	pop	r22
    1bb4:	5f 91       	pop	r21
    1bb6:	4f 91       	pop	r20
    1bb8:	3f 91       	pop	r19
    1bba:	2f 91       	pop	r18
    1bbc:	0f 90       	pop	r0
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	0f 90       	pop	r0
    1bc2:	1f 90       	pop	r1
    1bc4:	18 95       	reti

00001bc6 <__vector_7>:
ISR(TIMER1_COMPB_vect){
    1bc6:	1f 92       	push	r1
    1bc8:	0f 92       	push	r0
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	0f 92       	push	r0
    1bce:	11 24       	eor	r1, r1
    1bd0:	2f 93       	push	r18
    1bd2:	3f 93       	push	r19
    1bd4:	4f 93       	push	r20
    1bd6:	5f 93       	push	r21
    1bd8:	6f 93       	push	r22
    1bda:	7f 93       	push	r23
    1bdc:	8f 93       	push	r24
    1bde:	9f 93       	push	r25
    1be0:	af 93       	push	r26
    1be2:	bf 93       	push	r27
    1be4:	ef 93       	push	r30
    1be6:	ff 93       	push	r31
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrT1 != NULL_PTR)
    1bf0:	80 91 7b 00 	lds	r24, 0x007B
    1bf4:	90 91 7c 00 	lds	r25, 0x007C
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	29 f0       	breq	.+10     	; 0x1c06 <__vector_7+0x40>
	{

		(*g_callBackPtrT1)();
    1bfc:	e0 91 7b 00 	lds	r30, 0x007B
    1c00:	f0 91 7c 00 	lds	r31, 0x007C
    1c04:	09 95       	icall
	}
}
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	ff 91       	pop	r31
    1c0c:	ef 91       	pop	r30
    1c0e:	bf 91       	pop	r27
    1c10:	af 91       	pop	r26
    1c12:	9f 91       	pop	r25
    1c14:	8f 91       	pop	r24
    1c16:	7f 91       	pop	r23
    1c18:	6f 91       	pop	r22
    1c1a:	5f 91       	pop	r21
    1c1c:	4f 91       	pop	r20
    1c1e:	3f 91       	pop	r19
    1c20:	2f 91       	pop	r18
    1c22:	0f 90       	pop	r0
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	0f 90       	pop	r0
    1c28:	1f 90       	pop	r1
    1c2a:	18 95       	reti

00001c2c <__vector_3>:
ISR(TIMER2_COMP_vect){
    1c2c:	1f 92       	push	r1
    1c2e:	0f 92       	push	r0
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	0f 92       	push	r0
    1c34:	11 24       	eor	r1, r1
    1c36:	2f 93       	push	r18
    1c38:	3f 93       	push	r19
    1c3a:	4f 93       	push	r20
    1c3c:	5f 93       	push	r21
    1c3e:	6f 93       	push	r22
    1c40:	7f 93       	push	r23
    1c42:	8f 93       	push	r24
    1c44:	9f 93       	push	r25
    1c46:	af 93       	push	r26
    1c48:	bf 93       	push	r27
    1c4a:	ef 93       	push	r30
    1c4c:	ff 93       	push	r31
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrT2 != NULL_PTR)
    1c56:	80 91 7d 00 	lds	r24, 0x007D
    1c5a:	90 91 7e 00 	lds	r25, 0x007E
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	29 f0       	breq	.+10     	; 0x1c6c <__vector_3+0x40>
	{

		(*g_callBackPtrT2)();
    1c62:	e0 91 7d 00 	lds	r30, 0x007D
    1c66:	f0 91 7e 00 	lds	r31, 0x007E
    1c6a:	09 95       	icall
	}
}
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	ff 91       	pop	r31
    1c72:	ef 91       	pop	r30
    1c74:	bf 91       	pop	r27
    1c76:	af 91       	pop	r26
    1c78:	9f 91       	pop	r25
    1c7a:	8f 91       	pop	r24
    1c7c:	7f 91       	pop	r23
    1c7e:	6f 91       	pop	r22
    1c80:	5f 91       	pop	r21
    1c82:	4f 91       	pop	r20
    1c84:	3f 91       	pop	r19
    1c86:	2f 91       	pop	r18
    1c88:	0f 90       	pop	r0
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	0f 90       	pop	r0
    1c8e:	1f 90       	pop	r1
    1c90:	18 95       	reti

00001c92 <TIMER_init>:
 * set the timer mode
 * set the pre-scaler
 * set the initial value
 * set the compare value if the timer is in compare mode
 */
void TIMER_init(const TIMER_ConfigType * Config_Ptr){
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	60 97       	sbiw	r28, 0x10	; 16
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	9a 83       	std	Y+2, r25	; 0x02
    1ca8:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer)
    1caa:	e9 81       	ldd	r30, Y+1	; 0x01
    1cac:	fa 81       	ldd	r31, Y+2	; 0x02
    1cae:	80 81       	ld	r24, Z
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	38 8b       	std	Y+16, r19	; 0x10
    1cb6:	2f 87       	std	Y+15, r18	; 0x0f
    1cb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cba:	98 89       	ldd	r25, Y+16	; 0x10
    1cbc:	81 30       	cpi	r24, 0x01	; 1
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <TIMER_init+0x32>
    1cc2:	58 c0       	rjmp	.+176    	; 0x1d74 <TIMER_init+0xe2>
    1cc4:	2f 85       	ldd	r18, Y+15	; 0x0f
    1cc6:	38 89       	ldd	r19, Y+16	; 0x10
    1cc8:	22 30       	cpi	r18, 0x02	; 2
    1cca:	31 05       	cpc	r19, r1
    1ccc:	09 f4       	brne	.+2      	; 0x1cd0 <TIMER_init+0x3e>
    1cce:	db c0       	rjmp	.+438    	; 0x1e86 <TIMER_init+0x1f4>
    1cd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd2:	98 89       	ldd	r25, Y+16	; 0x10
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	09 f0       	breq	.+2      	; 0x1cda <TIMER_init+0x48>
    1cd8:	f4 c1       	rjmp	.+1000   	; 0x20c2 <TIMER_init+0x430>
	{
	case TIMER0:{
		switch(Config_Ptr->mode)
    1cda:	e9 81       	ldd	r30, Y+1	; 0x01
    1cdc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cde:	81 81       	ldd	r24, Z+1	; 0x01
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	3e 87       	std	Y+14, r19	; 0x0e
    1ce6:	2d 87       	std	Y+13, r18	; 0x0d
    1ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	31 f0       	breq	.+12     	; 0x1cfc <TIMER_init+0x6a>
    1cf0:	2d 85       	ldd	r18, Y+13	; 0x0d
    1cf2:	3e 85       	ldd	r19, Y+14	; 0x0e
    1cf4:	21 30       	cpi	r18, 0x01	; 1
    1cf6:	31 05       	cpc	r19, r1
    1cf8:	a9 f0       	breq	.+42     	; 0x1d24 <TIMER_init+0x92>
    1cfa:	e3 c1       	rjmp	.+966    	; 0x20c2 <TIMER_init+0x430>
		{
		case NORMAL:{
			TCCR0 = (1<<FOC0) | ((Config_Ptr->pre_scaler)&0x07);
    1cfc:	a3 e5       	ldi	r26, 0x53	; 83
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e9 81       	ldd	r30, Y+1	; 0x01
    1d02:	fa 81       	ldd	r31, Y+2	; 0x02
    1d04:	82 81       	ldd	r24, Z+2	; 0x02
    1d06:	87 70       	andi	r24, 0x07	; 7
    1d08:	80 68       	ori	r24, 0x80	; 128
    1d0a:	8c 93       	st	X, r24
			TCNT0= (uint8)(Config_Ptr->initial_value);
    1d0c:	a2 e5       	ldi	r26, 0x52	; 82
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e9 81       	ldd	r30, Y+1	; 0x01
    1d12:	fa 81       	ldd	r31, Y+2	; 0x02
    1d14:	85 81       	ldd	r24, Z+5	; 0x05
    1d16:	96 81       	ldd	r25, Z+6	; 0x06
    1d18:	8c 93       	st	X, r24
			TIMSK = (1<<TOIE0);
    1d1a:	e9 e5       	ldi	r30, 0x59	; 89
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	80 83       	st	Z, r24
    1d22:	cf c1       	rjmp	.+926    	; 0x20c2 <TIMER_init+0x430>
		}break;
		case COMPARE:{
			TCCR0 = (1<<FOC0) | (1<<WGM01) | ((Config_Ptr->pre_scaler)&0x07) | ((Config_Ptr->cmp_pin)<<COM00);
    1d24:	a3 e5       	ldi	r26, 0x53	; 83
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e9 81       	ldd	r30, Y+1	; 0x01
    1d2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d2c:	82 81       	ldd	r24, Z+2	; 0x02
    1d2e:	87 70       	andi	r24, 0x07	; 7
    1d30:	28 2f       	mov	r18, r24
    1d32:	28 68       	ori	r18, 0x88	; 136
    1d34:	e9 81       	ldd	r30, Y+1	; 0x01
    1d36:	fa 81       	ldd	r31, Y+2	; 0x02
    1d38:	83 81       	ldd	r24, Z+3	; 0x03
    1d3a:	88 2f       	mov	r24, r24
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	82 95       	swap	r24
    1d40:	92 95       	swap	r25
    1d42:	90 7f       	andi	r25, 0xF0	; 240
    1d44:	98 27       	eor	r25, r24
    1d46:	80 7f       	andi	r24, 0xF0	; 240
    1d48:	98 27       	eor	r25, r24
    1d4a:	82 2b       	or	r24, r18
    1d4c:	8c 93       	st	X, r24
			TCNT0= (uint8)(Config_Ptr->initial_value);
    1d4e:	a2 e5       	ldi	r26, 0x52	; 82
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e9 81       	ldd	r30, Y+1	; 0x01
    1d54:	fa 81       	ldd	r31, Y+2	; 0x02
    1d56:	85 81       	ldd	r24, Z+5	; 0x05
    1d58:	96 81       	ldd	r25, Z+6	; 0x06
    1d5a:	8c 93       	st	X, r24
			OCR0= (uint8)(Config_Ptr->compare_value);
    1d5c:	ac e5       	ldi	r26, 0x5C	; 92
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e9 81       	ldd	r30, Y+1	; 0x01
    1d62:	fa 81       	ldd	r31, Y+2	; 0x02
    1d64:	87 81       	ldd	r24, Z+7	; 0x07
    1d66:	90 85       	ldd	r25, Z+8	; 0x08
    1d68:	8c 93       	st	X, r24
			TIMSK = (1<<OCIE0);
    1d6a:	e9 e5       	ldi	r30, 0x59	; 89
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	82 e0       	ldi	r24, 0x02	; 2
    1d70:	80 83       	st	Z, r24
    1d72:	a7 c1       	rjmp	.+846    	; 0x20c2 <TIMER_init+0x430>

		}break;
		}
	}break;
	case TIMER1:{
		switch(Config_Ptr->mode)
    1d74:	e9 81       	ldd	r30, Y+1	; 0x01
    1d76:	fa 81       	ldd	r31, Y+2	; 0x02
    1d78:	81 81       	ldd	r24, Z+1	; 0x01
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	3c 87       	std	Y+12, r19	; 0x0c
    1d80:	2b 87       	std	Y+11, r18	; 0x0b
    1d82:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d84:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	31 f0       	breq	.+12     	; 0x1d96 <TIMER_init+0x104>
    1d8a:	2b 85       	ldd	r18, Y+11	; 0x0b
    1d8c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d8e:	21 30       	cpi	r18, 0x01	; 1
    1d90:	31 05       	cpc	r19, r1
    1d92:	d1 f0       	breq	.+52     	; 0x1dc8 <TIMER_init+0x136>
    1d94:	96 c1       	rjmp	.+812    	; 0x20c2 <TIMER_init+0x430>
		{
		case NORMAL:{
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1d96:	ef e4       	ldi	r30, 0x4F	; 79
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	8c e0       	ldi	r24, 0x0C	; 12
    1d9c:	80 83       	st	Z, r24
			TCCR1B = (Config_Ptr->pre_scaler)&0x07;
    1d9e:	ae e4       	ldi	r26, 0x4E	; 78
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e9 81       	ldd	r30, Y+1	; 0x01
    1da4:	fa 81       	ldd	r31, Y+2	; 0x02
    1da6:	82 81       	ldd	r24, Z+2	; 0x02
    1da8:	87 70       	andi	r24, 0x07	; 7
    1daa:	8c 93       	st	X, r24
			TIMSK = (1<<TOIE1);
    1dac:	e9 e5       	ldi	r30, 0x59	; 89
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	84 e0       	ldi	r24, 0x04	; 4
    1db2:	80 83       	st	Z, r24
			TCNT1 = Config_Ptr->initial_value;
    1db4:	ac e4       	ldi	r26, 0x4C	; 76
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dba:	fa 81       	ldd	r31, Y+2	; 0x02
    1dbc:	85 81       	ldd	r24, Z+5	; 0x05
    1dbe:	96 81       	ldd	r25, Z+6	; 0x06
    1dc0:	11 96       	adiw	r26, 0x01	; 1
    1dc2:	9c 93       	st	X, r25
    1dc4:	8e 93       	st	-X, r24
    1dc6:	7d c1       	rjmp	.+762    	; 0x20c2 <TIMER_init+0x430>
		}break;
		case COMPARE:{
			TCCR1B = ((Config_Ptr->pre_scaler)&0x07 ) | (1<<WGM12);
    1dc8:	ae e4       	ldi	r26, 0x4E	; 78
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dce:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd0:	82 81       	ldd	r24, Z+2	; 0x02
    1dd2:	87 70       	andi	r24, 0x07	; 7
    1dd4:	88 60       	ori	r24, 0x08	; 8
    1dd6:	8c 93       	st	X, r24
			TCNT1 = Config_Ptr->initial_value;
    1dd8:	ac e4       	ldi	r26, 0x4C	; 76
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dde:	fa 81       	ldd	r31, Y+2	; 0x02
    1de0:	85 81       	ldd	r24, Z+5	; 0x05
    1de2:	96 81       	ldd	r25, Z+6	; 0x06
    1de4:	11 96       	adiw	r26, 0x01	; 1
    1de6:	9c 93       	st	X, r25
    1de8:	8e 93       	st	-X, r24
			switch(Config_Ptr->com_output){
    1dea:	e9 81       	ldd	r30, Y+1	; 0x01
    1dec:	fa 81       	ldd	r31, Y+2	; 0x02
    1dee:	84 81       	ldd	r24, Z+4	; 0x04
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	3a 87       	std	Y+10, r19	; 0x0a
    1df6:	29 87       	std	Y+9, r18	; 0x09
    1df8:	89 85       	ldd	r24, Y+9	; 0x09
    1dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	31 f0       	breq	.+12     	; 0x1e0c <TIMER_init+0x17a>
    1e00:	29 85       	ldd	r18, Y+9	; 0x09
    1e02:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e04:	21 30       	cpi	r18, 0x01	; 1
    1e06:	31 05       	cpc	r19, r1
    1e08:	09 f1       	breq	.+66     	; 0x1e4c <TIMER_init+0x1ba>
    1e0a:	5b c1       	rjmp	.+694    	; 0x20c2 <TIMER_init+0x430>
			case COMPARE_A:
				TCCR1A = (1<<FOC1A) | (1<<FOC1B) | ((Config_Ptr->cmp_pin)<<COM1A0);
    1e0c:	af e4       	ldi	r26, 0x4F	; 79
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e9 81       	ldd	r30, Y+1	; 0x01
    1e12:	fa 81       	ldd	r31, Y+2	; 0x02
    1e14:	83 81       	ldd	r24, Z+3	; 0x03
    1e16:	88 2f       	mov	r24, r24
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	00 24       	eor	r0, r0
    1e1c:	96 95       	lsr	r25
    1e1e:	87 95       	ror	r24
    1e20:	07 94       	ror	r0
    1e22:	96 95       	lsr	r25
    1e24:	87 95       	ror	r24
    1e26:	07 94       	ror	r0
    1e28:	98 2f       	mov	r25, r24
    1e2a:	80 2d       	mov	r24, r0
    1e2c:	8c 60       	ori	r24, 0x0C	; 12
    1e2e:	8c 93       	st	X, r24
				OCR1A = Config_Ptr->compare_value;
    1e30:	aa e4       	ldi	r26, 0x4A	; 74
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e9 81       	ldd	r30, Y+1	; 0x01
    1e36:	fa 81       	ldd	r31, Y+2	; 0x02
    1e38:	87 81       	ldd	r24, Z+7	; 0x07
    1e3a:	90 85       	ldd	r25, Z+8	; 0x08
    1e3c:	11 96       	adiw	r26, 0x01	; 1
    1e3e:	9c 93       	st	X, r25
    1e40:	8e 93       	st	-X, r24
				TIMSK = (1<< OCIE1A);
    1e42:	e9 e5       	ldi	r30, 0x59	; 89
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 e1       	ldi	r24, 0x10	; 16
    1e48:	80 83       	st	Z, r24
    1e4a:	3b c1       	rjmp	.+630    	; 0x20c2 <TIMER_init+0x430>
				break;
			case COMPARE_B:
				TCCR1A = (1<<FOC1A) | (1<<FOC1B) | ((Config_Ptr->cmp_pin)<<COM1B0);
    1e4c:	af e4       	ldi	r26, 0x4F	; 79
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e9 81       	ldd	r30, Y+1	; 0x01
    1e52:	fa 81       	ldd	r31, Y+2	; 0x02
    1e54:	83 81       	ldd	r24, Z+3	; 0x03
    1e56:	88 2f       	mov	r24, r24
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	82 95       	swap	r24
    1e5c:	92 95       	swap	r25
    1e5e:	90 7f       	andi	r25, 0xF0	; 240
    1e60:	98 27       	eor	r25, r24
    1e62:	80 7f       	andi	r24, 0xF0	; 240
    1e64:	98 27       	eor	r25, r24
    1e66:	8c 60       	ori	r24, 0x0C	; 12
    1e68:	8c 93       	st	X, r24
				OCR1B = Config_Ptr->compare_value;
    1e6a:	a8 e4       	ldi	r26, 0x48	; 72
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e70:	fa 81       	ldd	r31, Y+2	; 0x02
    1e72:	87 81       	ldd	r24, Z+7	; 0x07
    1e74:	90 85       	ldd	r25, Z+8	; 0x08
    1e76:	11 96       	adiw	r26, 0x01	; 1
    1e78:	9c 93       	st	X, r25
    1e7a:	8e 93       	st	-X, r24
				TIMSK = (1<< OCIE1B);
    1e7c:	e9 e5       	ldi	r30, 0x59	; 89
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	88 e0       	ldi	r24, 0x08	; 8
    1e82:	80 83       	st	Z, r24
    1e84:	1e c1       	rjmp	.+572    	; 0x20c2 <TIMER_init+0x430>
			}
		}break;
		}
	}break;
	case TIMER2:{
		switch(Config_Ptr->mode)
    1e86:	e9 81       	ldd	r30, Y+1	; 0x01
    1e88:	fa 81       	ldd	r31, Y+2	; 0x02
    1e8a:	81 81       	ldd	r24, Z+1	; 0x01
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	38 87       	std	Y+8, r19	; 0x08
    1e92:	2f 83       	std	Y+7, r18	; 0x07
    1e94:	8f 81       	ldd	r24, Y+7	; 0x07
    1e96:	98 85       	ldd	r25, Y+8	; 0x08
    1e98:	00 97       	sbiw	r24, 0x00	; 0
    1e9a:	39 f0       	breq	.+14     	; 0x1eaa <TIMER_init+0x218>
    1e9c:	2f 81       	ldd	r18, Y+7	; 0x07
    1e9e:	38 85       	ldd	r19, Y+8	; 0x08
    1ea0:	21 30       	cpi	r18, 0x01	; 1
    1ea2:	31 05       	cpc	r19, r1
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <TIMER_init+0x216>
    1ea6:	82 c0       	rjmp	.+260    	; 0x1fac <TIMER_init+0x31a>
    1ea8:	0c c1       	rjmp	.+536    	; 0x20c2 <TIMER_init+0x430>
		{
		case NORMAL:{
			TCCR2 = (1<<FOC2);
    1eaa:	e5 e4       	ldi	r30, 0x45	; 69
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 e8       	ldi	r24, 0x80	; 128
    1eb0:	80 83       	st	Z, r24
			TCNT2 = (uint8)(Config_Ptr->initial_value);
    1eb2:	a4 e4       	ldi	r26, 0x44	; 68
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eba:	85 81       	ldd	r24, Z+5	; 0x05
    1ebc:	96 81       	ldd	r25, Z+6	; 0x06
    1ebe:	8c 93       	st	X, r24
			OCR2 = (uint8)(Config_Ptr->compare_value);
    1ec0:	a3 e4       	ldi	r26, 0x43	; 67
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec8:	87 81       	ldd	r24, Z+7	; 0x07
    1eca:	90 85       	ldd	r25, Z+8	; 0x08
    1ecc:	8c 93       	st	X, r24
			TIMSK = (1<<TOIE2);
    1ece:	e9 e5       	ldi	r30, 0x59	; 89
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 e4       	ldi	r24, 0x40	; 64
    1ed4:	80 83       	st	Z, r24
			switch(Config_Ptr->pre_scaler)
    1ed6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eda:	82 81       	ldd	r24, Z+2	; 0x02
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	3e 83       	std	Y+6, r19	; 0x06
    1ee2:	2d 83       	std	Y+5, r18	; 0x05
    1ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee8:	83 30       	cpi	r24, 0x03	; 3
    1eea:	91 05       	cpc	r25, r1
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <TIMER_init+0x25e>
    1eee:	3e c0       	rjmp	.+124    	; 0x1f6c <TIMER_init+0x2da>
    1ef0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ef2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ef4:	24 30       	cpi	r18, 0x04	; 4
    1ef6:	31 05       	cpc	r19, r1
    1ef8:	5c f4       	brge	.+22     	; 0x1f10 <TIMER_init+0x27e>
    1efa:	8d 81       	ldd	r24, Y+5	; 0x05
    1efc:	9e 81       	ldd	r25, Y+6	; 0x06
    1efe:	81 30       	cpi	r24, 0x01	; 1
    1f00:	91 05       	cpc	r25, r1
    1f02:	e1 f0       	breq	.+56     	; 0x1f3c <TIMER_init+0x2aa>
    1f04:	2d 81       	ldd	r18, Y+5	; 0x05
    1f06:	3e 81       	ldd	r19, Y+6	; 0x06
    1f08:	22 30       	cpi	r18, 0x02	; 2
    1f0a:	31 05       	cpc	r19, r1
    1f0c:	fc f4       	brge	.+62     	; 0x1f4c <TIMER_init+0x2ba>
    1f0e:	d9 c0       	rjmp	.+434    	; 0x20c2 <TIMER_init+0x430>
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	9e 81       	ldd	r25, Y+6	; 0x06
    1f14:	85 30       	cpi	r24, 0x05	; 5
    1f16:	91 05       	cpc	r25, r1
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <TIMER_init+0x28a>
    1f1a:	40 c0       	rjmp	.+128    	; 0x1f9c <TIMER_init+0x30a>
    1f1c:	2d 81       	ldd	r18, Y+5	; 0x05
    1f1e:	3e 81       	ldd	r19, Y+6	; 0x06
    1f20:	25 30       	cpi	r18, 0x05	; 5
    1f22:	31 05       	cpc	r19, r1
    1f24:	9c f1       	brlt	.+102    	; 0x1f8c <TIMER_init+0x2fa>
    1f26:	8d 81       	ldd	r24, Y+5	; 0x05
    1f28:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2a:	86 30       	cpi	r24, 0x06	; 6
    1f2c:	91 05       	cpc	r25, r1
    1f2e:	b1 f0       	breq	.+44     	; 0x1f5c <TIMER_init+0x2ca>
    1f30:	2d 81       	ldd	r18, Y+5	; 0x05
    1f32:	3e 81       	ldd	r19, Y+6	; 0x06
    1f34:	27 30       	cpi	r18, 0x07	; 7
    1f36:	31 05       	cpc	r19, r1
    1f38:	09 f1       	breq	.+66     	; 0x1f7c <TIMER_init+0x2ea>
    1f3a:	c3 c0       	rjmp	.+390    	; 0x20c2 <TIMER_init+0x430>
			{
			case NO_CLOCK:
				break;
			case F_CPU_CLOCK: TCCR2 |= (1<<CS20);
    1f3c:	a5 e4       	ldi	r26, 0x45	; 69
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e5 e4       	ldi	r30, 0x45	; 69
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	81 60       	ori	r24, 0x01	; 1
    1f48:	8c 93       	st	X, r24
    1f4a:	bb c0       	rjmp	.+374    	; 0x20c2 <TIMER_init+0x430>
			break;
			case F_CPU_8: TCCR2 |= (1<<CS21);
    1f4c:	a5 e4       	ldi	r26, 0x45	; 69
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e5 e4       	ldi	r30, 0x45	; 69
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	82 60       	ori	r24, 0x02	; 2
    1f58:	8c 93       	st	X, r24
    1f5a:	b3 c0       	rjmp	.+358    	; 0x20c2 <TIMER_init+0x430>
			break;
			case F_CPU_T2_32: TCCR2 |= (1<<CS21) | (1<<CS20);
    1f5c:	a5 e4       	ldi	r26, 0x45	; 69
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e5 e4       	ldi	r30, 0x45	; 69
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	83 60       	ori	r24, 0x03	; 3
    1f68:	8c 93       	st	X, r24
    1f6a:	ab c0       	rjmp	.+342    	; 0x20c2 <TIMER_init+0x430>
			break;
			case F_CPU_64: TCCR2 |= (1<<CS22);
    1f6c:	a5 e4       	ldi	r26, 0x45	; 69
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	e5 e4       	ldi	r30, 0x45	; 69
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	84 60       	ori	r24, 0x04	; 4
    1f78:	8c 93       	st	X, r24
    1f7a:	a3 c0       	rjmp	.+326    	; 0x20c2 <TIMER_init+0x430>
			break;
			case F_CPU_T2_128: TCCR2 |= (1<<CS22) | (1<<CS20);
    1f7c:	a5 e4       	ldi	r26, 0x45	; 69
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e5 e4       	ldi	r30, 0x45	; 69
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	85 60       	ori	r24, 0x05	; 5
    1f88:	8c 93       	st	X, r24
    1f8a:	9b c0       	rjmp	.+310    	; 0x20c2 <TIMER_init+0x430>
			break;
			case F_CPU_256: TCCR2 |= (1<<CS22) | (1<<CS21);
    1f8c:	a5 e4       	ldi	r26, 0x45	; 69
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e5 e4       	ldi	r30, 0x45	; 69
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	86 60       	ori	r24, 0x06	; 6
    1f98:	8c 93       	st	X, r24
    1f9a:	93 c0       	rjmp	.+294    	; 0x20c2 <TIMER_init+0x430>
			break;
			case F_CPU_1024:TCCR2 |= (1<<CS22) | (1<<CS21) | (1<<CS20);
    1f9c:	a5 e4       	ldi	r26, 0x45	; 69
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	e5 e4       	ldi	r30, 0x45	; 69
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	87 60       	ori	r24, 0x07	; 7
    1fa8:	8c 93       	st	X, r24
    1faa:	8b c0       	rjmp	.+278    	; 0x20c2 <TIMER_init+0x430>
			break;
			}
		}break;
		case COMPARE:{
			TCCR2 = (1<<FOC2) | (1<<WGM21) | ((Config_Ptr->cmp_pin)<<COM20);
    1fac:	a5 e4       	ldi	r26, 0x45	; 69
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb4:	83 81       	ldd	r24, Z+3	; 0x03
    1fb6:	88 2f       	mov	r24, r24
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	82 95       	swap	r24
    1fbc:	92 95       	swap	r25
    1fbe:	90 7f       	andi	r25, 0xF0	; 240
    1fc0:	98 27       	eor	r25, r24
    1fc2:	80 7f       	andi	r24, 0xF0	; 240
    1fc4:	98 27       	eor	r25, r24
    1fc6:	88 68       	ori	r24, 0x88	; 136
    1fc8:	8c 93       	st	X, r24
			TCNT2 = (uint8)(Config_Ptr->initial_value);
    1fca:	a4 e4       	ldi	r26, 0x44	; 68
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd2:	85 81       	ldd	r24, Z+5	; 0x05
    1fd4:	96 81       	ldd	r25, Z+6	; 0x06
    1fd6:	8c 93       	st	X, r24
			OCR2 = (uint8)(Config_Ptr->compare_value);
    1fd8:	a3 e4       	ldi	r26, 0x43	; 67
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fde:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe0:	87 81       	ldd	r24, Z+7	; 0x07
    1fe2:	90 85       	ldd	r25, Z+8	; 0x08
    1fe4:	8c 93       	st	X, r24
			TIMSK = (1<<OCIE2);
    1fe6:	e9 e5       	ldi	r30, 0x59	; 89
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 e8       	ldi	r24, 0x80	; 128
    1fec:	80 83       	st	Z, r24
			switch(Config_Ptr->pre_scaler)
    1fee:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff2:	82 81       	ldd	r24, Z+2	; 0x02
    1ff4:	28 2f       	mov	r18, r24
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	3c 83       	std	Y+4, r19	; 0x04
    1ffa:	2b 83       	std	Y+3, r18	; 0x03
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    2000:	83 30       	cpi	r24, 0x03	; 3
    2002:	91 05       	cpc	r25, r1
    2004:	09 f4       	brne	.+2      	; 0x2008 <TIMER_init+0x376>
    2006:	3e c0       	rjmp	.+124    	; 0x2084 <TIMER_init+0x3f2>
    2008:	2b 81       	ldd	r18, Y+3	; 0x03
    200a:	3c 81       	ldd	r19, Y+4	; 0x04
    200c:	24 30       	cpi	r18, 0x04	; 4
    200e:	31 05       	cpc	r19, r1
    2010:	5c f4       	brge	.+22     	; 0x2028 <TIMER_init+0x396>
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	9c 81       	ldd	r25, Y+4	; 0x04
    2016:	81 30       	cpi	r24, 0x01	; 1
    2018:	91 05       	cpc	r25, r1
    201a:	e1 f0       	breq	.+56     	; 0x2054 <TIMER_init+0x3c2>
    201c:	2b 81       	ldd	r18, Y+3	; 0x03
    201e:	3c 81       	ldd	r19, Y+4	; 0x04
    2020:	22 30       	cpi	r18, 0x02	; 2
    2022:	31 05       	cpc	r19, r1
    2024:	fc f4       	brge	.+62     	; 0x2064 <TIMER_init+0x3d2>
    2026:	4d c0       	rjmp	.+154    	; 0x20c2 <TIMER_init+0x430>
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	9c 81       	ldd	r25, Y+4	; 0x04
    202c:	85 30       	cpi	r24, 0x05	; 5
    202e:	91 05       	cpc	r25, r1
    2030:	09 f4       	brne	.+2      	; 0x2034 <TIMER_init+0x3a2>
    2032:	40 c0       	rjmp	.+128    	; 0x20b4 <TIMER_init+0x422>
    2034:	2b 81       	ldd	r18, Y+3	; 0x03
    2036:	3c 81       	ldd	r19, Y+4	; 0x04
    2038:	25 30       	cpi	r18, 0x05	; 5
    203a:	31 05       	cpc	r19, r1
    203c:	9c f1       	brlt	.+102    	; 0x20a4 <TIMER_init+0x412>
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	9c 81       	ldd	r25, Y+4	; 0x04
    2042:	86 30       	cpi	r24, 0x06	; 6
    2044:	91 05       	cpc	r25, r1
    2046:	b1 f0       	breq	.+44     	; 0x2074 <TIMER_init+0x3e2>
    2048:	2b 81       	ldd	r18, Y+3	; 0x03
    204a:	3c 81       	ldd	r19, Y+4	; 0x04
    204c:	27 30       	cpi	r18, 0x07	; 7
    204e:	31 05       	cpc	r19, r1
    2050:	09 f1       	breq	.+66     	; 0x2094 <TIMER_init+0x402>
    2052:	37 c0       	rjmp	.+110    	; 0x20c2 <TIMER_init+0x430>
			{
			case NO_CLOCK:
				break;
			case F_CPU_CLOCK: TCCR2 |= (1<<CS20);
    2054:	a5 e4       	ldi	r26, 0x45	; 69
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e5 e4       	ldi	r30, 0x45	; 69
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	81 60       	ori	r24, 0x01	; 1
    2060:	8c 93       	st	X, r24
    2062:	2f c0       	rjmp	.+94     	; 0x20c2 <TIMER_init+0x430>
			break;
			case F_CPU_8: TCCR2 |= (1<<CS21);
    2064:	a5 e4       	ldi	r26, 0x45	; 69
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	e5 e4       	ldi	r30, 0x45	; 69
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	82 60       	ori	r24, 0x02	; 2
    2070:	8c 93       	st	X, r24
    2072:	27 c0       	rjmp	.+78     	; 0x20c2 <TIMER_init+0x430>
			break;
			case F_CPU_T2_32: TCCR2 |= (1<<CS21) | (1<<CS20);
    2074:	a5 e4       	ldi	r26, 0x45	; 69
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e5 e4       	ldi	r30, 0x45	; 69
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	83 60       	ori	r24, 0x03	; 3
    2080:	8c 93       	st	X, r24
    2082:	1f c0       	rjmp	.+62     	; 0x20c2 <TIMER_init+0x430>
			break;
			case F_CPU_64: TCCR2 |= (1<<CS22);
    2084:	a5 e4       	ldi	r26, 0x45	; 69
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e5 e4       	ldi	r30, 0x45	; 69
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	84 60       	ori	r24, 0x04	; 4
    2090:	8c 93       	st	X, r24
    2092:	17 c0       	rjmp	.+46     	; 0x20c2 <TIMER_init+0x430>
			break;
			case F_CPU_T2_128: TCCR2 |= (1<<CS22) | (1<<CS20);
    2094:	a5 e4       	ldi	r26, 0x45	; 69
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e5 e4       	ldi	r30, 0x45	; 69
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	85 60       	ori	r24, 0x05	; 5
    20a0:	8c 93       	st	X, r24
    20a2:	0f c0       	rjmp	.+30     	; 0x20c2 <TIMER_init+0x430>
			break;
			case F_CPU_256: TCCR2 |= (1<<CS22) | (1<<CS21);
    20a4:	a5 e4       	ldi	r26, 0x45	; 69
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e5 e4       	ldi	r30, 0x45	; 69
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	86 60       	ori	r24, 0x06	; 6
    20b0:	8c 93       	st	X, r24
    20b2:	07 c0       	rjmp	.+14     	; 0x20c2 <TIMER_init+0x430>
			break;
			case F_CPU_1024:TCCR2 |= (1<<CS22) | (1<<CS21) | (1<<CS20);
    20b4:	a5 e4       	ldi	r26, 0x45	; 69
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e5 e4       	ldi	r30, 0x45	; 69
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	87 60       	ori	r24, 0x07	; 7
    20c0:	8c 93       	st	X, r24
		}break;
		}
	}
	}

}
    20c2:	60 96       	adiw	r28, 0x10	; 16
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <TIMER_setCallBackT0>:
/*
 * Description: Function to set the Call Back function address to timer 0.
 */
void TIMER_setCallBackT0(void(*a_ptr)(void)){
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	00 d0       	rcall	.+0      	; 0x20da <TIMER_setCallBackT0+0x6>
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	9a 83       	std	Y+2, r25	; 0x02
    20e0:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrT0 = a_ptr;
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	9a 81       	ldd	r25, Y+2	; 0x02
    20e6:	90 93 7a 00 	sts	0x007A, r25
    20ea:	80 93 79 00 	sts	0x0079, r24
}
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	08 95       	ret

000020f8 <TIMER_setCallBackT1>:
/*
 * Description: Function to set the Call Back function address to timer 1.
 */
void TIMER_setCallBackT1(void(*a_ptr)(void)){
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <TIMER_setCallBackT1+0x6>
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	9a 83       	std	Y+2, r25	; 0x02
    2104:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrT1 = a_ptr;
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	9a 81       	ldd	r25, Y+2	; 0x02
    210a:	90 93 7c 00 	sts	0x007C, r25
    210e:	80 93 7b 00 	sts	0x007B, r24
}
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <TIMER_setCallBackT2>:
/*
 * Description: Function to set the Call Back function address to timer 2.
 */
void TIMER_setCallBackT2(void(*a_ptr)(void)){
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	00 d0       	rcall	.+0      	; 0x2122 <TIMER_setCallBackT2+0x6>
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	9a 83       	std	Y+2, r25	; 0x02
    2128:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrT2 = a_ptr;
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	90 93 7e 00 	sts	0x007E, r25
    2132:	80 93 7d 00 	sts	0x007D, r24
}
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <TIMER_DeInit>:
/*
 * Description: Function to disable the Timer
 */
void TIMER_DeInit(TIMER_number timer){
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	00 d0       	rcall	.+0      	; 0x2146 <TIMER_DeInit+0x6>
    2146:	0f 92       	push	r0
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	89 83       	std	Y+1, r24	; 0x01
	switch(timer){
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	28 2f       	mov	r18, r24
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	3b 83       	std	Y+3, r19	; 0x03
    2156:	2a 83       	std	Y+2, r18	; 0x02
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	9b 81       	ldd	r25, Y+3	; 0x03
    215c:	81 30       	cpi	r24, 0x01	; 1
    215e:	91 05       	cpc	r25, r1
    2160:	d1 f0       	breq	.+52     	; 0x2196 <TIMER_DeInit+0x56>
    2162:	2a 81       	ldd	r18, Y+2	; 0x02
    2164:	3b 81       	ldd	r19, Y+3	; 0x03
    2166:	22 30       	cpi	r18, 0x02	; 2
    2168:	31 05       	cpc	r19, r1
    216a:	79 f1       	breq	.+94     	; 0x21ca <TIMER_DeInit+0x8a>
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	9b 81       	ldd	r25, Y+3	; 0x03
    2170:	00 97       	sbiw	r24, 0x00	; 0
    2172:	d9 f5       	brne	.+118    	; 0x21ea <TIMER_DeInit+0xaa>
	case TIMER0: /*disable all timer 0 registers*/
		TCNT0 = 0;
    2174:	e2 e5       	ldi	r30, 0x52	; 82
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	10 82       	st	Z, r1
		TCCR0 = 0;
    217a:	e3 e5       	ldi	r30, 0x53	; 83
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	10 82       	st	Z, r1
		OCR0 = 0;
    2180:	ec e5       	ldi	r30, 0x5C	; 92
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	10 82       	st	Z, r1
		TIMSK &= 0xFC;
    2186:	a9 e5       	ldi	r26, 0x59	; 89
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	e9 e5       	ldi	r30, 0x59	; 89
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	8c 7f       	andi	r24, 0xFC	; 252
    2192:	8c 93       	st	X, r24
    2194:	2a c0       	rjmp	.+84     	; 0x21ea <TIMER_DeInit+0xaa>
		break;
	case TIMER1:/*disable all timer 1 registers*/
		TCNT1 = 0;
    2196:	ec e4       	ldi	r30, 0x4C	; 76
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	11 82       	std	Z+1, r1	; 0x01
    219c:	10 82       	st	Z, r1
		OCR1A = 0;
    219e:	ea e4       	ldi	r30, 0x4A	; 74
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	11 82       	std	Z+1, r1	; 0x01
    21a4:	10 82       	st	Z, r1
		OCR1B = 0;
    21a6:	e8 e4       	ldi	r30, 0x48	; 72
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	11 82       	std	Z+1, r1	; 0x01
    21ac:	10 82       	st	Z, r1
		TCCR1A = 0;
    21ae:	ef e4       	ldi	r30, 0x4F	; 79
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	10 82       	st	Z, r1
		TCCR1B = 0;
    21b4:	ee e4       	ldi	r30, 0x4E	; 78
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	10 82       	st	Z, r1
		TIMSK &= 0xC3;
    21ba:	a9 e5       	ldi	r26, 0x59	; 89
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e9 e5       	ldi	r30, 0x59	; 89
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	83 7c       	andi	r24, 0xC3	; 195
    21c6:	8c 93       	st	X, r24
    21c8:	10 c0       	rjmp	.+32     	; 0x21ea <TIMER_DeInit+0xaa>
		break;
	case TIMER2:/*disable all timer 2 registers*/
		TCNT2 = 0;
    21ca:	e4 e4       	ldi	r30, 0x44	; 68
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	10 82       	st	Z, r1
		TCCR2 = 0;
    21d0:	e5 e4       	ldi	r30, 0x45	; 69
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	10 82       	st	Z, r1
		OCR2 = 0;
    21d6:	e3 e4       	ldi	r30, 0x43	; 67
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	10 82       	st	Z, r1
		TIMSK &=0x3F;
    21dc:	a9 e5       	ldi	r26, 0x59	; 89
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e9 e5       	ldi	r30, 0x59	; 89
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	8f 73       	andi	r24, 0x3F	; 63
    21e8:	8c 93       	st	X, r24
		break;

	}
}
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	08 95       	ret

000021f6 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_Config*Config_Ptr)
{
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	00 d0       	rcall	.+0      	; 0x21fc <UART_init+0x6>
    21fc:	00 d0       	rcall	.+0      	; 0x21fe <UART_init+0x8>
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	9c 83       	std	Y+4, r25	; 0x04
    2204:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2206:	1a 82       	std	Y+2, r1	; 0x02
    2208:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    220a:	eb e2       	ldi	r30, 0x2B	; 43
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	82 e0       	ldi	r24, 0x02	; 2
    2210:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2  obtained from frame_size variable in the configurations structure
	 ***********************************************************************/ 
	if (Config_Ptr->frame_size!= SIZE_9){
    2212:	eb 81       	ldd	r30, Y+3	; 0x03
    2214:	fc 81       	ldd	r31, Y+4	; 0x04
    2216:	80 81       	ld	r24, Z
    2218:	87 30       	cpi	r24, 0x07	; 7
    221a:	29 f0       	breq	.+10     	; 0x2226 <UART_init+0x30>
	UCSRB = (1<<RXEN) | (1<<TXEN);}
    221c:	ea e2       	ldi	r30, 0x2A	; 42
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	88 e1       	ldi	r24, 0x18	; 24
    2222:	80 83       	st	Z, r24
    2224:	04 c0       	rjmp	.+8      	; 0x222e <UART_init+0x38>
	else{
		UCSRB = (1<<RXEN) | (1<<TXEN)|(1<<UCSZ2);
    2226:	ea e2       	ldi	r30, 0x2A	; 42
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	8c e1       	ldi	r24, 0x1C	; 28
    222c:	80 83       	st	Z, r24
	 * UPM1:0    obtained from parity_mode variable in the configurations structure
	 * USBS      obtained from stop_bits variable in the configurations structure
	 * UCSZ1:0   obtained from frame_size variable in the configurations structure
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    222e:	e0 e4       	ldi	r30, 0x40	; 64
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 e8       	ldi	r24, 0x80	; 128
    2234:	80 83       	st	Z, r24
	UCSRC |= (UCSRC&0xf9)|((Config_Ptr->frame_size&0x03)<<1);
    2236:	a0 e4       	ldi	r26, 0x40	; 64
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e0 e4       	ldi	r30, 0x40	; 64
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	38 2f       	mov	r19, r24
    2242:	e0 e4       	ldi	r30, 0x40	; 64
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	28 2f       	mov	r18, r24
    224a:	29 7f       	andi	r18, 0xF9	; 249
    224c:	eb 81       	ldd	r30, Y+3	; 0x03
    224e:	fc 81       	ldd	r31, Y+4	; 0x04
    2250:	80 81       	ld	r24, Z
    2252:	88 2f       	mov	r24, r24
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	83 70       	andi	r24, 0x03	; 3
    2258:	90 70       	andi	r25, 0x00	; 0
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	82 2b       	or	r24, r18
    2260:	83 2b       	or	r24, r19
    2262:	8c 93       	st	X, r24
	UCSRC |=(UCSRC&0xcf)|((Config_Ptr->parity_mode)<<4);
    2264:	a0 e4       	ldi	r26, 0x40	; 64
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	e0 e4       	ldi	r30, 0x40	; 64
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	38 2f       	mov	r19, r24
    2270:	e0 e4       	ldi	r30, 0x40	; 64
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	28 2f       	mov	r18, r24
    2278:	2f 7c       	andi	r18, 0xCF	; 207
    227a:	eb 81       	ldd	r30, Y+3	; 0x03
    227c:	fc 81       	ldd	r31, Y+4	; 0x04
    227e:	81 81       	ldd	r24, Z+1	; 0x01
    2280:	88 2f       	mov	r24, r24
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	82 95       	swap	r24
    2286:	92 95       	swap	r25
    2288:	90 7f       	andi	r25, 0xF0	; 240
    228a:	98 27       	eor	r25, r24
    228c:	80 7f       	andi	r24, 0xF0	; 240
    228e:	98 27       	eor	r25, r24
    2290:	82 2b       	or	r24, r18
    2292:	83 2b       	or	r24, r19
    2294:	8c 93       	st	X, r24
	UCSRC |=(UCSRC&0xf7)|((Config_Ptr->stop_bits)<<3);
    2296:	a0 e4       	ldi	r26, 0x40	; 64
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	e0 e4       	ldi	r30, 0x40	; 64
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	38 2f       	mov	r19, r24
    22a2:	e0 e4       	ldi	r30, 0x40	; 64
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	28 2f       	mov	r18, r24
    22aa:	27 7f       	andi	r18, 0xF7	; 247
    22ac:	eb 81       	ldd	r30, Y+3	; 0x03
    22ae:	fc 81       	ldd	r31, Y+4	; 0x04
    22b0:	82 81       	ldd	r24, Z+2	; 0x02
    22b2:	88 2f       	mov	r24, r24
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	88 0f       	add	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	88 0f       	add	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	82 2b       	or	r24, r18
    22c4:	83 2b       	or	r24, r19
    22c6:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    22c8:	eb 81       	ldd	r30, Y+3	; 0x03
    22ca:	fc 81       	ldd	r31, Y+4	; 0x04
    22cc:	83 81       	ldd	r24, Z+3	; 0x03
    22ce:	94 81       	ldd	r25, Z+4	; 0x04
    22d0:	a5 81       	ldd	r26, Z+5	; 0x05
    22d2:	b6 81       	ldd	r27, Z+6	; 0x06
    22d4:	88 0f       	add	r24, r24
    22d6:	99 1f       	adc	r25, r25
    22d8:	aa 1f       	adc	r26, r26
    22da:	bb 1f       	adc	r27, r27
    22dc:	88 0f       	add	r24, r24
    22de:	99 1f       	adc	r25, r25
    22e0:	aa 1f       	adc	r26, r26
    22e2:	bb 1f       	adc	r27, r27
    22e4:	88 0f       	add	r24, r24
    22e6:	99 1f       	adc	r25, r25
    22e8:	aa 1f       	adc	r26, r26
    22ea:	bb 1f       	adc	r27, r27
    22ec:	9c 01       	movw	r18, r24
    22ee:	ad 01       	movw	r20, r26
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	92 e1       	ldi	r25, 0x12	; 18
    22f4:	aa e7       	ldi	r26, 0x7A	; 122
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	bc 01       	movw	r22, r24
    22fa:	cd 01       	movw	r24, r26
    22fc:	0e 94 29 12 	call	0x2452	; 0x2452 <__udivmodsi4>
    2300:	da 01       	movw	r26, r20
    2302:	c9 01       	movw	r24, r18
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	9a 83       	std	Y+2, r25	; 0x02
    2308:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    230a:	e0 e4       	ldi	r30, 0x40	; 64
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	9a 81       	ldd	r25, Y+2	; 0x02
    2312:	89 2f       	mov	r24, r25
    2314:	99 27       	eor	r25, r25
    2316:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2318:	e9 e2       	ldi	r30, 0x29	; 41
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	80 83       	st	Z, r24
}
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	0f 92       	push	r0
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    233a:	eb e2       	ldi	r30, 0x2B	; 43
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	88 2f       	mov	r24, r24
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	80 72       	andi	r24, 0x20	; 32
    2346:	90 70       	andi	r25, 0x00	; 0
    2348:	00 97       	sbiw	r24, 0x00	; 0
    234a:	b9 f3       	breq	.-18     	; 0x233a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    234c:	ec e2       	ldi	r30, 0x2C	; 44
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2354:	0f 90       	pop	r0
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2364:	eb e2       	ldi	r30, 0x2B	; 43
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	88 23       	and	r24, r24
    236c:	dc f7       	brge	.-10     	; 0x2364 <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    236e:	ec e2       	ldi	r30, 0x2C	; 44
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
}
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	00 d0       	rcall	.+0      	; 0x2380 <UART_sendString+0x6>
    2380:	0f 92       	push	r0
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
    2386:	9b 83       	std	Y+3, r25	; 0x03
    2388:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    238a:	19 82       	std	Y+1, r1	; 0x01
    238c:	0e c0       	rjmp	.+28     	; 0x23aa <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	28 2f       	mov	r18, r24
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	9b 81       	ldd	r25, Y+3	; 0x03
    2398:	fc 01       	movw	r30, r24
    239a:	e2 0f       	add	r30, r18
    239c:	f3 1f       	adc	r31, r19
    239e:	80 81       	ld	r24, Z
    23a0:	0e 94 97 11 	call	0x232e	; 0x232e <UART_sendByte>
		i++;
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	8f 5f       	subi	r24, 0xFF	; 255
    23a8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	28 2f       	mov	r18, r24
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	8a 81       	ldd	r24, Y+2	; 0x02
    23b2:	9b 81       	ldd	r25, Y+3	; 0x03
    23b4:	fc 01       	movw	r30, r24
    23b6:	e2 0f       	add	r30, r18
    23b8:	f3 1f       	adc	r31, r19
    23ba:	80 81       	ld	r24, Z
    23bc:	88 23       	and	r24, r24
    23be:	39 f7       	brne	.-50     	; 0x238e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    23c0:	0f 90       	pop	r0
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	08 95       	ret

000023cc <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    23cc:	0f 93       	push	r16
    23ce:	1f 93       	push	r17
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <UART_receiveString+0xa>
    23d6:	0f 92       	push	r0
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	9b 83       	std	Y+3, r25	; 0x03
    23de:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    23e0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	28 2f       	mov	r18, r24
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	9b 81       	ldd	r25, Y+3	; 0x03
    23ec:	8c 01       	movw	r16, r24
    23ee:	02 0f       	add	r16, r18
    23f0:	13 1f       	adc	r17, r19
    23f2:	0e 94 ae 11 	call	0x235c	; 0x235c <UART_receiveByte>
    23f6:	f8 01       	movw	r30, r16
    23f8:	80 83       	st	Z, r24
    23fa:	0f c0       	rjmp	.+30     	; 0x241a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	8f 5f       	subi	r24, 0xFF	; 255
    2400:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	28 2f       	mov	r18, r24
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	9b 81       	ldd	r25, Y+3	; 0x03
    240c:	8c 01       	movw	r16, r24
    240e:	02 0f       	add	r16, r18
    2410:	13 1f       	adc	r17, r19
    2412:	0e 94 ae 11 	call	0x235c	; 0x235c <UART_receiveByte>
    2416:	f8 01       	movw	r30, r16
    2418:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	28 2f       	mov	r18, r24
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	9b 81       	ldd	r25, Y+3	; 0x03
    2424:	fc 01       	movw	r30, r24
    2426:	e2 0f       	add	r30, r18
    2428:	f3 1f       	adc	r31, r19
    242a:	80 81       	ld	r24, Z
    242c:	83 32       	cpi	r24, 0x23	; 35
    242e:	31 f7       	brne	.-52     	; 0x23fc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	28 2f       	mov	r18, r24
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	9b 81       	ldd	r25, Y+3	; 0x03
    243a:	fc 01       	movw	r30, r24
    243c:	e2 0f       	add	r30, r18
    243e:	f3 1f       	adc	r31, r19
    2440:	10 82       	st	Z, r1
}
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	1f 91       	pop	r17
    244e:	0f 91       	pop	r16
    2450:	08 95       	ret

00002452 <__udivmodsi4>:
    2452:	a1 e2       	ldi	r26, 0x21	; 33
    2454:	1a 2e       	mov	r1, r26
    2456:	aa 1b       	sub	r26, r26
    2458:	bb 1b       	sub	r27, r27
    245a:	fd 01       	movw	r30, r26
    245c:	0d c0       	rjmp	.+26     	; 0x2478 <__udivmodsi4_ep>

0000245e <__udivmodsi4_loop>:
    245e:	aa 1f       	adc	r26, r26
    2460:	bb 1f       	adc	r27, r27
    2462:	ee 1f       	adc	r30, r30
    2464:	ff 1f       	adc	r31, r31
    2466:	a2 17       	cp	r26, r18
    2468:	b3 07       	cpc	r27, r19
    246a:	e4 07       	cpc	r30, r20
    246c:	f5 07       	cpc	r31, r21
    246e:	20 f0       	brcs	.+8      	; 0x2478 <__udivmodsi4_ep>
    2470:	a2 1b       	sub	r26, r18
    2472:	b3 0b       	sbc	r27, r19
    2474:	e4 0b       	sbc	r30, r20
    2476:	f5 0b       	sbc	r31, r21

00002478 <__udivmodsi4_ep>:
    2478:	66 1f       	adc	r22, r22
    247a:	77 1f       	adc	r23, r23
    247c:	88 1f       	adc	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	1a 94       	dec	r1
    2482:	69 f7       	brne	.-38     	; 0x245e <__udivmodsi4_loop>
    2484:	60 95       	com	r22
    2486:	70 95       	com	r23
    2488:	80 95       	com	r24
    248a:	90 95       	com	r25
    248c:	9b 01       	movw	r18, r22
    248e:	ac 01       	movw	r20, r24
    2490:	bd 01       	movw	r22, r26
    2492:	cf 01       	movw	r24, r30
    2494:	08 95       	ret

00002496 <__prologue_saves__>:
    2496:	2f 92       	push	r2
    2498:	3f 92       	push	r3
    249a:	4f 92       	push	r4
    249c:	5f 92       	push	r5
    249e:	6f 92       	push	r6
    24a0:	7f 92       	push	r7
    24a2:	8f 92       	push	r8
    24a4:	9f 92       	push	r9
    24a6:	af 92       	push	r10
    24a8:	bf 92       	push	r11
    24aa:	cf 92       	push	r12
    24ac:	df 92       	push	r13
    24ae:	ef 92       	push	r14
    24b0:	ff 92       	push	r15
    24b2:	0f 93       	push	r16
    24b4:	1f 93       	push	r17
    24b6:	cf 93       	push	r28
    24b8:	df 93       	push	r29
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
    24be:	ca 1b       	sub	r28, r26
    24c0:	db 0b       	sbc	r29, r27
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	09 94       	ijmp

000024ce <__epilogue_restores__>:
    24ce:	2a 88       	ldd	r2, Y+18	; 0x12
    24d0:	39 88       	ldd	r3, Y+17	; 0x11
    24d2:	48 88       	ldd	r4, Y+16	; 0x10
    24d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    24d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    24d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    24da:	8c 84       	ldd	r8, Y+12	; 0x0c
    24dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    24de:	aa 84       	ldd	r10, Y+10	; 0x0a
    24e0:	b9 84       	ldd	r11, Y+9	; 0x09
    24e2:	c8 84       	ldd	r12, Y+8	; 0x08
    24e4:	df 80       	ldd	r13, Y+7	; 0x07
    24e6:	ee 80       	ldd	r14, Y+6	; 0x06
    24e8:	fd 80       	ldd	r15, Y+5	; 0x05
    24ea:	0c 81       	ldd	r16, Y+4	; 0x04
    24ec:	1b 81       	ldd	r17, Y+3	; 0x03
    24ee:	aa 81       	ldd	r26, Y+2	; 0x02
    24f0:	b9 81       	ldd	r27, Y+1	; 0x01
    24f2:	ce 0f       	add	r28, r30
    24f4:	d1 1d       	adc	r29, r1
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	ed 01       	movw	r28, r26
    2502:	08 95       	ret

00002504 <_exit>:
    2504:	f8 94       	cli

00002506 <__stop_program>:
    2506:	ff cf       	rjmp	.-2      	; 0x2506 <__stop_program>
